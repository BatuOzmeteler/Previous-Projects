   1                 		.file	"spi_master.c"
   2                 		.variant xap2+
   3                 	
   4                 		.small
   5                 	
   6                 		.section	.debug_abbrev,"",@progbits
   7                 	.Ldebug_abbrev0:
   8                 		.section	.debug_info,"",@progbits
   9                 	.Ldebug_info0:
  10                 		.section	.debug_line,"",@progbits
  11                 	.Ldebug_line0:
  12 0000 00 00 00 00 		.text
  12      00 02 00 00 
  12      00 00 01 01 
  12      FB 0E 0D 00 
  12      01 01 01 01 
  13                 	.Ltext0:
  14                 		.section	.text.processEvent,"ax",@progbits
  15                 		.type	processEvent, @function
  16                 	processEvent:
  17                 	.LFB4:
  18                 		.file 1 "spi_master.c"
   0:spi_master.c  **** /******************************************************************************
   1:spi_master.c  ****  *  Copyright Cambridge Silicon Radio Limited 2013-2015
   2:spi_master.c  ****  *  Part of CSR uEnergy SDK 2.4.4
   3:spi_master.c  ****  *  Application version 2.4.4.0
   4:spi_master.c  ****  *
   5:spi_master.c  ****  *  FILE
   6:spi_master.c  ****  *      spi_master.c
   7:spi_master.c  ****  *
   8:spi_master.c  ****  *  DESCRIPTION
   9:spi_master.c  ****  *      Library providing buffered asynchronous access to a SPI bus in the
  10:spi_master.c  ****  *      Master role. This library uses the PIO controller as a SPI driver.
  11:spi_master.c  ****  *
  12:spi_master.c  ****  ******************************************************************************/
  13:spi_master.c  **** 
  14:spi_master.c  **** /*============================================================================*
  15:spi_master.c  ****  *  SDK Header Files
  16:spi_master.c  ****  *============================================================================*/
  17:spi_master.c  **** 
  18:spi_master.c  **** #include <types.h>          /* Commonly used typedefs */
  19:spi_master.c  **** #include <pio_ctrlr.h>      /* Access to the PIO controller */
  20:spi_master.c  **** #include <pio.h>            /* PIO configuration and control functions */
  21:spi_master.c  **** #include <mem.h>            /* Memory management routines */
  22:spi_master.c  **** 
  23:spi_master.c  **** /*============================================================================*
  24:spi_master.c  ****  *  Local Header Files
  25:spi_master.c  ****  *============================================================================*/
  26:spi_master.c  **** 
  27:spi_master.c  **** #include "spi_master.h"     /* Public interface to this file */
  28:spi_master.c  **** 
  29:spi_master.c  **** /*============================================================================*
  30:spi_master.c  ****  *  Private Definitions
  31:spi_master.c  ****  *============================================================================*/
  32:spi_master.c  **** 
  33:spi_master.c  **** /* PIO direction configured as output */
  34:spi_master.c  **** #define PIO_DIR_OUTPUT                      ( TRUE )
  35:spi_master.c  **** /* PIO direction configured as input */
  36:spi_master.c  **** #define PIO_DIR_INPUT                       ( FALSE )
  37:spi_master.c  **** /* The registers seen by PIO controller at addresses 0x41H and 0x40H */
  38:spi_master.c  **** #define PIO_CONTROLLER_REG_40H              ( PIO_CONTROLLER_RAM_START + 0x0020)
  39:spi_master.c  **** /* The registers seen by PIO controller at addresses 0x43H and 0x42H */
  40:spi_master.c  **** #define PIO_CONTROLLER_REG_42H              ( PIO_CONTROLLER_REG_40H + 1 )
  41:spi_master.c  **** /* The registers seen by PIO controller at addresses 0x45H and 0x44H */
  42:spi_master.c  **** #define PIO_CONTROLLER_REG_44H              ( PIO_CONTROLLER_REG_40H + 2 )
  43:spi_master.c  **** /* The registers seen by PIO controller at addresses 0x47H and 0x46H */
  44:spi_master.c  **** #define PIO_CONTROLLER_REG_46H              ( PIO_CONTROLLER_REG_40H + 3 )
  45:spi_master.c  **** /* The register where the PIO controller publishes the size of the data
  46:spi_master.c  ****  * it has transferred (in and out) prior to the SSEL de-assertion. */
  47:spi_master.c  **** #define PIO_CONTROLLER_REG_48H              ( PIO_CONTROLLER_REG_40H + 4 )
  48:spi_master.c  **** 
  49:spi_master.c  **** /* Offset (in words) from the start of the shared RAM, after which rest of
  50:spi_master.c  ****  * the area is used for SPI data exchange between XAP and PIO controller */
  51:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_XAP_OFFSET   ( 0x0008 )
  52:spi_master.c  **** /* Address to the shared RAM used for exchanging SPI data between
  53:spi_master.c  ****  * PIO Controller and XAP */
  54:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_XAP          ( PIO_CONTROLLER_REG_40H + \
  55:spi_master.c  ****                                              PIO_CONTROLLER_SPI_RAM_XAP_OFFSET )
  56:spi_master.c  **** /* Address to the shared RAM used for exchanging SPI data between
  57:spi_master.c  ****  * PIO Controller and XAP, as seen by PIO Controller */
  58:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_PIO          \
  59:spi_master.c  ****                         ( 0x40 + ( PIO_CONTROLLER_SPI_RAM_XAP_OFFSET * 2U ) )
  60:spi_master.c  **** /* Size (in octets) of the shared RAM used for exchanging SPI data between
  61:spi_master.c  ****  * PIO Controller and XAP */
  62:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_SIZE_OCTETS  \
  63:spi_master.c  ****                                     ( 0x80 - PIO_CONTROLLER_SPI_RAM_PIO )
  64:spi_master.c  **** /* Size (in words) of the shared RAM used for exchanging SPI data between
  65:spi_master.c  ****  * PIO Controller and XAP */
  66:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_SIZE_WORDS   \
  67:spi_master.c  ****                                     ( PIO_CONTROLLER_SPI_RAM_SIZE_OCTETS / 2U )
  68:spi_master.c  **** /* HALF Size (in octets) of the total shared RAM used for exchanging SPI data
  69:spi_master.c  ****  * between PIO Controller and XAP */
  70:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_HALF_OCTETS  PIO_CONTROLLER_SPI_RAM_SIZE_WORDS
  71:spi_master.c  **** 
  72:spi_master.c  **** /* Address to the section of shared RAM used to buffer incoming SPI data
  73:spi_master.c  ****  *  from SPI Master */
  74:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_XAP_RX       PIO_CONTROLLER_SPI_RAM_XAP
  75:spi_master.c  **** /* Size (in octets) of the SPI RAM data area use for buffering incoming SPI
  76:spi_master.c  ****  * data from SPI Master */
  77:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_RX_SIZE      PIO_CONTROLLER_SPI_RAM_HALF_OCTETS
  78:spi_master.c  **** 
  79:spi_master.c  **** /* Address to the section of shared RAM used to buffer SPI data for
  80:spi_master.c  ****  * onward transmission to SPI Master */
  81:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_XAP_TX       \
  82:spi_master.c  ****     ( PIO_CONTROLLER_SPI_RAM_XAP_RX + ( PIO_CONTROLLER_SPI_RAM_RX_SIZE /2U ) )
  83:spi_master.c  **** /* Size (in octets) of the SPI RAM data area use to buffer SPI data for
  84:spi_master.c  ****  * onward transmission to SPI Master */
  85:spi_master.c  **** #define PIO_CONTROLLER_SPI_RAM_TX_SIZE      PIO_CONTROLLER_SPI_RAM_HALF_OCTETS
  86:spi_master.c  **** 
  87:spi_master.c  **** /* Convert a pio number to bit mask
  88:spi_master.c  ****  * @param[in] pio PIO number
  89:spi_master.c  ****  */
  90:spi_master.c  **** #define PIO_BIT_MASK(pio)                   (((uint32)1) << (pio))
  91:spi_master.c  **** 
  92:spi_master.c  **** /* Write to LSB Octet in shared RAM */
  93:spi_master.c  **** #define WRITE_OCTET_TO_LSB(X)               ( (X) & 0xFF )
  94:spi_master.c  **** 
  95:spi_master.c  **** /* Read from LSB Octet in shared RAM */
  96:spi_master.c  **** #define READ_OCTET_FROM_LSB(X)              ( (X) & 0xFF )
  97:spi_master.c  **** 
  98:spi_master.c  **** /* Set number of octets of RX data to be received by PIO Controller prior to
  99:spi_master.c  ****  * issuing an interrupt, to XAP */
 100:spi_master.c  **** #define SET_SPI_TRANSFER_SIZE_REG(X)        \
 101:spi_master.c  ****         (*((volatile uint16 *)PIO_CONTROLLER_REG_40H) = WRITE_OCTET_TO_LSB(X))
 102:spi_master.c  **** 
 103:spi_master.c  **** /* Get the current threshold for PIO controller RX data before issuing an
 104:spi_master.c  ****  * interrupt to XAP */
 105:spi_master.c  **** #define GET_SPI_TRANSFER_SIZE_REG           \
 106:spi_master.c  ****        (READ_OCTET_FROM_LSB(*((const volatile uint16 *)PIO_CONTROLLER_REG_40H)))
 107:spi_master.c  **** 
 108:spi_master.c  **** /* The XAP interrupt is level triggered so several interrupts may be generated
 109:spi_master.c  ****  * before the PIO Controller is able to clear the WAKE_XAP signal. To avoid
 110:spi_master.c  ****  * duplicate interrupts, a flag (INT_ACK) is set by the PIO Controller and
 111:spi_master.c  ****  * cleared by the XAP application to handshake the interrupt. */
 112:spi_master.c  **** 
 113:spi_master.c  **** /* Read the PIO controller interrupt acknowledgement flag */
 114:spi_master.c  **** #define GET_SPI_INT_ACK                     \
 115:spi_master.c  ****        (READ_OCTET_FROM_LSB(*((const volatile uint16 *)PIO_CONTROLLER_REG_46H)))
 116:spi_master.c  **** 
 117:spi_master.c  **** /* Write to the PIO Controller interrupt acknowledgement flag */
 118:spi_master.c  **** #define SET_SPI_INT_ACK(X)                  \
 119:spi_master.c  ****         (*((volatile uint16 *)PIO_CONTROLLER_REG_46H) = WRITE_OCTET_TO_LSB(X))
 120:spi_master.c  **** 
 121:spi_master.c  **** /* Read the inter-octet delay currently set */
 122:spi_master.c  **** #define GET_INTER_OCTET_DELAY               \
 123:spi_master.c  ****        (READ_OCTET_FROM_LSB(*((const volatile uint16 *)PIO_CONTROLLER_REG_48H)))
 124:spi_master.c  **** 
 125:spi_master.c  **** /* Set the inter-octet delay for the PIO controller. Setting this to 1 would
 126:spi_master.c  ****  * introduce no additional delay. Setting it to 0 would introduce maximum
 127:spi_master.c  ****  * delay (510 cycles).
 128:spi_master.c  ****  */
 129:spi_master.c  **** #define SET_INTER_BYTE_DELAY(X)             \
 130:spi_master.c  ****         (*((volatile uint16 *)PIO_CONTROLLER_REG_48H) = WRITE_OCTET_TO_LSB(X))
 131:spi_master.c  **** 
 132:spi_master.c  **** /*============================================================================*
 133:spi_master.c  ****  *  Private Data Types
 134:spi_master.c  ****  *============================================================================*/
 135:spi_master.c  **** 
 136:spi_master.c  **** /*
 137:spi_master.c  ****  * Type defining various states of the SPI master
 138:spi_master.c  ****  */
 139:spi_master.c  **** typedef enum
 140:spi_master.c  **** {
 141:spi_master.c  ****     /* SPI master has been initialised, but not ready yet */
 142:spi_master.c  ****     TransactionState_Initialised,
 143:spi_master.c  ****     /* SPI master is currently idle and SSEL is currently de-asserted */
 144:spi_master.c  ****     TransactionState_PIOControllerReady,
 145:spi_master.c  ****     /* SPI master has asserted the SSEL and a transaction is in progress */
 146:spi_master.c  ****     TransactionState_TransactionStarted,
 147:spi_master.c  ****     /* SPI master is processing the PIO controller interrupt and hence
 148:spi_master.c  ****      * PIO controller is currently paused */
 149:spi_master.c  ****     TransactionState_PioControllerOnHold,
 150:spi_master.c  ****     /* SPI master is waiting for PIO Controller interrupt */
 151:spi_master.c  ****     TransactionState_WaitingForPioController,
 152:spi_master.c  ****     /* SPI master is waiting for PIO Controller interrupt, from which it
 153:spi_master.c  ****      * intends to end the transaction by de-asserting the slave select */
 154:spi_master.c  ****     TransactionState_WaitingForPioControllerToDeassert,
 155:spi_master.c  **** 
 156:spi_master.c  ****     /* Invalid state */
 157:spi_master.c  ****     TransactionState_Invalid
 158:spi_master.c  **** } TransactionState;
 159:spi_master.c  **** 
 160:spi_master.c  **** /*
 161:spi_master.c  ****  * Type defining various events posted to the SPI master state machine
 162:spi_master.c  ****  */
 163:spi_master.c  **** typedef enum
 164:spi_master.c  **** {
 165:spi_master.c  ****     /* Event posted to indicate that SPI master is ready and PIO controller
 166:spi_master.c  ****      * is running */
 167:spi_master.c  ****     TransactionEvent_PIOControllerStart,
 168:spi_master.c  ****     /* Event posted to start a transaction by asserting the slave select */
 169:spi_master.c  ****     TransactionEvent_AssertSSEL,
 170:spi_master.c  ****     /* Event posted to stop a transaction by de-asserting the slave select */
 171:spi_master.c  ****     TransactionEvent_DeassertSSEL,
 172:spi_master.c  ****     /* Event posted to notify that data has been transferred over to PIO
 173:spi_master.c  ****      * controller shared RAM and PIO controller has been resumed */
 174:spi_master.c  ****     TransactionEvent_PIOControllerUnblockedWithDataToSend,
 175:spi_master.c  ****     /* Event posted to notify that PIO controller has been resumed but no
 176:spi_master.c  ****      * data has been transferred over to PIO controller shared RAM */
 177:spi_master.c  ****     TransactionEvent_PIOControllerUnblockedButNoData,
 178:spi_master.c  ****     /* Event posted to signal that PIO controller has finished a transfer */
 179:spi_master.c  ****     TransactionEvent_PIOControllerEvent,
 180:spi_master.c  ****     /* Event posted to reset the SPI Master */
 181:spi_master.c  ****     TransactionEvent_Reset
 182:spi_master.c  **** } TransactionEvent;
 183:spi_master.c  **** 
 184:spi_master.c  **** /*
 185:spi_master.c  ****  * Type defining the SPI Master's state
 186:spi_master.c  ****  */
 187:spi_master.c  **** typedef struct _SPI_MASTER_STATE_T
 188:spi_master.c  **** {
 189:spi_master.c  ****     /* Current transaction state of SPIMaster */
 190:spi_master.c  ****     TransactionState state;
 191:spi_master.c  ****     /* Handle to tx buffer with data to be sent */
 192:spi_master.c  ****     OQ_HANDLE p_tx_data;
 193:spi_master.c  ****     /* Handle to rx buffer with recieved data */
 194:spi_master.c  ****     OQ_HANDLE p_rx_data;
 195:spi_master.c  ****     /* Rx data pointer to the data area shared with PIO Controller */
 196:spi_master.c  ****     OQ_HANDLE_T pio_rx_data;
 197:spi_master.c  ****     /* Tx data pointer to the data area shared with PIO Controller */
 198:spi_master.c  ****     OQ_HANDLE_T pio_tx_data;
 199:spi_master.c  ****     /* Data transfer callback */
 200:spi_master.c  ****     SpiMasterTransactionCallbackType p_data_cb_func;
 201:spi_master.c  **** } SPI_MASTER_STATE_T;
 202:spi_master.c  **** 
 203:spi_master.c  **** /*============================================================================*
 204:spi_master.c  ****  *  Private Data
 205:spi_master.c  ****  *============================================================================*/
 206:spi_master.c  **** 
 207:spi_master.c  **** /* SPI Master's state variable */
 208:spi_master.c  **** static SPI_MASTER_STATE_T state;
 209:spi_master.c  **** 
 210:spi_master.c  **** /*============================================================================*
 211:spi_master.c  ****  *  Private Function Prototypes
 212:spi_master.c  ****  *============================================================================*/
 213:spi_master.c  **** 
 214:spi_master.c  **** /* Setup the PIO Controller shared RAM */
 215:spi_master.c  **** static bool setupSharedRAM(uint8 tx_buffer_fill);
 216:spi_master.c  **** 
 217:spi_master.c  **** /* Set SSEL line */
 218:spi_master.c  **** static void setSSEL(bool assert);
 219:spi_master.c  **** 
 220:spi_master.c  **** /* Given an event check and validate whether the event can be processed in the
 221:spi_master.c  ****  * the current state */
 222:spi_master.c  **** static TransactionState processEvent(TransactionEvent event);
 223:spi_master.c  **** 
 224:spi_master.c  **** /*============================================================================*
 225:spi_master.c  ****  *  Private Function Implementations
 226:spi_master.c  ****  *============================================================================*/
 227:spi_master.c  **** 
 228:spi_master.c  **** /*----------------------------------------------------------------------------*
 229:spi_master.c  ****  *  NAME
 230:spi_master.c  ****  *      setupSharedRAM
 231:spi_master.c  ****  *
 232:spi_master.c  ****  *  DESCRIPTION
 233:spi_master.c  ****  *      Setup the PIO Controller shared RAM. Should only be called when PIO
 234:spi_master.c  ****  *      controller is not started
 235:spi_master.c  ****  *
 236:spi_master.c  ****  *  PARAMETERS
 237:spi_master.c  ****  *      tx_buffer_fill [in]     Fill character to be used to fill the Tx and Rx
 238:spi_master.c  ****  *                              data areas of the application shared memory
 239:spi_master.c  ****  *
 240:spi_master.c  ****  *  RETURNS
 241:spi_master.c  ****  *      TRUE if success, FALSE if failed.
 242:spi_master.c  ****  *----------------------------------------------------------------------------*/
 243:spi_master.c  **** static bool setupSharedRAM(uint8 tx_buffer_fill)
 244:spi_master.c  **** {
 245:spi_master.c  ****     bool ret_val = FALSE;
 246:spi_master.c  ****     
 247:spi_master.c  ****     /* Set the fill octet for the PIO controller tx buffer in the shared RAM */
 248:spi_master.c  ****     OQSetFill(&(state.pio_tx_data), TRUE, tx_buffer_fill);
 249:spi_master.c  ****     if (
 250:spi_master.c  ****             
 251:spi_master.c  ****             OQCreate(PIO_CONTROLLER_SPI_RAM_XAP_TX,  (PIO_CONTROLLER_SPI_RAM_TX_SIZE / 2U), OQDataM
 252:spi_master.c  ****             
 253:spi_master.c  ****             
 254:spi_master.c  ****             )
 255:spi_master.c  ****     /* If queue has been setup for the shared tx data area successfully */
 256:spi_master.c  ****     {
 257:spi_master.c  ****         /* Set the fill octet for the PIO controller rx buffer in the shared
 258:spi_master.c  ****          * RAM, just so we clear any existing data */
 259:spi_master.c  ****         OQSetFill(&(state.pio_rx_data), TRUE, tx_buffer_fill);
 260:spi_master.c  ****         if (OQCreate(PIO_CONTROLLER_SPI_RAM_XAP_RX,
 261:spi_master.c  ****                 (PIO_CONTROLLER_SPI_RAM_RX_SIZE / 2U), OQDataMode_packed,
 262:spi_master.c  ****                 &(state.pio_rx_data)))
 263:spi_master.c  ****         /* If queue has been setup for the shared rx data area successfully */
 264:spi_master.c  ****         {
 265:spi_master.c  ****             /* Fill the header area of the shared RAM */
 266:spi_master.c  ****             MemSet( PIO_CONTROLLER_REG_40H, 0U,
 267:spi_master.c  ****                                     PIO_CONTROLLER_SPI_RAM_XAP_OFFSET
 268:spi_master.c  ****                                         * sizeof(uint16) / sizeof(uint8));
 269:spi_master.c  ****             ret_val = TRUE;
 270:spi_master.c  ****         }
 271:spi_master.c  ****         /* No need to have the empty areas of the rx buffer in shared
 272:spi_master.c  ****          * RAM filled anymore */
 273:spi_master.c  ****         OQSetFill(&(state.pio_rx_data), FALSE, 0U);
 274:spi_master.c  ****     }
 275:spi_master.c  **** 
 276:spi_master.c  ****     if (!ret_val)
 277:spi_master.c  ****     {
 278:spi_master.c  ****         OQDestroy(&(state.pio_tx_data));
 279:spi_master.c  ****         OQDestroy(&(state.pio_rx_data));
 280:spi_master.c  ****     }
 281:spi_master.c  **** 
 282:spi_master.c  ****     return ret_val;
 283:spi_master.c  **** } /* setupSharedRAM */
 284:spi_master.c  **** 
 285:spi_master.c  **** /*----------------------------------------------------------------------------*
 286:spi_master.c  ****  *  NAME
 287:spi_master.c  ****  *      setSSEL
 288:spi_master.c  ****  *
 289:spi_master.c  ****  *  DESCRIPTION
 290:spi_master.c  ****  *      Set SSEL line
 291:spi_master.c  ****  *
 292:spi_master.c  ****  *  PARAMETERS
 293:spi_master.c  ****  *      assert [in]             Assert SSEL if TRUE, de-assert otherwise
 294:spi_master.c  ****  *
 295:spi_master.c  ****  *  RETURNS
 296:spi_master.c  ****  *      Nothing
 297:spi_master.c  ****  *----------------------------------------------------------------------------*/
 298:spi_master.c  **** static void setSSEL(bool assert)
 299:spi_master.c  **** {
 300:spi_master.c  ****     /*
 301:spi_master.c  ****      *   ACTIVE_LOW      ASSERT     PIO_STATE
 302:spi_master.c  ****      *   ====================================
 303:spi_master.c  ****      *      TRUE          TRUE        LOW   (FALSE)
 304:spi_master.c  ****      *      TRUE          FALSE       HIGH  (TRUE)
 305:spi_master.c  ****      *      FALSE         TRUE        HIGH  (TRUE)
 306:spi_master.c  ****      *      FALSE         FALSE       LOW   (FALSE)
 307:spi_master.c  ****      */
 308:spi_master.c  ****     PioSet(SPI_MASTER_PIO_SSEL, (SPI_MASTER_SSEL_ACTIVE_LOW != assert));
 309:spi_master.c  **** } /* setSSEL */
 310:spi_master.c  **** 
 311:spi_master.c  **** /** @page SPI_MASTER_STATE_TMachine SPI Master Statemachine
 312:spi_master.c  ****  *
 313:spi_master.c  ****  * SPI Master State machine implementation
 314:spi_master.c  ****  *
 315:spi_master.c  ****  * @dot
 316:spi_master.c  ****  * digraph finite_state_machine {
 317:spi_master.c  ****  *      rankdir=TD;
 318:spi_master.c  ****  *      node [shape = point ]; Invalid;
 319:spi_master.c  ****  *      node [shape = ellipse];
 320:spi_master.c  ****  *
 321:spi_master.c  ****  *      Invalid                 ->              Initialised;
 322:spi_master.c  ****  *      Initialised             ->              PIOControllerReady
 323:spi_master.c  ****  *              [label = "PIOControllerStart"];
 324:spi_master.c  ****  *      PIOControllerReady      ->              TransactionStarted
 325:spi_master.c  ****  *              [label = "AssertSSEL"];
 326:spi_master.c  ****  *      PIOControllerReady      ->              Initialised
 327:spi_master.c  ****  *              [label = "Reset"];
 328:spi_master.c  ****  *      TransactionStarted      ->              PIOControllerReady
 329:spi_master.c  ****  *              [label = "DeassertSSEL"];
 330:spi_master.c  ****  *      TransactionStarted      ->              WaitingForPioController
 331:spi_master.c  ****  *              [label = "PIOControllerUnblockedWithDataToSend"];
 332:spi_master.c  ****  *      TransactionStarted      ->              Initialised
 333:spi_master.c  ****  *              [label = "Reset"];
 334:spi_master.c  ****  *      WaitingForPioController ->              WaitingForPioControllerToDeassert
 335:spi_master.c  ****  *              [label = "DeassertSSEL"];
 336:spi_master.c  ****  *      WaitingForPioController ->              PioControllerOnHold
 337:spi_master.c  ****  *              [label = "PIOControllerEvent"];
 338:spi_master.c  ****  *      WaitingForPioController ->              Initialised
 339:spi_master.c  ****  *              [label = "Reset"];
 340:spi_master.c  ****  *      PioControllerOnHold     ->              PIOControllerReady
 341:spi_master.c  ****  *              [label = "DeassertSSEL"];
 342:spi_master.c  ****  *      PioControllerOnHold     ->              WaitingForPioController
 343:spi_master.c  ****  *              [label = "PIOControllerUnblockedWithDataToSend"];
 344:spi_master.c  ****  *      PioControllerOnHold     ->              TransactionStarted
 345:spi_master.c  ****  *              [label = "PIOControllerUnblockedButNoData"];
 346:spi_master.c  ****  *      PioControllerOnHold     ->              Initialised
 347:spi_master.c  ****  *              [label = "Reset"];
 348:spi_master.c  ****  *      WaitingForPioControllerToDeassert
 349:spi_master.c  ****  *                              ->              PIOControllerReady
 350:spi_master.c  ****  *              [label = "PIOControllerEvent"];
 351:spi_master.c  ****  *      WaitingForPioControllerToDeassert
 352:spi_master.c  ****  *                              ->              Initialised
 353:spi_master.c  ****  *              [label = "Reset"];
 354:spi_master.c  ****  *      }
 355:spi_master.c  ****  * @enddot
 356:spi_master.c  ****  */
 357:spi_master.c  **** 
 358:spi_master.c  **** /*----------------------------------------------------------------------------*
 359:spi_master.c  ****  *  NAME
 360:spi_master.c  ****  *      processEvent
 361:spi_master.c  ****  *
 362:spi_master.c  ****  *  DESCRIPTION
 363:spi_master.c  ****  *      Process a transaction event according to the current state
 364:spi_master.c  ****  *
 365:spi_master.c  ****  *  PARAMETERS
 366:spi_master.c  ****  *      event [in]              Transaction event to process
 367:spi_master.c  ****  *
 368:spi_master.c  ****  *  RETURNS
 369:spi_master.c  ****  *      Invalid state if event cannot be processed in the current state,
 370:spi_master.c  ****  *      a valid state if the event is allowed
 371:spi_master.c  ****  *----------------------------------------------------------------------------*/
 372:spi_master.c  **** static TransactionState processEvent(TransactionEvent event)
 373:spi_master.c  **** {
  19                 	0:
  20                 		enter	#0x0001
  21 0000 01 0B       	.LCFI0:
  22                 		.loc 1 378 0
 374:spi_master.c  ****     /* Post-processing state */
 375:spi_master.c  ****     TransactionState ret_val = TransactionState_Invalid;
 376:spi_master.c  **** 
 377:spi_master.c  ****     switch (state.state)
  23                 	X,@state
  24 0001 00 00 00 19 		cmp	X,#0x0006
  25 0003 06 88       		bcc	.L2
  26 0004 00 00 00 00 		ld	X,@(.L9+0,X)
  26      00 F8 
  27 0007 00 00 00 1A 		brxl
  28 0009 FE 09       		.section	.rodata.processEvent,"a",@progbits
  29                 		.p2align	0
  30                 	.L9:
  31                 		.word	.L3-.JTBASE9
  32 0000 00 00       		.word	.L4-.JTBASE9
  33 0001 00 00       		.word	.L5-.JTBASE9
  34 0002 00 00       		.word	.L6-.JTBASE9
  35 0003 00 00       		.word	.L7-.JTBASE9
  36 0004 00 00       		.word	.L8-.JTBASE9
  37 0005 00 00       		.section	.text.processEvent
  38                 	.JTBASE9:
  39                 	.L3:
  40                 		.loc 1 382 0
 378:spi_master.c  ****     {
 379:spi_master.c  ****         case TransactionState_Initialised:
 380:spi_master.c  ****             /* SPI master has been initialised, but not ready yet */
 381:spi_master.c  ****             if (event == TransactionEvent_PIOControllerStart)
  41                 		.L10
  42 000a 00 00 00 99 		bra	.L2
  43 000c 00 00 00 00 	.L4:
  43      00 F4 
  44 000f 00 00 00 00 		.loc 1 391 0
  44      00 E0 
  45                 		cmp	AL,#0x0001
 382:spi_master.c  ****                 /* If PIO Controller has been started */
 383:spi_master.c  ****             {
 384:spi_master.c  ****                 /* Since PIO controller has started, SPI Master is ready */
 385:spi_master.c  ****                 ret_val = TransactionState_PIOControllerReady;
 386:spi_master.c  ****             }
 387:spi_master.c  ****             break;
 388:spi_master.c  ****         case TransactionState_PIOControllerReady:
 389:spi_master.c  ****             /* SPI master is currently idle and SSEL is currently de-asserted */
 390:spi_master.c  ****             if (event == TransactionEvent_AssertSSEL)
  46                 	.L18
  47 0012 01 84       		bra	.L11
  48 0013 00 00 00 00 	.L5:
  48      00 F0 
  49 0016 00 00 00 00 		.loc 1 407 0
  49      00 E0 
  50                 		cmp	AL,#0x0002
 391:spi_master.c  ****                 /* SSEL is being asserted */
 392:spi_master.c  ****             {
 393:spi_master.c  ****                 /* SSEL can be asserted */
 394:spi_master.c  ****                 ret_val = TransactionState_TransactionStarted;
 395:spi_master.c  ****             }
 396:spi_master.c  ****             else if (event == TransactionEvent_Reset)
 397:spi_master.c  ****                 /* PIO controller is to be reset */
 398:spi_master.c  ****             {
 399:spi_master.c  ****                 /* Go back to initialised state */
 400:spi_master.c  ****                 ret_val = TransactionState_Initialised;
 401:spi_master.c  ****             }
 402:spi_master.c  ****             break;
 403:spi_master.c  ****         case TransactionState_TransactionStarted:
 404:spi_master.c  ****             /* SPI master has asserted the SSEL but no data transfer is
 405:spi_master.c  ****              * currently in progress */
 406:spi_master.c  ****             if (event == TransactionEvent_DeassertSSEL)
  51                 	.L10
  52 0019 02 84       		.loc 1 412 0
  53 001a 00 00 00 00 		cmp	AL,#0x0003
  53      00 F4 
 407:spi_master.c  ****                 /* SSEL is being de-asserted */
 408:spi_master.c  ****             {
 409:spi_master.c  ****                 ret_val = TransactionState_PIOControllerReady;
 410:spi_master.c  ****             }
 411:spi_master.c  ****             else if (event ==
  54                 	e	.L18
  55 001d 03 84       		bra	.L13
  56 001e 00 00 00 00 	.L6:
  56      00 F0 
  57 0021 00 00 00 00 		.loc 1 430 0
  57      00 E0 
  58                 		cmp	AL,#0x0002
 412:spi_master.c  ****                           TransactionEvent_PIOControllerUnblockedWithDataToSend)
 413:spi_master.c  ****                 /* If more data has been transferred to PIO controller and it is
 414:spi_master.c  ****                  * unblocked */
 415:spi_master.c  ****             {
 416:spi_master.c  ****                 /* More data can be transferred to PIO controller */
 417:spi_master.c  ****                 ret_val = TransactionState_WaitingForPioController;
 418:spi_master.c  ****             }
 419:spi_master.c  ****             else if (event == TransactionEvent_Reset)
 420:spi_master.c  ****                 /* PIO controller is to be reset */
 421:spi_master.c  ****             {
 422:spi_master.c  ****                 /* Go back to initialised state */
 423:spi_master.c  ****                 ret_val = TransactionState_Initialised;
 424:spi_master.c  ****             }
 425:spi_master.c  ****             break;
 426:spi_master.c  ****         case TransactionState_PioControllerOnHold:
 427:spi_master.c  ****             /* If a transfer has just been completed PIO controller is currently
 428:spi_master.c  ****              * in hold */
 429:spi_master.c  ****             if (event == TransactionEvent_DeassertSSEL)
  59                 	.L10
  60 0024 02 84       		.loc 1 435 0
  61 0025 00 00 00 00 		cmp	AL,#0x0003
  61      00 F4 
 430:spi_master.c  ****                 /* SSEL is being de-asserted */
 431:spi_master.c  ****             {
 432:spi_master.c  ****                 ret_val = TransactionState_PIOControllerReady;
 433:spi_master.c  ****             }
 434:spi_master.c  ****             else if (event ==
  62                 	q	.L13
  63 0028 03 84       		.loc 1 443 0
  64 0029 00 00 00 00 		cmp	AL,#0x0004
  64      00 F4 
 435:spi_master.c  ****                           TransactionEvent_PIOControllerUnblockedWithDataToSend)
 436:spi_master.c  ****                 /* If more data has been transferred to PIO controller and it is
 437:spi_master.c  ****                  * unblocked */
 438:spi_master.c  ****             {
 439:spi_master.c  ****                 /* More data can be transferred to PIO controller */
 440:spi_master.c  ****                 ret_val = TransactionState_WaitingForPioController;
 441:spi_master.c  ****             }
 442:spi_master.c  ****             else if (event == TransactionEvent_PIOControllerUnblockedButNoData)
  65                 	e	.L18
  66 002c 04 84       		bra	.L11
  67 002d 00 00 00 00 	.L7:
  67      00 F0 
  68 0030 00 00 00 00 		.loc 1 459 0
  68      00 E0 
  69                 		cmp	AL,#0x0002
 443:spi_master.c  ****                 /* If no data has been transferred to PIO controller and it is
 444:spi_master.c  ****                  * unblocked */
 445:spi_master.c  ****             {
 446:spi_master.c  ****                 /* We have nothing to wait on PIO controller */
 447:spi_master.c  ****                 ret_val = TransactionState_TransactionStarted;
 448:spi_master.c  ****             }
 449:spi_master.c  ****             else if (event == TransactionEvent_Reset)
 450:spi_master.c  ****                 /* PIO controller is to be reset */
 451:spi_master.c  ****             {
 452:spi_master.c  ****                 /* Go back to initialised state */
 453:spi_master.c  ****                 ret_val = TransactionState_Initialised;
 454:spi_master.c  ****             }
 455:spi_master.c  ****             break;
 456:spi_master.c  ****         case TransactionState_WaitingForPioController:
 457:spi_master.c  ****             /* If PIO controller is currently doing a transfer */
 458:spi_master.c  ****             if (event == TransactionEvent_DeassertSSEL)
  70                 	.L14
  71 0033 02 84       		ld	AL,#0x0005
  72 0034 00 00 00 00 	.LVL1:
  72      00 F0 
  73 0037 05 14       		bra	.L15
  74                 	.LVL2:
  75 0038 00 00 00 00 	.L14:
  75      00 E0 
  76                 		.loc 1 465 0
  77                 		cmp	AL,#0x0005
 459:spi_master.c  ****                 /* SSEL is being de-asserted */
 460:spi_master.c  ****             {
 461:spi_master.c  ****                 /* SSEL de-assertion has to be postponed */
 462:spi_master.c  ****                 ret_val = TransactionState_WaitingForPioControllerToDeassert;
 463:spi_master.c  ****             }
 464:spi_master.c  ****             else if (event == TransactionEvent_PIOControllerEvent)
  78                 	8
  79 003b 05 84       		ld	AL,#0x0003
  80 003c 00 00 00 00 	.LVL3:
  80      00 F0 
  81 003f 03 14       		bra	.L15
  82                 	.LVL4:
  83 0040 00 00 00 00 	.L8:
  83      00 E0 
  84                 		.loc 1 482 0
  85                 		cmp	AL,#0x0005
 465:spi_master.c  ****                 /* PIO Controller has finished a data transfer and is currently
 466:spi_master.c  ****                  * blocked */
 467:spi_master.c  ****             {
 468:spi_master.c  ****                 /* PIO controller is on hold */
 469:spi_master.c  ****                 ret_val = TransactionState_PioControllerOnHold;
 470:spi_master.c  ****             }
 471:spi_master.c  ****             else if (event == TransactionEvent_Reset)
 472:spi_master.c  ****                 /* PIO controller is to be reset */
 473:spi_master.c  ****             {
 474:spi_master.c  ****                 /* Go back to initialised state */
 475:spi_master.c  ****                 ret_val = TransactionState_Initialised;
 476:spi_master.c  ****             }
 477:spi_master.c  ****             break;
 478:spi_master.c  ****         case TransactionState_WaitingForPioControllerToDeassert:
 479:spi_master.c  ****             /* If waiting for PIO controller to finish a data transfer to
 480:spi_master.c  ****              * de-assert the SSEL */
 481:spi_master.c  ****             if (event == TransactionEvent_PIOControllerEvent)
  86                 	0
  87 0043 05 84       	.L18:
  88 0044 00 00 00 00 		.loc 1 487 0
  88      00 F4 
  89                 		cmp	AL,#0x0006
 482:spi_master.c  ****             {
 483:spi_master.c  ****                 /* SSEL can be de-asserted */
 484:spi_master.c  ****                 ret_val = TransactionState_PIOControllerReady;
 485:spi_master.c  ****             }
 486:spi_master.c  ****             else if (event == TransactionEvent_Reset)
  90                 		.L12
  91 0047 06 84       	.L2:
  92 0048 00 00 00 00 		ld	AL,#0x0006
  92      00 F4 
  93                 	.LVL5:
  94 004b 06 14       		bra	.L15
  95                 	.LVL6:
  96 004c 00 00 00 00 	.L10:
  96      00 E0 
  97                 		ld	AL,#0x0001
  98                 	.LVL7:
  99 004f 01 14       		bra	.L15
 100                 	.LVL8:
 101 0050 00 00 00 00 	.L13:
 101      00 E0 
 102                 		ld	AL,#0x0004
 103                 	.LVL9:
 104 0053 04 14       		bra	.L15
 105                 	.LVL10:
 106 0054 00 00 00 00 	.L12:
 106      00 E0 
 107                 		ld	AL,#0x0000
 108                 	.LVL11:
 109 0057 00 14       		bra	.L15
 110                 	.LVL12:
 111 0058 00 00 00 00 	.L11:
 111      00 E0 
 112                 		ld	AL,#0x0002
 113                 	.LVL13:
 114 005b 02 14       	.L15:
 115                 	.LVL14:
 116                 		.loc 1 502 0
 117                 		leave	#0x0001
 487:spi_master.c  ****                 /* PIO controller is to be reset */
 488:spi_master.c  ****             {
 489:spi_master.c  ****                 /* Go back to initialised state */
 490:spi_master.c  ****                 ret_val = TransactionState_Initialised;
 491:spi_master.c  ****             }
 492:spi_master.c  ****             break;
 493:spi_master.c  ****         case TransactionState_Invalid:
 494:spi_master.c  ****             /* Nothing to do here */
 495:spi_master.c  ****             break;
 496:spi_master.c  ****         /* NOTE default case deliberately left out so as to catch any states
 497:spi_master.c  ****          * left un-handled */
 498:spi_master.c  ****     }
 499:spi_master.c  ****     
 500:spi_master.c  ****     return ret_val;
 501:spi_master.c  **** } /* processEvent */
 118                 	.-processEvent
 119 005c 01 0F       		.equ	__size_of_processEvent,. - processEvent
 120                 		.section	.text.SpiMasterGetSharedRAMRxDataSize,"ax",@progbits
 121                 		.global	SpiMasterGetSharedRAMRxDataSize
 122                 		.type	SpiMasterGetSharedRAMRxDataSize, @function
 123                 	SpiMasterGetSharedRAMRxDataSize:
 124                 	.LFB10:
 125                 		.loc 1 856 0
 126                 		.loc 1 857 0
 127                 		ld	AL,#state+3
 502:spi_master.c  **** 
 503:spi_master.c  **** /*============================================================================*
 504:spi_master.c  ****  *  Public Function Implementations
 505:spi_master.c  ****  *============================================================================*/
 506:spi_master.c  **** 
 507:spi_master.c  **** /*----------------------------------------------------------------------------*
 508:spi_master.c  ****  *  NAME
 509:spi_master.c  ****  *      SpiMasterInit
 510:spi_master.c  ****  *
 511:spi_master.c  ****  *  DESCRIPTION
 512:spi_master.c  ****  *      Configure the SPI master. Once the SPI master implementation on
 513:spi_master.c  ****  *      the PIO controller is configured, it needs to be explicitly
 514:spi_master.c  ****  *      started by calling #SpiMasterStart.
 515:spi_master.c  ****  *
 516:spi_master.c  ****  *      The default PIO controller code is available via the symbols
 517:spi_master.c  ****  *      defined in #spi_cfg.h. However, if application wants to use its
 518:spi_master.c  ****  *      own PIO controller code then it should specify the appropriate
 519:spi_master.c  ****  *      symbol name, e.g. if the PIO controller assembly is added to the
 520:spi_master.c  ****  *      project in a file named xyz.asm, a symbol xyz would have been
 521:spi_master.c  ****  *      defined, which points to the address of the PIO controller code.
 522:spi_master.c  ****  *      This symbol should be passed in while initialising the SPI master
 523:spi_master.c  ****  *      driver. Note that a custom implementation of the PIO controller
 524:spi_master.c  ****  *      code, must maintain the interface between the XAP processor and
 525:spi_master.c  ****  *      the PIO Controller.
 526:spi_master.c  ****  *
 527:spi_master.c  ****  *      In order for the PIO Controller to run with fastest clock (to be
 528:spi_master.c  ****  *      able to support maximum SPI bus speed), it may be necessary to
 529:spi_master.c  ****  *      ensure that the XAP processor doesn't go to sleep, prior to calling
 530:spi_master.c  ****  *      this function.
 531:spi_master.c  ****  *
 532:spi_master.c  ****  *      This function can be called multiple times and each time it
 533:spi_master.c  ****  *      reinitialises the PIO Controller and starts afresh. However,
 534:spi_master.c  ****  *      calling it while a transfer is in progress might lead to data
 535:spi_master.c  ****  *      corruption. In order to simply reset the PIO controller use
 536:spi_master.c  ****  *      #SpiMasterReset instead.
 537:spi_master.c  ****  *
 538:spi_master.c  ****  *      NOTE: See the note regarding the maintenance of rx_data_buffer
 539:spi_master.c  ****  *      under #SpiMasterTransactionCallbackType
 540:spi_master.c  ****  *
 541:spi_master.c  ****  *  PARAMETERS
 542:spi_master.c  ****  *      p_pio_controller_code_addr [in]
 543:spi_master.c  ****  *                              Memory address containing SPI Master code to be
 544:spi_master.c  ****  *                              loaded into the PIO Controller
 545:spi_master.c  ****  *      p_data_callback [in]    Pointer to a function to be called upon data
 546:spi_master.c  ****  *                              being transferred to/received from the PIO
 547:spi_master.c  ****  *                              controller.
 548:spi_master.c  ****  *      tx_data_buffer [in]     Handle to a buffer to be used by the SPI Master
 549:spi_master.c  ****  *                              to read the tx data from, in order to be able to
 550:spi_master.c  ****  *                              transfer to PIO controller for onward
 551:spi_master.c  ****  *                              transmission to SPI Slave. It can contain data
 552:spi_master.c  ****  *                              to be transferred, which would then be
 553:spi_master.c  ****  *                              transferred to shared RAM upon starting the PIO
 554:spi_master.c  ****  *                              controller ready to be sent out when
 555:spi_master.c  ****  *                              transactions are started.
 556:spi_master.c  ****  *      rx_data_buffer [in]     Handle to a buffer to be used by the SPI Master
 557:spi_master.c  ****  *                              to queue any data received from the PIO
 558:spi_master.c  ****  *                              controller over SPI.
 559:spi_master.c  ****  *      tx_buffer_fill [in]     If buffer filling feature is compiled into the
 560:spi_master.c  ****  *                              octet_queue, the empty areas of the buffer
 561:spi_master.c  ****  *                              containing the outgoing data in the shared RAM
 562:spi_master.c  ****  *                              will be filled with this octet. Useful for
 563:spi_master.c  ****  *                              debugging the transfers.
 564:spi_master.c  ****  *      inter_octet_delay [in]  Set this to a count that will affect the inter-
 565:spi_master.c  ****  *                              octet delay. Setting it to 0 will cause no
 566:spi_master.c  ****  *                              additional delay. Each increment by 1 will
 567:spi_master.c  ****  *                              introduce 2 clock cycles (at 16MHz this is
 568:spi_master.c  ****  *                              0.125us). This is in addition to the existing
 569:spi_master.c  ****  *                              minimum inter-octet delay, see assembly source
 570:spi_master.c  ****  *                              for exact value of the minimum delay.
 571:spi_master.c  ****  *
 572:spi_master.c  ****  *  RETURNS
 573:spi_master.c  ****  *      TRUE if success, FALSE if failed.
 574:spi_master.c  ****  *----------------------------------------------------------------------------*/
 575:spi_master.c  **** bool SpiMasterInit(uint16                           *p_pio_controller_code_addr,
 576:spi_master.c  ****                    SpiMasterTransactionCallbackType  p_data_callback,
 577:spi_master.c  ****                    OQ_HANDLE                         p_tx_data_buffer,
 578:spi_master.c  ****                    OQ_HANDLE                         p_rx_data_buffer,
 579:spi_master.c  ****                    uint8                             tx_buffer_fill,
 580:spi_master.c  ****                    uint8                             inter_octet_delay)
 581:spi_master.c  **** {
 582:spi_master.c  ****     /* Check if valid tx and rx queue handles have been supplied */
 583:spi_master.c  ****     bool ret_val = (p_tx_data_buffer != NULL) &&
 584:spi_master.c  ****                    (p_rx_data_buffer != NULL) &&
 585:spi_master.c  ****                    (p_pio_controller_code_addr != NULL);
 586:spi_master.c  **** 
 587:spi_master.c  ****     if (ret_val)
 588:spi_master.c  ****     {
 589:spi_master.c  ****         /* Stop the PIO controller, in case it was already running */
 590:spi_master.c  ****         PioCtrlrStop();
 591:spi_master.c  **** 
 592:spi_master.c  ****         /* Set up the application buffers */
 593:spi_master.c  ****         state.p_tx_data = p_tx_data_buffer;
 594:spi_master.c  ****         state.p_rx_data = p_rx_data_buffer;
 595:spi_master.c  **** 
 596:spi_master.c  ****         /* Setup the data callback function */
 597:spi_master.c  ****         state.p_data_cb_func = p_data_callback;
 598:spi_master.c  ****         
 599:spi_master.c  ****         /* Configure the SSEL to be controlled independently */
 600:spi_master.c  ****         PioSetMode(SPI_MASTER_PIO_SSEL, pio_mode_user);
 601:spi_master.c  ****         
 602:spi_master.c  ****         /* Configure button to be input */
 603:spi_master.c  ****         PioSetDir(SPI_MASTER_PIO_SSEL, PIO_DIR_OUTPUT);
 604:spi_master.c  ****         
 605:spi_master.c  ****         /* De-assert the SPI Slave select */
 606:spi_master.c  ****         setSSEL(FALSE);
 607:spi_master.c  ****         
 608:spi_master.c  ****         /* Give the PIO controller access to the SPI Slave PIOs */
 609:spi_master.c  ****         PioSetModes(PIO_BIT_MASK(SPI_MASTER_PIO_SCLK) |
 610:spi_master.c  ****                     PIO_BIT_MASK(SPI_MASTER_PIO_MOSI) |
 611:spi_master.c  ****                     PIO_BIT_MASK(SPI_MASTER_PIO_MISO),
 612:spi_master.c  ****                     pio_mode_pio_controller);
 613:spi_master.c  ****         
 614:spi_master.c  ****         /* Set the PIO Controller clock to fastest available, so that it can run
 615:spi_master.c  ****          * off 16MHz clock when not sleeping */
 616:spi_master.c  ****         PioCtrlrClock(TRUE);
 617:spi_master.c  ****         
 618:spi_master.c  ****         /* Now download code onto PIO controller */
 619:spi_master.c  ****         PioCtrlrInit(p_pio_controller_code_addr);
 620:spi_master.c  ****         
 621:spi_master.c  ****         /* Setup the PIO controller shared RAM buffer */
 622:spi_master.c  ****         ret_val = setupSharedRAM(tx_buffer_fill);
 623:spi_master.c  ****         
 624:spi_master.c  ****         /* Setup the interrupt threshold */
 625:spi_master.c  ****         SET_SPI_TRANSFER_SIZE_REG(0U);
 626:spi_master.c  ****         
 627:spi_master.c  ****         /* Setup the inter-octet delay */
 628:spi_master.c  ****         SET_INTER_BYTE_DELAY(inter_octet_delay + 1U);
 629:spi_master.c  ****         
 630:spi_master.c  ****         /* Initialise the SPI Master state - no transaction is in progress */
 631:spi_master.c  ****         state.state = TransactionState_Initialised;
 632:spi_master.c  ****     }
 633:spi_master.c  ****     
 634:spi_master.c  ****     return ret_val;
 635:spi_master.c  **** } /* SpiMasterInit */
 636:spi_master.c  **** 
 637:spi_master.c  **** /*----------------------------------------------------------------------------*
 638:spi_master.c  ****  *  NAME
 639:spi_master.c  ****  *      SpiMasterStart
 640:spi_master.c  ****  *
 641:spi_master.c  ****  *  DESCRIPTION
 642:spi_master.c  ****  *      Start the SPI Master. It must have been successfully configured
 643:spi_master.c  ****  *      first by calling #SpiMasterInit.
 644:spi_master.c  ****  *
 645:spi_master.c  ****  *  PARAMETERS
 646:spi_master.c  ****  *      None
 647:spi_master.c  ****  *
 648:spi_master.c  ****  *  RETURNS
 649:spi_master.c  ****  *      Nothing
 650:spi_master.c  ****  *----------------------------------------------------------------------------*/
 651:spi_master.c  **** void SpiMasterStart(void)
 652:spi_master.c  **** {
 653:spi_master.c  ****     /* Check if the SPI master has already been configured */
 654:spi_master.c  ****     const TransactionState newState =
 655:spi_master.c  ****                               processEvent(TransactionEvent_PIOControllerStart);
 656:spi_master.c  ****     
 657:spi_master.c  ****     if (newState == TransactionState_PIOControllerReady)
 658:spi_master.c  ****     {
 659:spi_master.c  ****         PioCtrlrStart();
 660:spi_master.c  ****         state.state = newState;
 661:spi_master.c  ****     }
 662:spi_master.c  **** } /* SpiMasterStart */
 663:spi_master.c  **** 
 664:spi_master.c  **** /*----------------------------------------------------------------------------*
 665:spi_master.c  ****  *  NAME
 666:spi_master.c  ****  *      SpiMasterStartTransaction
 667:spi_master.c  ****  *
 668:spi_master.c  ****  *  DESCRIPTION
 669:spi_master.c  ****  *      Transfer data from the Tx queue and issue the data transfer call-back
 670:spi_master.c  ****  *      when all of the data within the Tx queue has been transferred over to
 671:spi_master.c  ****  *      the remote SPI slave. If SSEL is currently asserted calling this
 672:spi_master.c  ****  *      function would simply continue sending more data without
 673:spi_master.c  ****  *      de-asserting/re-asserting the SSEL line, allowing the application to
 674:spi_master.c  ****  *      continue an existing transaction.
 675:spi_master.c  ****  *
 676:spi_master.c  ****  *  PARAMETERS
 677:spi_master.c  ****  *      None
 678:spi_master.c  ****  *
 679:spi_master.c  ****  *  RETURNS
 680:spi_master.c  ****  *      TRUE if a new transaction is started or a transfer is already in
 681:spi_master.c  ****  *          progress.
 682:spi_master.c  ****  *      FALSE if no new transaction can be started at this time
 683:spi_master.c  ****  *          (most probably because current transaction is scheduled to be
 684:spi_master.c  ****  *          ended)
 685:spi_master.c  ****  *----------------------------------------------------------------------------*/
 686:spi_master.c  **** bool SpiMasterStartTransaction(void)
 687:spi_master.c  **** {
 688:spi_master.c  ****     bool ret_val = FALSE;
 689:spi_master.c  ****     
 690:spi_master.c  ****     TransactionState newState = processEvent(TransactionEvent_AssertSSEL);
 691:spi_master.c  ****     
 692:spi_master.c  ****     if (newState == TransactionState_TransactionStarted)
 693:spi_master.c  ****         /* If SSEL assertion is permitted */
 694:spi_master.c  ****     {
 695:spi_master.c  ****         /* Setup the state such that we will assert the SPI Slave select
 696:spi_master.c  ****          * just before starting a transfer */
 697:spi_master.c  ****         state.state = newState;
 698:spi_master.c  ****     }
 699:spi_master.c  **** 
 700:spi_master.c  ****     newState =
 701:spi_master.c  ****             processEvent(TransactionEvent_PIOControllerUnblockedWithDataToSend);
 702:spi_master.c  **** 
 703:spi_master.c  ****     if (newState == TransactionState_WaitingForPioController)
 704:spi_master.c  ****         /* If data transfer to PIO Controller shared RAM is permitted */
 705:spi_master.c  ****     {
 706:spi_master.c  ****         /* Transfer as much tx data over to PIO controller as possible */
 707:spi_master.c  ****         const uint16 transfer_size = OQTransferData(state.p_tx_data,
 708:spi_master.c  ****                                                      &(state.pio_tx_data),
 709:spi_master.c  ****                                                      OQSize(state.p_tx_data));
 710:spi_master.c  ****         
 711:spi_master.c  ****         /* Set the transfer size */
 712:spi_master.c  ****         SET_SPI_TRANSFER_SIZE_REG(transfer_size);
 713:spi_master.c  **** 
 714:spi_master.c  ****         if (state.state == TransactionState_TransactionStarted)
 715:spi_master.c  ****             /* If SSEL is yet to be asserted */
 716:spi_master.c  ****         {
 717:spi_master.c  ****             /* Assert the SPI Slave select */
 718:spi_master.c  ****             setSSEL(TRUE);
 719:spi_master.c  ****         }
 720:spi_master.c  ****         
 721:spi_master.c  ****         /* Issue interrupt to PIO controller to start the transfer */
 722:spi_master.c  ****         PioCtrlrInterrupt();
 723:spi_master.c  ****         
 724:spi_master.c  ****         /* Transaction is in progress */
 725:spi_master.c  ****         state.state = newState;
 726:spi_master.c  ****         ret_val = TRUE;
 727:spi_master.c  ****     }
 728:spi_master.c  ****     else if (state.state == TransactionState_WaitingForPioController)
 729:spi_master.c  ****         /* If a transfer is already in progress */
 730:spi_master.c  ****     {
 731:spi_master.c  ****         /* The data from tx data buffer will be transferred over to shared
 732:spi_master.c  ****          * RAM when the current transfer is completed */
 733:spi_master.c  ****         ret_val = TRUE;
 734:spi_master.c  ****     }
 735:spi_master.c  ****     
 736:spi_master.c  ****     return ret_val;
 737:spi_master.c  **** } /* SpiMasterStartTransaction */
 738:spi_master.c  **** 
 739:spi_master.c  **** /*----------------------------------------------------------------------------*
 740:spi_master.c  ****  *  NAME
 741:spi_master.c  ****  *      SpiMasterEndTransaction
 742:spi_master.c  ****  *
 743:spi_master.c  ****  *  DESCRIPTION
 744:spi_master.c  ****  *      End an existing transaction by de-asserting the SSEL. If SSEL line
 745:spi_master.c  ****  *      is currently not asserted, calling this function will have no
 746:spi_master.c  ****  *      effect. If SSEL could not be asserted at this time usually because
 747:spi_master.c  ****  *      PIO controller is currently carrying out a data transfer this
 748:spi_master.c  ****  *      function schedules it such that SSEL gets de-asserted after the
 749:spi_master.c  ****  *      transfer is complete. Once SSEL is de-asserted the data transfer
 750:spi_master.c  ****  *      call-back will be issued. If this function is called while there
 751:spi_master.c  ****  *      is data existing in the Tx queue that has not yet been transferred
 752:spi_master.c  ****  *      over to the Tx data area, then that data will not be transferred
 753:spi_master.c  ****  *      over. As soon as the PIO controller finishes transferring
 754:spi_master.c  ****  *      existing data in the Tx data area, SPI master driver de-asserts
 755:spi_master.c  ****  *      the SSEL. Application should however be able to start a new
 756:spi_master.c  ****  *      transaction which will send the pending data existing in the
 757:spi_master.c  ****  *      Tx queue.
 758:spi_master.c  ****  *
 759:spi_master.c  ****  *      NOTE1: If FALSE is returned, a data transfer callback will be issued
 760:spi_master.c  ****  *      after the transfer is completed and SSEL has been de-asserted
 761:spi_master.c  ****  *
 762:spi_master.c  ****  *      NOTE2: Any data currently in the tx data buffer, pending to be
 763:spi_master.c  ****  *      delivered will not be transferred until the next transaction is
 764:spi_master.c  ****  *      started
 765:spi_master.c  ****  *
 766:spi_master.c  ****  *      NOTE3: If SSEL is to be de-asserted when the current data transfer
 767:spi_master.c  ****  *      has been completed, no new transfers can be started until the
 768:spi_master.c  ****  *      de-assertion happens
 769:spi_master.c  ****  *
 770:spi_master.c  ****  *  PARAMETERS
 771:spi_master.c  ****  *      None
 772:spi_master.c  ****  *
 773:spi_master.c  ****  *  RETURNS
 774:spi_master.c  ****  *      TRUE If SSEL has been de-asserted and transaction has ended,
 775:spi_master.c  ****  *      FALSE if a transaction is currently in progress and SSEL will be
 776:spi_master.c  ****  *          asserted when the data transfer has been completed.
 777:spi_master.c  ****  *----------------------------------------------------------------------------*/
 778:spi_master.c  **** bool SpiMasterEndTransaction(void)
 779:spi_master.c  **** {
 780:spi_master.c  ****     bool ret_val = FALSE;
 781:spi_master.c  ****     const TransactionState newState =
 782:spi_master.c  ****                                     processEvent(TransactionEvent_DeassertSSEL);
 783:spi_master.c  ****     
 784:spi_master.c  ****     if (newState == TransactionState_PIOControllerReady)
 785:spi_master.c  ****         /* If ending the transaction is permitted */
 786:spi_master.c  ****     {
 787:spi_master.c  ****         /* De-assert the SPI Slave select */
 788:spi_master.c  ****         setSSEL(FALSE);
 789:spi_master.c  ****         
 790:spi_master.c  ****         /* No transaction is in progress */
 791:spi_master.c  ****         state.state = newState;
 792:spi_master.c  ****         
 793:spi_master.c  ****         /* SSEL has been de-asserted */
 794:spi_master.c  ****         ret_val = TRUE;
 795:spi_master.c  ****     }
 796:spi_master.c  ****     else if (newState == TransactionState_WaitingForPioControllerToDeassert)
 797:spi_master.c  ****         /* If SSEL de-assertion is to be scheduled since a transfer is
 798:spi_master.c  ****          * currently in progress */
 799:spi_master.c  ****     {
 800:spi_master.c  ****         /* Schedule the SSEL to be de-asserted when PIO controller has finished
 801:spi_master.c  ****          * the transaction */
 802:spi_master.c  ****         state.state = newState;
 803:spi_master.c  ****     }
 804:spi_master.c  ****     else if (state.state == TransactionState_PIOControllerReady)
 805:spi_master.c  ****         /* If SSEL has already been de-asserted */
 806:spi_master.c  ****     {
 807:spi_master.c  ****         ret_val = TRUE;
 808:spi_master.c  ****     }
 809:spi_master.c  ****     
 810:spi_master.c  ****     return ret_val;
 811:spi_master.c  **** } /* SpiMasterEndTransaction */
 812:spi_master.c  **** 
 813:spi_master.c  **** /*----------------------------------------------------------------------------*
 814:spi_master.c  ****  *  NAME
 815:spi_master.c  ****  *      SpiMasterGetSharedRAMTxDataSize
 816:spi_master.c  ****  *
 817:spi_master.c  ****  *  DESCRIPTION
 818:spi_master.c  ****  *      Get the size of data in the Tx data area (see 2.1.2.2) within the
 819:spi_master.c  ****  *      application shared memory. This value may not reflect the true size
 820:spi_master.c  ****  *      of the outstanding data that has not yet been sent by the SPI master
 821:spi_master.c  ****  *      on the PIO controller. This value is only updated when an interrupt
 822:spi_master.c  ****  *      is received from the PIO controller.
 823:spi_master.c  ****  *
 824:spi_master.c  ****  *  PARAMETERS
 825:spi_master.c  ****  *      None
 826:spi_master.c  ****  *
 827:spi_master.c  ****  *  RETURNS
 828:spi_master.c  ****  *      Number of octets of data in the Tx data area within the application
 829:spi_master.c  ****  *      shared memory
 830:spi_master.c  ****  *----------------------------------------------------------------------------*/
 831:spi_master.c  **** uint16 SpiMasterGetSharedRAMTxDataSize(void)
 832:spi_master.c  **** {
 833:spi_master.c  ****     return OQSize(&(state.pio_tx_data));
 834:spi_master.c  **** } /* SpiMasterGetSharedRAMTxDataSize */
 835:spi_master.c  **** 
 836:spi_master.c  **** /*----------------------------------------------------------------------------*
 837:spi_master.c  ****  *  NAME
 838:spi_master.c  ****  *      SpiMasterGetSharedRAMRxDataSize
 839:spi_master.c  ****  *
 840:spi_master.c  ****  *  DESCRIPTION
 841:spi_master.c  ****  *      Get the size of data in the Rx data area within the application
 842:spi_master.c  ****  *      shared memory. This value may not reflect the true size of the
 843:spi_master.c  ****  *      outstanding data that has been received by the SPI master on
 844:spi_master.c  ****  *      the PIO controller. This value is only updated when an interrupt
 845:spi_master.c  ****  *      is received from the PIO controller.
 846:spi_master.c  ****  *
 847:spi_master.c  ****  *  PARAMETERS
 848:spi_master.c  ****  *      None
 849:spi_master.c  ****  *
 850:spi_master.c  ****  *  RETURNS
 851:spi_master.c  ****  *      Number of octets of data in the Rx data area within the application
 852:spi_master.c  ****  *      shared memory
 853:spi_master.c  ****  *----------------------------------------------------------------------------*/
 854:spi_master.c  **** uint16 SpiMasterGetSharedRAMRxDataSize(void)
 855:spi_master.c  **** {
 128                 	e
 856:spi_master.c  ****     return OQSize(&(state.pio_rx_data));
 129                 	LFE10:
 130 0000 00 00 00 14 		.size	SpiMasterGetSharedRAMRxDataSize, .-SpiMasterGetSharedRAMRxDataSize
 131 0002 00 00 00 00 		.global	__size_of_SpiMasterGetSharedRAMRxDataSize
 131      00 E0 
 132                 		.equ	__size_of_SpiMasterGetSharedRAMRxDataSize,. - SpiMasterGetSharedRAMRxDataSize
 133                 		.section	.text.SpiMasterGetSharedRAMTxDataSize,"ax",@progbits
 134                 		.global	SpiMasterGetSharedRAMTxDataSize
 135                 		.type	SpiMasterGetSharedRAMTxDataSize, @function
 136                 	SpiMasterGetSharedRAMTxDataSize:
 137                 	.LFB9:
 138                 		.loc 1 833 0
 139                 		.loc 1 834 0
 140                 		ld	AL,#state+9
 833:spi_master.c  **** {
 141                 	.LFE9:
 834:spi_master.c  ****     return OQSize(&(state.pio_tx_data));
 142                 	.size	SpiMasterGetSharedRAMTxDataSize, .-SpiMasterGetSharedRAMTxDataSize
 143 0000 00 00 00 14 		.global	__size_of_SpiMasterGetSharedRAMTxDataSize
 144 0002 00 00 00 00 		.equ	__size_of_SpiMasterGetSharedRAMTxDataSize,. - SpiMasterGetSharedRAMTxDataSize
 144      00 E0 
 145                 		.section	.text.setSSEL,"ax",@progbits
 146                 		.type	setSSEL, @function
 147                 	setSSEL:
 148                 	.LFB3:
 149                 		.loc 1 300 0
 150                 	.LVL15:
 151                 		.loc 1 309 0
 152                 		ld	AH,#0x0000
 300:spi_master.c  **** {
 153                 	0001
 154                 		beq	.L24
 309:spi_master.c  ****     PioSet(SPI_MASTER_PIO_SSEL, (SPI_MASTER_SSEL_ACTIVE_LOW != assert));
 155                 	d	AH,#0x0001
 156 0000 00 10       	.L24:
 157 0001 01 84       		ld	AL,#0x0006
 158 0002 00 00 00 00 	.LVL16:
 158      00 F4 
 159 0005 01 10       		bra	PioSet
 160                 	.LFE3:
 161 0006 06 14       		.size	setSSEL, .-setSSEL
 162                 		.equ	__size_of_setSSEL,. - setSSEL
 163 0007 00 00 00 00 		.section	.text.SpiMasterProcessPioControllerEvent,"ax",@progbits
 163      00 E0 
 164                 		.global	SpiMasterProcessPioControllerEvent
 165                 		.type	SpiMasterProcessPioControllerEvent, @function
 166                 	SpiMasterProcessPioControllerEvent:
 167                 	.LFB13:
 168                 		.loc 1 983 0
 169                 	.LVL17:
 170                 		enter	#0x0007
 171                 	.LCFI1:
 857:spi_master.c  **** } /* SpiMasterGetSharedRAMRxDataSize */
 858:spi_master.c  **** 
 859:spi_master.c  **** /*----------------------------------------------------------------------------*
 860:spi_master.c  ****  *  NAME
 861:spi_master.c  ****  *      SpiMasterReset
 862:spi_master.c  ****  *
 863:spi_master.c  ****  *  DESCRIPTION
 864:spi_master.c  ****  *      Restarts the PIO controller and clears the application shared memory
 865:spi_master.c  ****  *      including the Tx/Rx data areas. Data in the Tx and Rx queues will not
 866:spi_master.c  ****  *      be cleared. This is useful when the application needs to reset and
 867:spi_master.c  ****  *      start over. Subsequent Tx data will be queued from the start of the Tx
 868:spi_master.c  ****  *      data area within the application shared memory.
 869:spi_master.c  ****  *
 870:spi_master.c  ****  *      NOTE: If failed, PIO controller would be stopped. The failure is
 871:spi_master.c  ****  *      usually attributed to the configuration of the octet queue.
 872:spi_master.c  ****  *
 873:spi_master.c  ****  *  PARAMETERS
 874:spi_master.c  ****  *      tx_buffer_fill [in]     If buffer filling feature is compiled into the
 875:spi_master.c  ****  *                              octet_queue, the empty areas of the buffer
 876:spi_master.c  ****  *                              containing the outgoing data in the shared RAM
 877:spi_master.c  ****  *                              will be filled with this octet
 878:spi_master.c  ****  *
 879:spi_master.c  ****  *  RETURNS
 880:spi_master.c  ****  *      TRUE if success, FALSE otherwise
 881:spi_master.c  ****  *----------------------------------------------------------------------------*/
 882:spi_master.c  **** bool SpiMasterReset(uint8 tx_buffer_fill)
 883:spi_master.c  **** {
 884:spi_master.c  ****     bool ret_val = FALSE;
 885:spi_master.c  ****     const TransactionState newState = processEvent(TransactionEvent_Reset);
 886:spi_master.c  ****     
 887:spi_master.c  ****     if (newState == TransactionState_Initialised)
 888:spi_master.c  ****         /* If a reset can be done */
 889:spi_master.c  ****     {
 890:spi_master.c  ****         /* Stop the PIO controller */
 891:spi_master.c  ****         PioCtrlrStop();
 892:spi_master.c  ****         
 893:spi_master.c  ****         /* Setup the shared RAM buffers */
 894:spi_master.c  ****         if (setupSharedRAM(tx_buffer_fill))
 895:spi_master.c  ****         {
 896:spi_master.c  ****             /* Restart PIO Controller */
 897:spi_master.c  ****             PioCtrlrStart();
 898:spi_master.c  **** 
 899:spi_master.c  ****             /* De-assert slave select */
 900:spi_master.c  ****             setSSEL(FALSE);
 901:spi_master.c  **** 
 902:spi_master.c  ****             /* Reset the state */
 903:spi_master.c  ****             state.state = TransactionState_PIOControllerReady;
 904:spi_master.c  **** 
 905:spi_master.c  ****             /* return success */
 906:spi_master.c  ****             ret_val = TRUE;
 907:spi_master.c  ****         }
 908:spi_master.c  ****     }
 909:spi_master.c  ****     else if (state.state == TransactionState_Initialised)
 910:spi_master.c  ****         /* If already reset */
 911:spi_master.c  ****     {
 912:spi_master.c  ****         /* return success */
 913:spi_master.c  ****         ret_val = TRUE;
 914:spi_master.c  ****     }
 915:spi_master.c  ****     
 916:spi_master.c  ****     return ret_val;
 917:spi_master.c  **** } /* SpiMasterReset */
 918:spi_master.c  **** 
 919:spi_master.c  **** /*----------------------------------------------------------------------------*
 920:spi_master.c  ****  *  NAME
 921:spi_master.c  ****  *      SpiMasterDeinit
 922:spi_master.c  ****  *
 923:spi_master.c  ****  *  DESCRIPTION
 924:spi_master.c  ****  *      Stops the SPI master and frees the PIO Controller. The Tx and Rx queues
 925:spi_master.c  ****  *      allocated to the SPI master are now free for the application to use for
 926:spi_master.c  ****  *      any other purposes. In order to use the SPI master, it must be
 927:spi_master.c  ****  *      configured again by calling SpiMasterInit.
 928:spi_master.c  ****  *
 929:spi_master.c  ****  *      The data already existing in the Tx and Rx queues will not be
 930:spi_master.c  ****  *      affected.
 931:spi_master.c  ****  *
 932:spi_master.c  ****  *  PARAMETERS
 933:spi_master.c  ****  *      None
 934:spi_master.c  ****  *
 935:spi_master.c  ****  *  RETURNS
 936:spi_master.c  ****  *      Nothing
 937:spi_master.c  ****  *----------------------------------------------------------------------------*/
 938:spi_master.c  **** void SpiMasterDeinit(void)
 939:spi_master.c  **** {
 940:spi_master.c  ****     /* Stop the SPI Slave */
 941:spi_master.c  ****     PioCtrlrStop();
 942:spi_master.c  **** 
 943:spi_master.c  ****     /* Release the application buffers */
 944:spi_master.c  ****     state.p_tx_data = NULL;
 945:spi_master.c  ****     state.p_rx_data = NULL;
 946:spi_master.c  **** 
 947:spi_master.c  ****     /* Release the pio data buffer */
 948:spi_master.c  ****     OQDestroy(&(state.pio_tx_data));
 949:spi_master.c  ****     /* Release the pio data buffer */
 950:spi_master.c  ****     OQDestroy(&(state.pio_rx_data));
 951:spi_master.c  ****     /* Clear the data callback pointer */
 952:spi_master.c  ****     state.p_data_cb_func = NULL;
 953:spi_master.c  **** 
 954:spi_master.c  ****     /* De-assert slave select */
 955:spi_master.c  ****     setSSEL(FALSE);
 956:spi_master.c  **** 
 957:spi_master.c  ****     /* Reset the state */
 958:spi_master.c  ****     state.state = TransactionState_Invalid;
 959:spi_master.c  **** 
 960:spi_master.c  ****     /* We can't release the PIOs as we won't know what to set them to */
 961:spi_master.c  **** } /* SpiMasterDeinit */
 962:spi_master.c  **** 
 963:spi_master.c  **** /*----------------------------------------------------------------------------*
 964:spi_master.c  ****  *  NAME
 965:spi_master.c  ****  *      SpiMasterProcessPioControllerEvent
 966:spi_master.c  ****  *
 967:spi_master.c  ****  *  DESCRIPTION
 968:spi_master.c  ****  *      Processes an interrupt from the PIO controller. When the PIO controller
 969:spi_master.c  ****  *      issues an interrupt the system event "sys_event_pio_ctrlr" is received
 970:spi_master.c  ****  *      via the system event handler, AppProcessSystemEvent.
 971:spi_master.c  ****  *
 972:spi_master.c  ****  *      SpiMasterProcessPioControllerEvent must be called as soon as possible
 973:spi_master.c  ****  *      upon receiving the system event.
 974:spi_master.c  ****  *
 975:spi_master.c  ****  * PARAMETERS
 976:spi_master.c  ****  *      p_data [in]             Data associated with the PIO controller event
 977:spi_master.c  ****  *
 978:spi_master.c  ****  * RETURNS
 979:spi_master.c  ****  *      Nothing
 980:spi_master.c  ****  *----------------------------------------------------------------------------*/
 981:spi_master.c  **** void SpiMasterProcessPioControllerEvent(uint16 *p_data)
 982:spi_master.c  **** {
 172                 		AL,@0xe823
 173                 	.LVL18:
 174 0000 07 0B       		.loc 1 987 0
 175                 		and	AL,#0x00ff
 983:spi_master.c  ****     /* Check this is not a duplicate interrupt */
 984:spi_master.c  ****     const uint16 valid_interrupt = GET_SPI_INT_ACK;
 176                 		.L37
 177 0001 E8 00 23 15 	.LBB2:
 178                 		.loc 1 990 0
 985:spi_master.c  ****     
 986:spi_master.c  ****     if (valid_interrupt)
 179                 		AL,#0x0005
 180 0003 01 00 FF C4 		bsr	processEvent
 181 0005 00 00 00 00 		st	AL,@(0x0002,Y)
 181      00 F4 
 182                 	.LVL19:
 987:spi_master.c  ****     {
 988:spi_master.c  ****         TransactionState newState =
 989:spi_master.c  ****                               processEvent(TransactionEvent_PIOControllerEvent);
 183                 	c 1 992 0
 184 0008 05 14       		cmp	AL,#0x0006
 185 0009 00 00 00 00 		beq	.L28
 185      00 9C 
 186 000c 02 27       	.LBB3:
 187                 		.loc 1 996 0
 990:spi_master.c  ****         
 991:spi_master.c  ****         if (newState != TransactionState_Invalid)
 188                 	L,@0xe820
 189 000d 06 84       		and	AL,#0x00ff
 190 000e 00 00 00 00 		st	AL,@(0x0004,Y)
 190      00 F4 
 191                 	.LVL20:
 992:spi_master.c  ****             /* If PIO Controller event is expected */
 993:spi_master.c  ****         {
 994:spi_master.c  ****             /* Get the previous transfer size */
 995:spi_master.c  ****             uint16 transfer_size = GET_SPI_TRANSFER_SIZE_REG;
 192                 	c 1 1004 0
 193 0011 E8 00 20 15 		ld	AL,#state+3
 194 0013 01 00 FF C4 		ld	AH,@(0x0004,Y)
 195 0015 04 27       		bsr	OQIncrementSize
 196                 		.loc 1 1008 0
 996:spi_master.c  ****             /* Previous data size in the PIO shared tx data buffer */
 997:spi_master.c  ****             uint16 pio_tx_data_size;
 998:spi_master.c  ****             /* Data size in the PIO shared rx data buffer */
 999:spi_master.c  ****             uint16 pio_rx_data_size;
1000:spi_master.c  **** 
1001:spi_master.c  ****             /* Adjust the rx data buffer to include the octets that have been
1002:spi_master.c  ****              * received */
1003:spi_master.c  ****             OQIncrementSize(&(state.pio_rx_data), transfer_size);
 197                 	L,#0x0018
 198 0016 00 00 00 14 		st	AL,@(0,Y)
 199 0018 04 13       		ld	AL,#state+3
 200 0019 00 00 00 00 		ld	AH,@state+0x0002
 200      00 9C 
1004:spi_master.c  **** 
1005:spi_master.c  ****             /* Transfer the received data from the shared RAM into the rx data
1006:spi_master.c  ****              * buffer */
1007:spi_master.c  ****             OQTransferData(&(state.pio_rx_data), state.p_rx_data,
 201                 		OQTransferData
 202 001c 18 14       		.loc 1 1012 0
 203 001d 00 27       		ld	AL,#state+3
 204 001e 00 00 00 14 		bsr	OQSize
 205 0020 00 00 00 11 		st	AL,@(0x0003,Y)
 206 0022 00 00 00 00 	.LVL21:
 206      00 9C 
1008:spi_master.c  ****                                                 PIO_CONTROLLER_SPI_RAM_RX_SIZE);
1009:spi_master.c  **** 
1010:spi_master.c  ****             /* Rx data buffer should now be empty, unless Rx queue is full */
1011:spi_master.c  ****             pio_rx_data_size = OQSize(&(state.pio_rx_data));
 207                 	1 1015 0
 208 0025 00 00 00 14 		ld	AL,#state+9
 209 0027 00 00 00 00 		bsr	OQSize
 209      00 9C 
 210 002a 03 27       		.loc 1 1017 0
 211                 		cmp	AL,@(0x0004,Y)
1012:spi_master.c  **** 
1013:spi_master.c  ****             /* Get the transfer size in the PIO controller */
1014:spi_master.c  ****             pio_tx_data_size = OQSize(&(state.pio_tx_data));
 212                 	2:
 213 002b 00 00 00 14 		bcc	.L29
 214 002d 00 00 00 00 		.loc 1 1025 0
 214      00 9C 
1015:spi_master.c  **** 
1016:spi_master.c  ****             if (pio_tx_data_size < transfer_size)
 215                 		AH,@(0x0004,Y)
 216 0030 04 87       		sub	AH,@$XAP_AL
 217                 		ld	AL,#state+9
 218 0031 00 00 00 00 	.LVL23:
 218      00 F8 
1017:spi_master.c  ****                 /* If there was buffer under-run in the tx data area of the
1018:spi_master.c  ****                  * shared RAM. This should never happen since we would never
1019:spi_master.c  ****                  * set the transfer size to be more than the data we have
1020:spi_master.c  ****                  * actually copied over to the PIO controller shared RAM */
1021:spi_master.c  ****             {
1022:spi_master.c  ****                 /* Adjust the PIO shared tx data buffer size to account for the
1023:spi_master.c  ****                  * data under-run in the tx buffer */
1024:spi_master.c  ****                 OQIncrementSize(&(state.pio_tx_data),
 219                 		OQIncrementSize
 220 0034 04 13       	.LVL24:
 221 0035 00 00 00 51 	.L29:
 222 0037 00 00 00 14 		.loc 1 1032 0
 223                 		ld	AL,#state+9
 224 0039 00 00 00 00 	.LVL25:
 224      00 9C 
 225                 		ld	AH,@(0x0004,Y)
 226                 		bsr	OQDecrementSize
1025:spi_master.c  ****                                               transfer_size - pio_tx_data_size);
1026:spi_master.c  ****             }
1027:spi_master.c  **** 
1028:spi_master.c  ****             /* Adjust the PIO shared tx data buffer size to account for the
1029:spi_master.c  ****              * data that has been sent. By this point the tx data in the PIO
1030:spi_master.c  ****              * controller shared RAM must have been empty */
1031:spi_master.c  ****             OQDecrementSize(&(state.pio_tx_data), transfer_size);
 227                 	1034 0
 228 003c 00 00 00 14 		ld	AL,@state
 229                 		cmp	AL,#0x0005
 230 003e 04 13       		bne	.L30
 231 003f 00 00 00 00 		.loc 1 1040 0
 231      00 9C 
1032:spi_master.c  **** 
1033:spi_master.c  ****             if (state.state ==
 232                 	L,#0x0000
 233 0042 00 00 00 15 		st	AL,@0xe820
 234 0044 05 84       		.loc 1 1043 0
 235 0045 00 00 00 00 		bsr	setSSEL
 235      00 F0 
1034:spi_master.c  ****                              TransactionState_WaitingForPioControllerToDeassert)
1035:spi_master.c  ****                 /* If no more data can be transferred and SSEL needs to be
1036:spi_master.c  ****                  * de-asserted */
1037:spi_master.c  ****             {
1038:spi_master.c  ****                 /* Set the transfer size */
1039:spi_master.c  ****                 SET_SPI_TRANSFER_SIZE_REG(0U);
 236                 	c 1 1046 0
 237 0048 00 14       		ld	AL,@(0x0002,Y)
 238 0049 E8 00 20 25 		st	AL,@state
1040:spi_master.c  ****                 
1041:spi_master.c  ****                 /* De-assert the SPI Slave select */
1042:spi_master.c  ****                 setSSEL(FALSE);
 239                 	oc 1 1050 0
 240 004b 00 00 00 00 		ld	X,@state+0x000f
 240      00 9C 
1043:spi_master.c  ****                 
1044:spi_master.c  ****                 /* No transaction is in progress */
1045:spi_master.c  ****                 state.state = newState;
 241                 	eq	.L28
 242 004e 02 17       		.loc 1 1052 0
 243 004f 00 00 00 25 		ld	AL,@state+0x0002
1046:spi_master.c  ****                 
1047:spi_master.c  ****                 /* Issue the callback notifying the current status of the
1048:spi_master.c  ****                  * transfer */
1049:spi_master.c  ****                 if (state.p_data_cb_func != NULL)
 244                 		AH,@state+0x0001
 245 0051 00 00 00 19 		st	X,@(-1,Y)
 246 0053 00 00 00 00 		bsr	@(-1,Y)
 246      00 F4 
1050:spi_master.c  ****                 {
1051:spi_master.c  ****                     (*(state.p_data_cb_func))(state.p_rx_data, state.p_tx_data);
 247                 	a	.L28
 248 0056 00 00 00 15 	.L30:
 249 0058 00 00 00 11 		.loc 1 1055 0
 250 005a FF 2B       		cmp	AL,#0x0004
 251 005b FF 9F       		bne	.L28
 252 005c 00 00 00 00 		.loc 1 1059 0
 252      00 E0 
 253                 		ld	AL,@(0x0002,Y)
1052:spi_master.c  ****                 }
1053:spi_master.c  ****             }
1054:spi_master.c  ****             else if (state.state == TransactionState_WaitingForPioController)
 254                 	@state
 255 005f 04 84       		.loc 1 1061 0
 256 0060 00 00 00 00 		ld	AL,@state+0x0001
 256      00 F0 
1055:spi_master.c  ****                 /* If data transfer has to be continued */
1056:spi_master.c  ****             {
1057:spi_master.c  ****                 /* PIO controller on hold */
1058:spi_master.c  ****                 state.state = newState;
 257                 	r	OQSize
 258 0063 02 17       		tst	@$XAP_AL
 259 0064 00 00 00 25 		beq	.L31
1059:spi_master.c  **** 
1060:spi_master.c  ****                 if (((OQSize(state.p_tx_data) == 0) ||
 260                 	t	@(0x0003,Y)
 261 0066 00 00 00 15 		beq	.L32
 262 0068 00 00 00 00 	.L31:
 262      00 9C 
 263 006b 00 00 00 99 		ld	X,@state+0x000f
 264 006d 00 00 00 00 		beq	.L33
 264      00 F4 
 265 0070 03 9B       		.loc 1 1070 0
 266 0071 00 00 00 00 		ld	AL,@state+0x0002
 266      00 F4 
 267                 		ld	AH,@state+0x0001
 268 0074 00 00 00 19 		st	X,@(-1,Y)
 269 0076 00 00 00 00 		bsr	@(-1,Y)
 269      00 F4 
1061:spi_master.c  ****                     /* If no more data is left in the tx data buffer to be
1062:spi_master.c  ****                      * transferred over to the PIO Controller shared RAM,
1063:spi_master.c  ****                      * it means the data transfer has been completed */
1064:spi_master.c  ****                     (pio_rx_data_size > 0)) &&
1065:spi_master.c  ****                     /* If there is no room in the Rx queue to transfer all
1066:spi_master.c  ****                      * of the data from the rx data area */
1067:spi_master.c  ****                     (state.p_data_cb_func != NULL))
1068:spi_master.c  ****                 {
1069:spi_master.c  ****                     (*(state.p_data_cb_func))(state.p_rx_data, state.p_tx_data);
 270                 	c 1 1073 0
 271 0079 00 00 00 15 		tst	@(0x0003,Y)
 272 007b 00 00 00 11 		beq	.L32
 273 007d FF 2B       		.loc 1 1080 0
 274 007e FF 9F       		ld	AL,#0x0018
 275                 		st	AL,@(0,Y)
1070:spi_master.c  ****                 }
1071:spi_master.c  **** 
1072:spi_master.c  ****                 if (pio_rx_data_size > 0)
 276                 	,#state+3
 277 007f 03 9B       		ld	AH,@state+0x0002
 278 0080 00 00 00 00 		bsr	OQTransferData
 278      00 F4 
1073:spi_master.c  ****                     /* There was no room in the Rx queue to transfer all
1074:spi_master.c  ****                      * of the data from the rx data buffer, see if applications
1075:spi_master.c  ****                      * made more room available from the call-back */
1076:spi_master.c  ****                 {
1077:spi_master.c  ****                     /* Transfer the received data from the shared RAM into the
1078:spi_master.c  ****                      * rx data buffer */
1079:spi_master.c  ****                     OQTransferData(&(state.pio_rx_data), state.p_rx_data,
 279                 	2:
 280 0083 18 14       		.loc 1 1084 0
 281 0084 00 27       		ld	AL,@state
 282 0085 00 00 00 14 		cmp	AL,@(0x0002,Y)
 283 0087 00 00 00 11 		bne	.L28
 284 0089 00 00 00 00 		.loc 1 1089 0
 284      00 9C 
 285                 		ld	AL,@state+0x0001
1080:spi_master.c  ****                                                 PIO_CONTROLLER_SPI_RAM_RX_SIZE);
1081:spi_master.c  ****                 }
1082:spi_master.c  **** 
1083:spi_master.c  ****                 if (state.state == newState)
 286                 	Size
 287 008c 00 00 00 15 		tst	@$XAP_AL
 288 008e 02 87       		beq	.L34
 289 008f 00 00 00 00 		.loc 1 1092 0
 289      00 F0 
1084:spi_master.c  ****                     /* If the callback did not change the state, which would
1085:spi_master.c  ****                      * be the case if the transaction has ended and/or new
1086:spi_master.c  ****                      * transaction has started */
1087:spi_master.c  ****                 {
1088:spi_master.c  ****                     if (OQSize(state.p_tx_data) > 0)
 290                 	AL,#0x0003
 291 0092 00 00 00 15 		bsr	processEvent
 292 0094 00 00 00 00 		bra	.L38
 292      00 9C 
 293 0097 00 00 00 99 	.L34:
 294 0099 00 00 00 00 		.loc 1 1098 0
 294      00 F4 
1089:spi_master.c  ****                         /* If there is more data to be transferred */
1090:spi_master.c  ****                     {
1091:spi_master.c  ****                         newState = processEvent(
 295                 	L,#0x0004
 296 009c 03 14       		bsr	processEvent
 297 009d 00 00 00 00 	.L38:
 297      00 9C 
 298 00a0 00 00 00 00 		st	AL,@(0x0005,Y)
 298      00 E0 
 299                 	.LVL26:
1092:spi_master.c  ****                          TransactionEvent_PIOControllerUnblockedWithDataToSend);
1093:spi_master.c  ****                     }
1094:spi_master.c  ****                     else
1095:spi_master.c  ****                         /* If there is no more data to be transferred */
1096:spi_master.c  ****                     {
1097:spi_master.c  ****                         newState = processEvent(
 300                 	 1 1102 0
 301 00a3 04 14       		ld	AL,@(0x0005,Y)
 302 00a4 00 00 00 00 		cmp	AL,#0x0004
 302      00 9C 
 303                 		bne	.L36
 304 00a7 05 27       		.loc 1 1107 0
 305                 		ld	AL,@state+0x0001
1098:spi_master.c  ****                               TransactionEvent_PIOControllerUnblockedButNoData);
1099:spi_master.c  ****                     }
1100:spi_master.c  **** 
1101:spi_master.c  ****                     if (newState == TransactionState_WaitingForPioController)
 306                 	,@(0x0001,Y)
 307 00a8 05 17       		bsr	OQSize
 308 00a9 04 84       		st	AL,@(0,Y)
 309 00aa 00 00 00 00 		ld	AL,@(0x0001,Y)
 309      00 F0 
1102:spi_master.c  ****                         /* If more data is to be transferred over to shared RAM */
1103:spi_master.c  ****                     {
1104:spi_master.c  ****                         /* Transfer as much tx data over to PIO controller as
1105:spi_master.c  ****                          * possible */
1106:spi_master.c  ****                         transfer_size = OQTransferData(state.p_tx_data,
 310                 	AH,#state+9
 311 00ad 00 00 00 15 		bsr	OQTransferData
 312 00af 01 27       		.loc 1 1112 0
 313 00b0 00 00 00 00 		and	AL,#0x00ff
 313      00 9C 
 314 00b3 00 27       	.LVL27:
 315 00b4 01 17       		st	AL,@0xe820
 316 00b5 00 00 00 10 		.loc 1 1116 0
 317 00b7 00 00 00 00 		bsr	PioCtrlrInterrupt
 317      00 9C 
1107:spi_master.c  ****                                                       &(state.pio_tx_data),
1108:spi_master.c  ****                                                       OQSize(state.p_tx_data));
1109:spi_master.c  ****                         
1110:spi_master.c  ****                         /* Set the transfer size */
1111:spi_master.c  ****                         SET_SPI_TRANSFER_SIZE_REG(transfer_size);
 318                 	.L36:
 319 00ba 01 00 FF C4 		.loc 1 1120 0
 320                 		ld	AL,@(0x0005,Y)
 321 00bc E8 00 20 25 		st	AL,@state
1112:spi_master.c  ****                         
1113:spi_master.c  ****                         /* Issue interrupt to PIO controller to resume the
1114:spi_master.c  ****                          * transfer */
1115:spi_master.c  ****                         PioCtrlrInterrupt();
 322                 	29:
 323 00be 00 00 00 00 	.L28:
 323      00 9C 
 324                 	.LBE3:
 325                 		.loc 1 1126 0
1116:spi_master.c  ****                     }
1117:spi_master.c  ****                     
1118:spi_master.c  ****                     /* Transaction is in progress */
1119:spi_master.c  ****                     state.state = newState;
 326                 	AL,#0x0000
 327 00c1 05 17       		st	AL,@0xe823
 328 00c2 00 00 00 25 	.L37:
 329                 	.LBE2:
 330                 		.loc 1 1128 0
 331                 		leave	#0x0007
1120:spi_master.c  ****                 }
1121:spi_master.c  ****             }
1122:spi_master.c  ****         }
1123:spi_master.c  ****         
1124:spi_master.c  ****         /* Acknowledge the interrupt */
1125:spi_master.c  ****         SET_SPI_INT_ACK(0U);
 332                 	:
 333 00c4 00 14       		.size	SpiMasterProcessPioControllerEvent, .-SpiMasterProcessPioControllerEvent
 334 00c5 E8 00 23 25 		.global	__size_of_SpiMasterProcessPioControllerEvent
 335                 		.equ	__size_of_SpiMasterProcessPioControllerEvent,. - SpiMasterProcessPioControllerEvent
 336                 		.section	.text.SpiMasterEndTransaction,"ax",@progbits
1126:spi_master.c  ****     }
1127:spi_master.c  **** } /* SpiMasterProcessPioControllerEvent */
 337                 	bal	SpiMasterEndTransaction
 338 00c7 07 0F       		.type	SpiMasterEndTransaction, @function
 339                 	SpiMasterEndTransaction:
 340                 	.LFB8:
 341                 		.loc 1 780 0
 342                 		enter	#0x0001
 343                 	.LCFI2:
 344                 		.loc 1 783 0
 345                 		ld	AL,#0x0002
 346                 		bsr	processEvent
 347                 		.loc 1 785 0
 780:spi_master.c  **** {
 348                 	0001
 349 0000 01 0B       	.LVL30:
 350                 		bne	.L40
 783:spi_master.c  ****                                     processEvent(TransactionEvent_DeassertSSEL);
 351                 	oc 1 789 0
 352 0001 02 14       		ld	AL,#0x0000
 353 0002 00 00 00 00 	.LVL31:
 353      00 9C 
 785:spi_master.c  ****     if (newState == TransactionState_PIOControllerReady)
 354                 	r	setSSEL
 355 0005 01 84       		.loc 1 792 0
 356                 		ld	AL,#0x0001
 357 0006 00 00 00 00 		st	AL,@state
 357      00 F0 
 789:spi_master.c  ****         setSSEL(FALSE);
 358                 		.L45
 359 0009 00 14       	.LVL32:
 360                 	.L40:
 361 000a 00 00 00 00 		.loc 1 797 0
 361      00 9C 
 792:spi_master.c  ****         state.state = newState;
 362                 		AL,#0x0005
 363 000d 01 14       		bne	.L42
 364 000e 00 00 00 25 		.loc 1 803 0
 365 0010 00 00 00 00 		st	AL,@state
 365      00 E0 
 366                 	.LVL33:
 367                 		ld	AH,#0x0000
 797:spi_master.c  ****     else if (newState == TransactionState_WaitingForPioControllerToDeassert)
 368                 	:
 369 0013 05 84       		bra	.L41
 370 0014 00 00 00 00 	.LVL35:
 370      00 F0 
 803:spi_master.c  ****         state.state = newState;
 371                 	2:
 372 0017 00 00 00 25 		ld	AH,#0x0000
 373                 	.LVL36:
 374 0019 00 10       		ld	AL,@state
 375                 	.LVL37:
 376 001a 00 00 00 00 		cmp	AL,#0x0001
 376      00 E0 
 377                 		bne	.L41
 378                 	.L45:
 379 001d 00 10       		ld	AH,#0x0001
 380                 	.L41:
 381 001e 00 00 00 15 		.loc 1 812 0
 382                 		ld	AL,@$XAP_AH
 383 0020 01 84       		leave	#0x0001
 384 0021 00 00 00 00 	.LFE8:
 384      00 F0 
 385                 		.size	SpiMasterEndTransaction, .-SpiMasterEndTransaction
 386 0024 01 10       		.global	__size_of_SpiMasterEndTransaction
 387                 		.equ	__size_of_SpiMasterEndTransaction,. - SpiMasterEndTransaction
 812:spi_master.c  **** } /* SpiMasterEndTransaction */
 388                 	piMasterStartTransaction,"ax",@progbits
 389 0025 00 00 00 15 		.global	SpiMasterStartTransaction
 390 0027 01 0F       		.type	SpiMasterStartTransaction, @function
 391                 	SpiMasterStartTransaction:
 392                 	.LFB7:
 393                 		.loc 1 688 0
 394                 		enter	#0x0003
 395                 	.LCFI3:
 396                 		.loc 1 691 0
 397                 		ld	AL,#0x0001
 398                 		bsr	processEvent
 399                 		.loc 1 693 0
 688:spi_master.c  **** {
 400                 	002
 401 0000 03 0B       	.LVL38:
 402                 		bne	.L47
 691:spi_master.c  ****     TransactionState newState = processEvent(TransactionEvent_AssertSSEL);
 403                 	oc 1 698 0
 404 0001 01 14       		st	AL,@state
 405 0002 00 00 00 00 	.LVL39:
 405      00 9C 
 693:spi_master.c  ****     if (newState == TransactionState_TransactionStarted)
 406                 	7:
 407 0005 02 84       		.loc 1 701 0
 408                 		ld	AL,#0x0003
 409 0006 00 00 00 00 	.LVL40:
 409      00 F0 
 698:spi_master.c  ****         state.state = newState;
 410                 		processEvent
 411 0009 00 00 00 25 		.loc 1 704 0
 412                 		cmp	AL,#0x0004
 413                 	.LVL41:
 701:spi_master.c  ****     newState =
 414                 		.L48
 415 000b 03 14       	.LBB4:
 416                 		.loc 1 710 0
 417 000c 00 00 00 00 		ld	AL,@state+0x0001
 417      00 9C 
 704:spi_master.c  ****     if (newState == TransactionState_WaitingForPioController)
 418                 	42:
 419 000f 04 84       		st	AL,@(0x0001,Y)
 420                 		bsr	OQSize
 421 0010 00 00 00 00 		st	AL,@(0,Y)
 421      00 F0 
 422                 		ld	AL,@(0x0001,Y)
 710:spi_master.c  ****                                                      OQSize(state.p_tx_data));
 423                 	H,#state+9
 424 0013 00 00 00 15 		bsr	OQTransferData
 425                 		.loc 1 713 0
 426 0015 01 27       		and	AL,#0x00ff
 427 0016 00 00 00 00 	.LVL43:
 427      00 9C 
 428 0019 00 27       		st	AL,@0xe820
 429 001a 01 17       		.loc 1 715 0
 430 001b 00 00 00 10 		ld	AL,@state
 431 001d 00 00 00 00 	.LVL44:
 431      00 9C 
 713:spi_master.c  ****         SET_SPI_TRANSFER_SIZE_REG(transfer_size);
 432                 	0x0002
 433 0020 01 00 FF C4 		bne	.L49
 434                 		.loc 1 719 0
 435 0022 E8 00 20 25 		ld	AL,#0x0001
 715:spi_master.c  ****         if (state.state == TransactionState_TransactionStarted)
 436                 		setSSEL
 437 0024 00 00 00 15 	.L49:
 438                 		.loc 1 723 0
 439 0026 02 84       		bsr	PioCtrlrInterrupt
 440 0027 00 00 00 00 		.loc 1 726 0
 440      00 F0 
 719:spi_master.c  ****             setSSEL(TRUE);
 441                 	L,#0x0004
 442 002a 01 14       		st	AL,@state
 443 002b 00 00 00 00 		bra	.L53
 443      00 9C 
 444                 	.LVL45:
 723:spi_master.c  ****         PioCtrlrInterrupt();
 445                 	:
 446 002e 00 00 00 00 		ld	AH,#0x0000
 446      00 9C 
 726:spi_master.c  ****         state.state = newState;
 447                 	VL46:
 448 0031 04 14       		ld	AL,@state
 449 0032 00 00 00 25 	.LVL47:
 450 0034 00 00 00 00 		cmp	AL,#0x0004
 450      00 E0 
 451                 		bne	.L50
 452                 	.L53:
 453 0037 00 10       		ld	AH,#0x0001
 454                 	.L50:
 455 0038 00 00 00 15 	.LBE4:
 456                 		.loc 1 738 0
 457 003a 04 84       		ld	AL,@$XAP_AH
 458 003b 00 00 00 00 		leave	#0x0003
 458      00 F0 
 459                 	.LFE7:
 460 003e 01 10       		.size	SpiMasterStartTransaction, .-SpiMasterStartTransaction
 461                 		.global	__size_of_SpiMasterStartTransaction
 462                 		.equ	__size_of_SpiMasterStartTransaction,. - SpiMasterStartTransaction
 738:spi_master.c  **** } /* SpiMasterStartTransaction */
 463                 	SpiMasterDeinit,"ax",@progbits
 464 003f 00 00 00 15 		.global	SpiMasterDeinit
 465 0041 03 0F       		.type	SpiMasterDeinit, @function
 466                 	SpiMasterDeinit:
 467                 	.LFB12:
 468                 		.loc 1 940 0
 469                 		enter	#0x0001
 470                 	.LCFI4:
 471                 		.loc 1 942 0
 472                 		bsr	PioCtrlrStop
 473                 		.loc 1 945 0
 474                 		ld	AL,#0x0000
 940:spi_master.c  **** {
 475                 	+1
 476 0000 01 0B       		st	AL,@(0,X)
 477                 		.loc 1 946 0
 942:spi_master.c  ****     PioCtrlrStop();
 478                 		AL,@state+0x0002
 479 0001 00 00 00 00 		.loc 1 949 0
 479      00 9C 
 945:spi_master.c  ****     state.p_tx_data = NULL;
 480                 	d	AL,@$XAP_UXL
 481 0004 00 14       		add	AL,#0x0008
 482 0005 00 00 00 18 		bsr	OQDestroy
 483 0007 00 26       		.loc 1 951 0
 946:spi_master.c  ****     state.p_rx_data = NULL;
 484                 	AL,#state+1
 485 0008 00 00 00 25 		add	AL,#0x0002
 949:spi_master.c  ****     OQDestroy(&(state.pio_tx_data));
 486                 	sr	OQDestroy
 487 000a 00 00 00 15 		.loc 1 953 0
 488 000c 08 34       		ld	X,#0x0000
 489 000d 00 00 00 00 		st	X,@state+0x000f
 489      00 9C 
 951:spi_master.c  ****     OQDestroy(&(state.pio_rx_data));
 490                 	c 1 956 0
 491 0010 00 00 00 14 		ld	AL,#0x0000
 492 0012 02 34       		bsr	setSSEL
 493 0013 00 00 00 00 		.loc 1 959 0
 493      00 9C 
 953:spi_master.c  ****     state.p_data_cb_func = NULL;
 494                 	AL,#0x0006
 495 0016 00 18       		st	AL,@state
 496 0017 00 00 00 29 		.loc 1 962 0
 956:spi_master.c  ****     setSSEL(FALSE);
 497                 	ave	#0x0001
 498 0019 00 14       	.LFE12:
 499 001a 00 00 00 00 		.size	SpiMasterDeinit, .-SpiMasterDeinit
 499      00 9C 
 959:spi_master.c  ****     state.state = TransactionState_Invalid;
 500                 	lobal	__size_of_SpiMasterDeinit
 501 001d 06 14       		.equ	__size_of_SpiMasterDeinit,. - SpiMasterDeinit
 502 001e 00 00 00 25 		.section	.text.SpiMasterStart,"ax",@progbits
 962:spi_master.c  **** } /* SpiMasterDeinit */
 503                 	lobal	SpiMasterStart
 504 0020 01 0F       		.type	SpiMasterStart, @function
 505                 	SpiMasterStart:
 506                 	.LFB6:
 507                 		.loc 1 653 0
 508                 		enter	#0x0001
 509                 	.LCFI5:
 510                 		.loc 1 656 0
 511                 		ld	AL,#0x0000
 512                 		bsr	processEvent
 513                 		.loc 1 658 0
 653:spi_master.c  **** {
 514                 	0001
 515 0000 01 0B       	.LVL48:
 516                 		bne	.L58
 656:spi_master.c  ****                               processEvent(TransactionEvent_PIOControllerStart);
 517                 	oc 1 660 0
 518 0001 00 14       		bsr	PioCtrlrStart
 519 0002 00 00 00 00 	.LVL49:
 519      00 9C 
 658:spi_master.c  ****     if (newState == TransactionState_PIOControllerReady)
 520                 	oc 1 661 0
 521 0005 01 84       		ld	AL,#0x0001
 522                 		st	AL,@state
 523 0006 00 00 00 00 	.LVL50:
 523      00 F0 
 660:spi_master.c  ****         PioCtrlrStart();
 524                 	:
 525 0009 00 00 00 00 		.loc 1 663 0
 525      00 9C 
 526                 		leave	#0x0001
 661:spi_master.c  ****         state.state = newState;
 527                 	E6:
 528 000c 01 14       		.size	SpiMasterStart, .-SpiMasterStart
 529 000d 00 00 00 25 		.global	__size_of_SpiMasterStart
 530                 		.equ	__size_of_SpiMasterStart,. - SpiMasterStart
 531                 		.section	.text.setupSharedRAM,"ax",@progbits
 663:spi_master.c  **** } /* SpiMasterStart */
 532                 	e	setupSharedRAM, @function
 533 000f 01 0F       	setupSharedRAM:
 534                 	.LFB2:
 535                 		.loc 1 245 0
 536                 	.LVL51:
 537                 		enter	#0x0005
 538                 	.LCFI6:
 539                 		st	AL,@(0x0003,Y)
 540                 		.loc 1 249 0
 541                 		st	AL,@(0,Y)
 245:spi_master.c  **** {
 542                 	ate+9
 543                 	.LVL52:
 544 0000 05 0B       		ld	AH,#0x0001
 545                 		bsr	OQSetFill
 546 0001 03 27       		.loc 1 252 0
 249:spi_master.c  ****     OQSetFill(&(state.pio_tx_data), TRUE, tx_buffer_fill);
 547                 	L,#0x0001
 548 0002 00 27       		st	AL,@(0,Y)
 549 0003 00 00 00 14 		ld	AL,#state+9
 550                 		st	AL,@(0x0001,Y)
 551 0005 01 10       		ld	AL,#0xe834
 552 0006 00 00 00 00 		ld	AH,#0x000c
 552      00 9C 
 252:spi_master.c  ****             OQCreate(PIO_CONTROLLER_SPI_RAM_XAP_TX,  (PIO_CONTROLLER_SPI_RAM_TX_SIZE / 2U), OQDataM
 553                 	QCreate
 554 0009 01 14       		.loc 1 250 0
 555 000a 00 27       		tst	@$XAP_AL
 556 000b 00 00 00 14 		beq	.L60
 557 000d 01 27       		.loc 1 260 0
 558 000e E8 00 34 14 		ld	AL,@(0x0003,Y)
 559 0010 0C 10       		st	AL,@(0,Y)
 560 0011 00 00 00 00 		ld	AL,#state+3
 560      00 9C 
 250:spi_master.c  ****     if (
 561                 	0x0001
 562 0014 00 00 00 99 		bsr	OQSetFill
 563 0016 00 00 00 00 		.loc 1 261 0
 563      00 F4 
 260:spi_master.c  ****         OQSetFill(&(state.pio_rx_data), TRUE, tx_buffer_fill);
 564                 		AL,#0x0001
 565 0019 03 17       		st	AL,@(0,Y)
 566 001a 00 27       		ld	AL,#state+3
 567 001b 00 00 00 14 		st	AL,@(0x0001,Y)
 568 001d 01 10       		ld	AL,#0xe828
 569 001e 00 00 00 00 		ld	AH,#0x000c
 569      00 9C 
 261:spi_master.c  ****         if (OQCreate(PIO_CONTROLLER_SPI_RAM_XAP_RX,
 570                 	QCreate
 571 0021 01 14       		tst	@$XAP_AL
 572 0022 00 27       		beq	.L65
 573 0023 00 00 00 14 	.L61:
 574 0025 01 27       		.loc 1 267 0
 575 0026 E8 00 28 14 		ld	AL,#0x0008
 576 0028 0C 10       		st	AL,@(0,Y)
 577 0029 00 00 00 00 		ld	AL,#0xe820
 577      00 9C 
 578 002c 00 00 00 99 		ld	AH,#0x0000
 579 002e 00 00 00 00 		bsr	memset
 579      00 F4 
 580                 		ld	AL,#0x0001
 267:spi_master.c  ****             MemSet( PIO_CONTROLLER_REG_40H, 0U,
 581                 	L,@(0x0002,Y)
 582 0031 08 14       	.LVL53:
 583 0032 00 27       		.loc 1 274 0
 584 0033 E8 00 20 14 		ld	AL,#0x0000
 585 0035 00 10       		st	AL,@(0,Y)
 586 0036 00 00 00 00 		ld	AL,#state+3
 586      00 9C 
 587 0039 01 14       		ld	AH,#0x0000
 588                 		bsr	OQSetFill
 589 003a 02 27       		.loc 1 277 0
 590                 		tst	@(0x0002,Y)
 274:spi_master.c  ****         OQSetFill(&(state.pio_rx_data), FALSE, 0U);
 591                 		ld	AL,#0x0001
 592 003b 00 14       	.LVL54:
 593 003c 00 27       		bra	.L63
 594 003d 00 00 00 14 	.LVL55:
 595 003f 00 10       	.L60:
 596 0040 00 00 00 00 		.loc 1 279 0
 596      00 9C 
 277:spi_master.c  ****     if (!ret_val)
 597                 	,#state+9
 598 0043 02 9B       		bsr	OQDestroy
 599 0044 00 00 00 00 		.loc 1 280 0
 599      00 F4 
 600 0047 01 14       		ld	AL,#state+3
 601                 		bsr	OQDestroy
 602 0048 00 00 00 00 		ld	AL,#0x0000
 602      00 E0 
 603                 	.LVL56:
 604                 	.L63:
 279:spi_master.c  ****         OQDestroy(&(state.pio_tx_data));
 605                 		.loc 1 284 0
 606 004b 00 00 00 14 		leave	#0x0005
 607 004d 00 00 00 00 	.LFE2:
 607      00 9C 
 280:spi_master.c  ****         OQDestroy(&(state.pio_rx_data));
 608                 	ize	setupSharedRAM, .-setupSharedRAM
 609 0050 00 00 00 14 		.equ	__size_of_setupSharedRAM,. - setupSharedRAM
 610 0052 00 00 00 00 		.section	.text.SpiMasterReset,"ax",@progbits
 610      00 9C 
 611 0055 00 14       		.global	SpiMasterReset
 612                 		.type	SpiMasterReset, @function
 613                 	SpiMasterReset:
 614                 	.LFB11:
 284:spi_master.c  **** } /* setupSharedRAM */
 615                 	 884 0
 616 0056 05 0F       	.LVL58:
 617                 		enter	#0x0002
 618                 	.LCFI7:
 619                 		st	AL,@(0,Y)
 620                 		.loc 1 886 0
 621                 		ld	AL,#0x0006
 622                 	.LVL59:
 623                 		bsr	processEvent
 624                 		.loc 1 888 0
 884:spi_master.c  **** {
 625                 	_AL
 626                 	.LVL60:
 627 0000 02 0B       		bne	.L67
 628                 		.loc 1 892 0
 629 0001 00 27       		bsr	PioCtrlrStop
 886:spi_master.c  ****     const TransactionState newState = processEvent(TransactionEvent_Reset);
 630                 	1:
 631 0002 06 14       		.loc 1 895 0
 632                 		ld	AL,@(0,Y)
 633 0003 00 00 00 00 		bsr	setupSharedRAM
 633      00 9C 
 888:spi_master.c  ****     if (newState == TransactionState_Initialised)
 634                 		@$XAP_AL
 635 0006 00 00 00 99 		beq	.L69
 636                 		.loc 1 898 0
 637 0008 00 00 00 00 		bsr	PioCtrlrStart
 637      00 F0 
 892:spi_master.c  ****         PioCtrlrStop();
 638                 	c 1 901 0
 639 000b 00 00 00 00 		ld	AL,#0x0000
 639      00 9C 
 640                 		bsr	setSSEL
 895:spi_master.c  ****         if (setupSharedRAM(tx_buffer_fill))
 641                 	oc 1 904 0
 642 000e 00 17       		ld	AL,#0x0001
 643 000f 00 00 00 00 		st	AL,@state
 643      00 9C 
 644 0012 00 00 00 99 		bra	.L69
 645 0014 00 00 00 00 	.LVL62:
 645      00 F4 
 898:spi_master.c  ****             PioCtrlrStart();
 646                 	
 647 0017 00 00 00 00 		ld	AL,#0x0000
 647      00 9C 
 901:spi_master.c  ****             setSSEL(FALSE);
 648                 	LVL63:
 649 001a 00 14       		tst	@state
 650 001b 00 00 00 00 		bne	.L69
 650      00 9C 
 904:spi_master.c  ****             state.state = TransactionState_PIOControllerReady;
 651                 		AL,#0x0001
 652 001e 01 14       	.L69:
 653 001f 00 00 00 25 	.LVL64:
 654 0021 00 00 00 00 		.loc 1 918 0
 654      00 E0 
 655                 		leave	#0x0002
 656                 	.LFE11:
 657 0024 00 14       		.size	SpiMasterReset, .-SpiMasterReset
 658                 		.global	__size_of_SpiMasterReset
 659 0025 00 00 00 99 		.equ	__size_of_SpiMasterReset,. - SpiMasterReset
 660 0027 00 00 00 00 		.section	.text.SpiMasterInit,"ax",@progbits
 660      00 F0 
 661 002a 01 14       		.global	SpiMasterInit
 662                 		.type	SpiMasterInit, @function
 663                 	SpiMasterInit:
 918:spi_master.c  **** } /* SpiMasterReset */
 664                 	1 582 0
 665 002b 02 0F       	.LVL65:
 666                 		enter	#0x0004
 667                 	.LCFI8:
 668                 		st	AL,@(0x0001,Y)
 669                 		st	AH,@(0x0002,Y)
 670                 		.loc 1 586 0
 671                 		tst	@(0x0004,Y)
 672                 		beq	.L73
 673                 	.LVL66:
 674                 		tst	@(0x0005,Y)
 582:spi_master.c  **** {
 675                 	LVL67:
 676                 		.loc 1 588 0
 677 0000 04 0B       		tst	@$XAP_AL
 678                 		beq	.L73
 679 0001 01 27       	.LVL68:
 680 0002 02 23       		.loc 1 591 0
 586:spi_master.c  ****                    (p_pio_controller_code_addr != NULL);
 681                 	ioCtrlrStop
 682 0003 04 9B       	.LVL69:
 683 0004 00 00 00 00 		.loc 1 594 0
 683      00 F4 
 684                 		ld	AL,@(0x0004,Y)
 685 0007 05 9B       		st	AL,@state+0x0001
 686 0008 00 00 00 00 		.loc 1 595 0
 686      00 F4 
 687                 		ld	X,@(0x0005,Y)
 588:spi_master.c  ****     if (ret_val)
 688                 	state+0x0002
 689 000b 00 00 00 99 		.loc 1 598 0
 690 000d 00 00 00 00 		ld	AL,@(0x0002,Y)
 690      00 F4 
 691                 		st	AL,@state+0x000f
 591:spi_master.c  ****         PioCtrlrStop();
 692                 	c 1 601 0
 693 0010 00 00 00 00 		ld	AL,#0x0006
 693      00 9C 
 694                 		ld	AH,#0x0000
 594:spi_master.c  ****         state.p_tx_data = p_tx_data_buffer;
 695                 	r	PioSetMode
 696 0013 04 17       		.loc 1 604 0
 697 0014 00 00 00 25 		ld	AL,#0x0006
 595:spi_master.c  ****         state.p_rx_data = p_rx_data_buffer;
 698                 		AH,#0x0001
 699 0016 05 1B       		bsr	PioSetDir
 700 0017 00 00 00 29 		.loc 1 607 0
 598:spi_master.c  ****         state.p_data_cb_func = p_data_callback;
 701                 		AL,#0x0000
 702 0019 02 17       		bsr	setSSEL
 703 001a 00 00 00 25 		.loc 1 610 0
 601:spi_master.c  ****         PioSetMode(SPI_MASTER_PIO_SSEL, pio_mode_user);
 704                 		X,#0x0010
 705 001c 06 14       		st	X,@(0,Y)
 706 001d 00 10       		ld	AH,#0x0000
 707 001e 00 00 00 00 		ld	AL,#0x01a0
 707      00 9C 
 604:spi_master.c  ****         PioSetDir(SPI_MASTER_PIO_SSEL, PIO_DIR_OUTPUT);
 708                 		PioSetModes
 709 0021 06 14       		.loc 1 617 0
 710 0022 01 10       		ld	AL,#0x0001
 711 0023 00 00 00 00 		bsr	PioCtrlrClock
 711      00 9C 
 607:spi_master.c  ****         setSSEL(FALSE);
 712                 	c 1 620 0
 713 0026 00 14       		ld	AL,@(0x0001,Y)
 714 0027 00 00 00 00 		bsr	PioCtrlrInit
 714      00 9C 
 610:spi_master.c  ****         PioSetModes(PIO_BIT_MASK(SPI_MASTER_PIO_SCLK) |
 715                 	oc 1 623 0
 716 002a 10 18       		ld	AL,@(0x0006,Y)
 717 002b 00 2B       		bsr	setupSharedRAM
 718 002c 00 10       		.loc 1 626 0
 719 002d 02 00 A0 14 		ld	X,#0x0000
 720 002f 00 00 00 00 		st	X,@0xe820
 720      00 9C 
 617:spi_master.c  ****         PioCtrlrClock(TRUE);
 721                 	1 629 0
 722 0032 01 14       		ld	X,@(0x0007,Y)
 723 0033 00 00 00 00 		add	X,#0x0001
 723      00 9C 
 620:spi_master.c  ****         PioCtrlrInit(p_pio_controller_code_addr);
 724                 	d	X,#0x00ff
 725 0036 01 17       		st	X,@0xe824
 726 0037 00 00 00 00 		.loc 1 632 0
 726      00 9C 
 623:spi_master.c  ****         ret_val = setupSharedRAM(tx_buffer_fill);
 727                 		X,#0x0000
 728 003a 06 17       		st	X,@state
 729 003b 00 00 00 00 		bra	.L74
 729      00 9C 
 626:spi_master.c  ****         SET_SPI_TRANSFER_SIZE_REG(0U);
 730                 	L70:
 731 003e 00 18       	.L73:
 732 003f E8 00 20 29 		ld	AL,#0x0000
 629:spi_master.c  ****         SET_INTER_BYTE_DELAY(inter_octet_delay + 1U);
 733                 	L71:
 734 0041 07 1B       	.L74:
 735 0042 01 38       	.LVL72:
 736 0043 01 00 FF C8 		.loc 1 636 0
 737 0045 E8 00 24 29 		leave	#0x0004
 632:spi_master.c  ****         state.state = TransactionState_Initialised;
 738                 	:
 739 0047 00 18       		.size	SpiMasterInit, .-SpiMasterInit
 740 0048 00 00 00 29 		.global	__size_of_SpiMasterInit
 741 004a 00 00 00 00 		.equ	__size_of_SpiMasterInit,. - SpiMasterInit
 741      00 E0 
 742                 		.section	.bss.state,"aw",@nobits
 743                 		.type	state, @object
 744 004d 00 14       		.size	state, 16
 745                 	state:
 746                 		.space	16
 747                 		.section	.debug_frame,"",@progbits
 636:spi_master.c  **** } /* SpiMasterInit */
 748                 		.4byte	.LECIE0-.LSCIE0
 749 004e 04 0F       	.LSCIE0:
 750                 		.4byte	0xffffffff
 751                 		.1byte	0x1
 752                 		.ascii "\000"
 753                 		.1byte	0x1
 754                 		.1byte	0x7f
 755                 		.1byte	0x3
 756                 		.1byte	0xc
 757                 		.1byte	0x5
 758 0000 00 00 00 00 		.1byte	0x0
 758      00 00 00 00 
 758      00 00 00 00 
 758      00 00 00 00 
 758      00 00 00 00 
 759                 		.p2align	2
 760                 	.LECIE0:
 761 0000 00 00 00 00 	.LSFDE0:
 762                 		.4byte	.LEFDE0-.LASFDE0
 763 0002 FF FF FF FF 	.LASFDE0:
 764 0004 01          		.4byte	.Lframe0
 765 0004 00          		.4byte	.LFB4
 766 0005 01          		.4byte	.LFE4-.LFB4
 767 0005 7F          		.1byte	0x4
 768 0006 03          		.4byte	.LCFI0-.LFB4
 769 0006 0C          		.1byte	0xe
 770 0007 05          		.1byte	0x1
 771 0007 00          		.1byte	0x83
 772                 		.1byte	0x1
 773                 		.p2align	2
 774                 	.LEFDE0:
 775 0008 00 00 00 00 	.LSFDE2:
 776                 		.4byte	.LEFDE2-.LASFDE2
 777 000a 00 00 00 00 	.LASFDE2:
 778 000c 00 00 00 00 		.4byte	.Lframe0
 779 000e 00 00 00 00 		.4byte	.LFB10
 780 0010 41          		.4byte	.LFE10-.LFB10
 781                 		.p2align	2
 782 0010 0E          	.LEFDE2:
 783 0011 01          	.LSFDE4:
 784 0011 83          		.4byte	.LEFDE4-.LASFDE4
 785 0012 01          	.LASFDE4:
 786 0012 00 00 00    		.4byte	.Lframe0
 787                 		.4byte	.LFB9
 788                 		.4byte	.LFE9-.LFB9
 789 0014 00 00 00 00 		.p2align	2
 790                 	.LEFDE4:
 791 0016 00 00 00 00 	.LSFDE6:
 792 0018 00 00 00 00 		.4byte	.LEFDE6-.LASFDE6
 793 001a 00 00 00 00 	.LASFDE6:
 794                 		.4byte	.Lframe0
 795                 		.4byte	.LFB3
 796                 		.4byte	.LFE3-.LFB3
 797 001c 00 00 00 00 		.p2align	2
 798                 	.LEFDE6:
 799 001e 00 00 00 00 	.LSFDE8:
 800 0020 00 00 00 00 		.4byte	.LEFDE8-.LASFDE8
 801 0022 00 00 00 00 	.LASFDE8:
 802                 		.4byte	.Lframe0
 803                 		.4byte	.LFB13
 804                 		.4byte	.LFE13-.LFB13
 805 0024 00 00 00 00 		.1byte	0x4
 806                 		.4byte	.LCFI1-.LFB13
 807 0026 00 00 00 00 		.1byte	0xe
 808 0028 00 00 00 00 		.1byte	0x7
 809 002a 00 00 00 00 		.1byte	0x83
 810                 		.1byte	0x1
 811                 		.p2align	2
 812                 	.LEFDE8:
 813 002c 00 00 00 00 	.LSFDE10:
 814                 		.4byte	.LEFDE10-.LASFDE10
 815 002e 00 00 00 00 	.LASFDE10:
 816 0030 00 00 00 00 		.4byte	.Lframe0
 817 0032 00 00 00 00 		.4byte	.LFB8
 818 0034 41          		.4byte	.LFE8-.LFB8
 819                 		.1byte	0x4
 820 0034 0E          		.4byte	.LCFI2-.LFB8
 821 0035 07          		.1byte	0xe
 822 0035 83          		.1byte	0x1
 823 0036 01          		.1byte	0x83
 824 0036 00 00 00    		.1byte	0x1
 825                 		.p2align	2
 826                 	.LEFDE10:
 827 0038 00 00 00 00 	.LSFDE12:
 828                 		.4byte	.LEFDE12-.LASFDE12
 829 003a 00 00 00 00 	.LASFDE12:
 830 003c 00 00 00 00 		.4byte	.Lframe0
 831 003e 00 00 00 00 		.4byte	.LFB7
 832 0040 41          		.4byte	.LFE7-.LFB7
 833                 		.1byte	0x4
 834 0040 0E          		.4byte	.LCFI3-.LFB7
 835 0041 01          		.1byte	0xe
 836 0041 83          		.1byte	0x3
 837 0042 01          		.1byte	0x83
 838 0042 00 00 00    		.1byte	0x1
 839                 		.p2align	2
 840                 	.LEFDE12:
 841 0044 00 00 00 00 	.LSFDE14:
 842                 		.4byte	.LEFDE14-.LASFDE14
 843 0046 00 00 00 00 	.LASFDE14:
 844 0048 00 00 00 00 		.4byte	.Lframe0
 845 004a 00 00 00 00 		.4byte	.LFB12
 846 004c 41          		.4byte	.LFE12-.LFB12
 847                 		.1byte	0x4
 848 004c 0E          		.4byte	.LCFI4-.LFB12
 849 004d 03          		.1byte	0xe
 850 004d 83          		.1byte	0x1
 851 004e 01          		.1byte	0x83
 852 004e 00 00 00    		.1byte	0x1
 853                 		.p2align	2
 854                 	.LEFDE14:
 855 0050 00 00 00 00 	.LSFDE16:
 856                 		.4byte	.LEFDE16-.LASFDE16
 857 0052 00 00 00 00 	.LASFDE16:
 858 0054 00 00 00 00 		.4byte	.Lframe0
 859 0056 00 00 00 00 		.4byte	.LFB6
 860 0058 41          		.4byte	.LFE6-.LFB6
 861                 		.1byte	0x4
 862 0058 0E          		.4byte	.LCFI5-.LFB6
 863 0059 01          		.1byte	0xe
 864 0059 83          		.1byte	0x1
 865 005a 01          		.1byte	0x83
 866 005a 00 00 00    		.1byte	0x1
 867                 		.p2align	2
 868                 	.LEFDE16:
 869 005c 00 00 00 00 	.LSFDE18:
 870                 		.4byte	.LEFDE18-.LASFDE18
 871 005e 00 00 00 00 	.LASFDE18:
 872 0060 00 00 00 00 		.4byte	.Lframe0
 873 0062 00 00 00 00 		.4byte	.LFB2
 874 0064 41          		.4byte	.LFE2-.LFB2
 875                 		.1byte	0x4
 876 0064 0E          		.4byte	.LCFI6-.LFB2
 877 0065 01          		.1byte	0xe
 878 0065 83          		.1byte	0x5
 879 0066 01          		.1byte	0x83
 880 0066 00 00 00    		.1byte	0x1
 881                 		.p2align	2
 882                 	.LEFDE18:
 883 0068 00 00 00 00 	.LSFDE20:
 884                 		.4byte	.LEFDE20-.LASFDE20
 885 006a 00 00 00 00 	.LASFDE20:
 886 006c 00 00 00 00 		.4byte	.Lframe0
 887 006e 00 00 00 00 		.4byte	.LFB11
 888 0070 41          		.4byte	.LFE11-.LFB11
 889                 		.1byte	0x4
 890 0070 0E          		.4byte	.LCFI7-.LFB11
 891 0071 05          		.1byte	0xe
 892 0071 83          		.1byte	0x2
 893 0072 01          		.1byte	0x83
 894 0072 00 00 00    		.1byte	0x1
 895                 		.p2align	2
 896                 	.LEFDE20:
 897 0074 00 00 00 00 	.LSFDE22:
 898                 		.4byte	.LEFDE22-.LASFDE22
 899 0076 00 00 00 00 	.LASFDE22:
 900 0078 00 00 00 00 		.4byte	.Lframe0
 901 007a 00 00 00 00 		.4byte	.LFB5
 902 007c 41          		.4byte	.LFE5-.LFB5
 903                 		.1byte	0x4
 904 007c 0E          		.4byte	.LCFI8-.LFB5
 905 007d 02          		.1byte	0xe
 906 007d 83          		.1byte	0x4
 907 007e 01          		.1byte	0x83
 908 007e 00 00 00    		.1byte	0x1
 909                 		.p2align	2
 910                 	.LEFDE22:
 911 0080 00 00 00 00 		.text
 912                 	.Letext0:
 913 0082 00 00 00 00 		.section	.debug_loc,"",@progbits
 914 0084 00 00 00 00 	.Ldebug_loc0:
 915 0086 00 00 00 00 	.LLST0:
 916 0088 41          		.4byte	.LFB4
 917                 		.4byte	.LCFI0
 918 0088 0E          		.2byte	0x1
 919 0089 04          		.1byte	0x55
 920 0089 83          		.4byte	.LCFI0
 921 008a 01          		.4byte	.LFE4
 922 008a 00 00 00    		.2byte	0x2
 923                 		.1byte	0x75
 924                 		.1byte	0x1
 925                 		.4byte	0x0
 926                 		.4byte	0x0
 927                 	.LLST1:
 928                 		.4byte	.LVL0
 929 0000 00 00 00 00 		.4byte	.LVL1
 930 0002 00 00 00 00 		.2byte	0x1
 931 0004 00 01       		.1byte	0x51
 932 0005 55          		.4byte	.LVL2
 933 0005 00 00 00 00 		.4byte	.LVL3
 934 0007 00 00 00 00 		.2byte	0x1
 935 0009 00 02       		.1byte	0x51
 936 000a 75          		.4byte	.LVL4
 937 000b 01          		.4byte	.LVL5
 938 000b 00 00 00 00 		.2byte	0x1
 939 000d 00 00 00 00 		.1byte	0x51
 940                 		.4byte	.LVL6
 941 000f 00 00 00 00 		.4byte	.LVL7
 942 0011 00 00 00 00 		.2byte	0x1
 943 0013 00 01       		.1byte	0x51
 944 0014 51          		.4byte	.LVL8
 945 0015 00 00 00 00 		.4byte	.LVL9
 946 0017 00 00 00 00 		.2byte	0x1
 947 0019 00 01       		.1byte	0x51
 948 001a 51          		.4byte	.LVL10
 949 001a 00 00 00 00 		.4byte	.LVL11
 950 001c 00 00 00 00 		.2byte	0x1
 951 001e 00 01       		.1byte	0x51
 952 001f 51          		.4byte	.LVL12
 953 0020 00 00 00 00 		.4byte	.LVL13
 954 0022 00 00 00 00 		.2byte	0x1
 955 0024 00 01       		.1byte	0x51
 956 0025 51          		.4byte	0x0
 957 0025 00 00 00 00 		.4byte	0x0
 958 0027 00 00 00 00 	.LLST2:
 959 0029 00 01       		.4byte	.LVL1
 960 002a 51          		.4byte	.LVL2
 961 002b 00 00 00 00 		.2byte	0x1
 962 002d 00 00 00 00 		.1byte	0x51
 963 002f 00 01       		.4byte	.LVL3
 964 0030 51          		.4byte	.LVL4
 965 0030 00 00 00 00 		.2byte	0x1
 966 0032 00 00 00 00 		.1byte	0x51
 967 0034 00 01       		.4byte	.LVL5
 968 0035 51          		.4byte	.LVL6
 969 0036 00 00 00 00 		.2byte	0x1
 970 0038 00 00 00 00 		.1byte	0x51
 971                 		.4byte	.LVL7
 972 003a 00 00 00 00 		.4byte	.LVL8
 973 003c 00 00 00 00 		.2byte	0x1
 974 003e 00 01       		.1byte	0x51
 975 003f 51          		.4byte	.LVL9
 976 003f 00 00 00 00 		.4byte	.LVL10
 977 0041 00 00 00 00 		.2byte	0x1
 978 0043 00 01       		.1byte	0x51
 979 0044 51          		.4byte	.LVL11
 980 0045 00 00 00 00 		.4byte	.LVL12
 981 0047 00 00 00 00 		.2byte	0x1
 982 0049 00 01       		.1byte	0x51
 983 004a 51          		.4byte	.LVL13
 984 004a 00 00 00 00 		.4byte	.LVL14
 985 004c 00 00 00 00 		.2byte	0x1
 986 004e 00 01       		.1byte	0x51
 987 004f 51          		.4byte	0x0
 988 0050 00 00 00 00 		.4byte	0x0
 989 0052 00 00 00 00 	.LLST6:
 990 0054 00 01       		.4byte	.LVL15
 991 0055 51          		.4byte	.LVL16
 992 0055 00 00 00 00 		.2byte	0x1
 993 0057 00 00 00 00 		.1byte	0x51
 994 0059 00 01       		.4byte	0x0
 995 005a 51          		.4byte	0x0
 996 005b 00 00 00 00 	.LLST7:
 997 005d 00 00 00 00 		.4byte	.LFB13
 998 005f 00 01       		.4byte	.LCFI1
 999 0060 51          		.2byte	0x1
 1000 0060 00 00 00 00 		.1byte	0x55
 1001 0062 00 00 00 00 		.4byte	.LCFI1
 1002                 		.4byte	.LFE13
 1003 0064 00 00 00 00 		.2byte	0x2
 1004 0066 00 00 00 00 		.1byte	0x75
 1005 0068 00 01       		.1byte	0x7
 1006 0069 51          		.4byte	0x0
 1007 006a 00 00 00 00 		.4byte	0x0
 1008 006c 00 00 00 00 	.LLST8:
 1009                 		.4byte	.LVL17
 1010 006e 00 00 00 00 		.4byte	.LVL18
 1011 0070 00 00 00 00 		.2byte	0x1
 1012 0072 00 01       		.1byte	0x51
 1013 0073 55          		.4byte	0x0
 1014 0073 00 00 00 00 		.4byte	0x0
 1015 0075 00 00 00 00 	.LLST9:
 1016 0077 00 02       		.4byte	.LVL19
 1017 0078 75          		.4byte	.LVL26
 1018 0079 07          		.2byte	0x2
 1019 0079 00 00 00 00 		.1byte	0x76
 1020 007b 00 00 00 00 		.1byte	0x2
 1021                 		.4byte	.LVL26
 1022 007d 00 00 00 00 		.4byte	.LVL29
 1023 007f 00 00 00 00 		.2byte	0x2
 1024 0081 00 01       		.1byte	0x76
 1025 0082 51          		.1byte	0x5
 1026 0083 00 00 00 00 		.4byte	.LVL29
 1027 0085 00 00 00 00 		.4byte	.LFE13
 1028                 		.2byte	0x2
 1029 0087 00 00 00 00 		.1byte	0x76
 1030 0089 00 00 00 00 		.1byte	0x2
 1031 008b 00 02       		.4byte	0x0
 1032 008c 76          		.4byte	0x0
 1033 008c 02          	.LLST10:
 1034 008d 00 00 00 00 		.4byte	.LVL20
 1035 008f 00 00 00 00 		.4byte	.LVL27
 1036 0091 00 02       		.2byte	0x2
 1037 0092 76          		.1byte	0x76
 1038 0092 05          		.1byte	0x4
 1039 0093 00 00 00 00 		.4byte	.LVL27
 1040 0095 00 00 00 00 		.4byte	.LVL28
 1041 0097 00 02       		.2byte	0x1
 1042 0098 76          		.1byte	0x51
 1043 0098 02          		.4byte	.LVL28
 1044 0099 00 00 00 00 		.4byte	.LFE13
 1045 009b 00 00 00 00 		.2byte	0x2
 1046                 		.1byte	0x76
 1047 009d 00 00 00 00 		.1byte	0x4
 1048 009f 00 00 00 00 		.4byte	0x0
 1049 00a1 00 02       		.4byte	0x0
 1050 00a2 76          	.LLST11:
 1051 00a2 04          		.4byte	.LVL22
 1052 00a3 00 00 00 00 		.4byte	.LVL23
 1053 00a5 00 00 00 00 		.2byte	0x1
 1054 00a7 00 01       		.1byte	0x51
 1055 00a8 51          		.4byte	.LVL24
 1056 00a8 00 00 00 00 		.4byte	.LVL25
 1057 00aa 00 00 00 00 		.2byte	0x1
 1058 00ac 00 02       		.1byte	0x51
 1059 00ad 76          		.4byte	0x0
 1060 00ae 04          		.4byte	0x0
 1061 00ae 00 00 00 00 	.LLST12:
 1062 00b0 00 00 00 00 		.4byte	.LFB8
 1063                 		.4byte	.LCFI2
 1064 00b2 00 00 00 00 		.2byte	0x1
 1065 00b4 00 00 00 00 		.1byte	0x55
 1066 00b6 00 01       		.4byte	.LCFI2
 1067 00b7 51          		.4byte	.LFE8
 1068 00b8 00 00 00 00 		.2byte	0x2
 1069 00ba 00 00 00 00 		.1byte	0x75
 1070 00bc 00 01       		.1byte	0x1
 1071 00bd 51          		.4byte	0x0
 1072 00bd 00 00 00 00 		.4byte	0x0
 1073 00bf 00 00 00 00 	.LLST13:
 1074                 		.4byte	.LVL34
 1075 00c1 00 00 00 00 		.4byte	.LVL35
 1076 00c3 00 00 00 00 		.2byte	0x1
 1077 00c5 00 01       		.1byte	0x50
 1078 00c6 55          		.4byte	.LVL36
 1079 00c7 00 00 00 00 		.4byte	.LFE8
 1080 00c9 00 00 00 00 		.2byte	0x1
 1081 00cb 00 02       		.1byte	0x50
 1082 00cc 75          		.4byte	0x0
 1083 00cc 01          		.4byte	0x0
 1084 00cd 00 00 00 00 	.LLST14:
 1085 00cf 00 00 00 00 		.4byte	.LVL30
 1086                 		.4byte	.LVL31
 1087 00d1 00 00 00 00 		.2byte	0x1
 1088 00d3 00 00 00 00 		.1byte	0x51
 1089 00d5 00 01       		.4byte	.LVL32
 1090 00d6 50          		.4byte	.LVL33
 1091 00d6 00 00 00 00 		.2byte	0x1
 1092 00d8 00 00 00 00 		.1byte	0x51
 1093 00da 00 01       		.4byte	.LVL35
 1094 00db 50          		.4byte	.LVL37
 1095 00dc 00 00 00 00 		.2byte	0x1
 1096 00de 00 00 00 00 		.1byte	0x51
 1097                 		.4byte	0x0
 1098 00e0 00 00 00 00 		.4byte	0x0
 1099 00e2 00 00 00 00 	.LLST15:
 1100 00e4 00 01       		.4byte	.LFB7
 1101 00e5 51          		.4byte	.LCFI3
 1102 00e5 00 00 00 00 		.2byte	0x1
 1103 00e7 00 00 00 00 		.1byte	0x55
 1104 00e9 00 01       		.4byte	.LCFI3
 1105 00ea 51          		.4byte	.LFE7
 1106 00eb 00 00 00 00 		.2byte	0x2
 1107 00ed 00 00 00 00 		.1byte	0x75
 1108 00ef 00 01       		.1byte	0x3
 1109 00f0 51          		.4byte	0x0
 1110 00f0 00 00 00 00 		.4byte	0x0
 1111 00f2 00 00 00 00 	.LLST16:
 1112                 		.4byte	.LVL38
 1113 00f4 00 00 00 00 		.4byte	.LVL39
 1114 00f6 00 00 00 00 		.2byte	0x1
 1115 00f8 00 01       		.1byte	0x51
 1116 00f9 55          		.4byte	.LVL39
 1117 00fa 00 00 00 00 		.4byte	.LVL40
 1118 00fc 00 00 00 00 		.2byte	0x1
 1119 00fe 00 02       		.1byte	0x51
 1120 00ff 75          		.4byte	.LVL41
 1121 00ff 03          		.4byte	.LVL42
 1122 0100 00 00 00 00 		.2byte	0x1
 1123 0102 00 00 00 00 		.1byte	0x51
 1124                 		.4byte	.LVL45
 1125 0104 00 00 00 00 		.4byte	.LVL47
 1126 0106 00 00 00 00 		.2byte	0x1
 1127 0108 00 01       		.1byte	0x51
 1128 0109 51          		.4byte	0x0
 1129 0109 00 00 00 00 		.4byte	0x0
 1130 010b 00 00 00 00 	.LLST17:
 1131 010d 00 01       		.4byte	.LVL43
 1132 010e 51          		.4byte	.LVL44
 1133 010f 00 00 00 00 		.2byte	0x1
 1134 0111 00 00 00 00 		.1byte	0x51
 1135 0113 00 01       		.4byte	0x0
 1136 0114 51          		.4byte	0x0
 1137 0114 00 00 00 00 	.LLST18:
 1138 0116 00 00 00 00 		.4byte	.LFB12
 1139 0118 00 01       		.4byte	.LCFI4
 1140 0119 51          		.2byte	0x1
 1141 011a 00 00 00 00 		.1byte	0x55
 1142 011c 00 00 00 00 		.4byte	.LCFI4
 1143                 		.4byte	.LFE12
 1144 011e 00 00 00 00 		.2byte	0x2
 1145 0120 00 00 00 00 		.1byte	0x75
 1146 0122 00 01       		.1byte	0x1
 1147 0123 51          		.4byte	0x0
 1148 0123 00 00 00 00 		.4byte	0x0
 1149 0125 00 00 00 00 	.LLST19:
 1150                 		.4byte	.LFB6
 1151 0127 00 00 00 00 		.4byte	.LCFI5
 1152 0129 00 00 00 00 		.2byte	0x1
 1153 012b 00 01       		.1byte	0x55
 1154 012c 55          		.4byte	.LCFI5
 1155 012d 00 00 00 00 		.4byte	.LFE6
 1156 012f 00 00 00 00 		.2byte	0x2
 1157 0131 00 02       		.1byte	0x75
 1158 0132 75          		.1byte	0x1
 1159 0132 01          		.4byte	0x0
 1160 0133 00 00 00 00 		.4byte	0x0
 1161 0135 00 00 00 00 	.LLST20:
 1162                 		.4byte	.LVL48
 1163 0137 00 00 00 00 		.4byte	.LVL49
 1164 0139 00 00 00 00 		.2byte	0x1
 1165 013b 00 01       		.1byte	0x51
 1166 013c 55          		.4byte	.LVL50
 1167 013c 00 00 00 00 		.4byte	.LFE6
 1168 013e 00 00 00 00 		.2byte	0x1
 1169 0140 00 02       		.1byte	0x51
 1170 0141 75          		.4byte	0x0
 1171 0142 01          		.4byte	0x0
 1172 0142 00 00 00 00 	.LLST21:
 1173 0144 00 00 00 00 		.4byte	.LFB2
 1174                 		.4byte	.LCFI6
 1175 0146 00 00 00 00 		.2byte	0x1
 1176 0148 00 00 00 00 		.1byte	0x55
 1177 014a 00 01       		.4byte	.LCFI6
 1178 014b 51          		.4byte	.LFE2
 1179 014c 00 00 00 00 		.2byte	0x2
 1180 014e 00 00 00 00 		.1byte	0x75
 1181 0150 00 01       		.1byte	0x5
 1182 0151 51          		.4byte	0x0
 1183 0151 00 00 00 00 		.4byte	0x0
 1184 0153 00 00 00 00 	.LLST22:
 1185                 		.4byte	.LVL51
 1186 0155 00 00 00 00 		.4byte	.LVL52
 1187 0157 00 00 00 00 		.2byte	0x1
 1188 0159 00 01       		.1byte	0x51
 1189 015a 55          		.4byte	.LVL52
 1190 015b 00 00 00 00 		.4byte	.LFE2
 1191 015d 00 00 00 00 		.2byte	0x2
 1192 015f 00 02       		.1byte	0x76
 1193 0160 75          		.1byte	0x3
 1194 0160 05          		.4byte	0x0
 1195 0161 00 00 00 00 		.4byte	0x0
 1196 0163 00 00 00 00 	.LLST23:
 1197                 		.4byte	.LVL53
 1198 0165 00 00 00 00 		.4byte	.LVL54
 1199 0167 00 00 00 00 		.2byte	0x2
 1200 0169 00 01       		.1byte	0x76
 1201 016a 51          		.1byte	0x2
 1202 016a 00 00 00 00 		.4byte	.LVL54
 1203 016c 00 00 00 00 		.4byte	.LVL55
 1204 016e 00 02       		.2byte	0x1
 1205 016f 76          		.1byte	0x51
 1206 0170 03          		.4byte	.LVL55
 1207 0170 00 00 00 00 		.4byte	.LVL56
 1208 0172 00 00 00 00 		.2byte	0x2
 1209                 		.1byte	0x76
 1210 0174 00 00 00 00 		.1byte	0x2
 1211 0176 00 00 00 00 		.4byte	.LVL56
 1212 0178 00 02       		.4byte	.LVL57
 1213 0179 76          		.2byte	0x1
 1214 017a 02          		.1byte	0x51
 1215 017a 00 00 00 00 		.4byte	0x0
 1216 017c 00 00 00 00 		.4byte	0x0
 1217 017e 00 01       	.LLST24:
 1218 017f 51          		.4byte	.LFB11
 1219 0180 00 00 00 00 		.4byte	.LCFI7
 1220 0182 00 00 00 00 		.2byte	0x1
 1221 0184 00 02       		.1byte	0x55
 1222 0185 76          		.4byte	.LCFI7
 1223 0185 02          		.4byte	.LFE11
 1224 0186 00 00 00 00 		.2byte	0x2
 1225 0188 00 00 00 00 		.1byte	0x75
 1226 018a 00 01       		.1byte	0x2
 1227 018b 51          		.4byte	0x0
 1228 018b 00 00 00 00 		.4byte	0x0
 1229 018d 00 00 00 00 	.LLST25:
 1230                 		.4byte	.LVL58
 1231 018f 00 00 00 00 		.4byte	.LVL59
 1232 0191 00 00 00 00 		.2byte	0x1
 1233 0193 00 01       		.1byte	0x51
 1234 0194 55          		.4byte	.LVL59
 1235 0195 00 00 00 00 		.4byte	.LFE11
 1236 0197 00 00 00 00 		.2byte	0x2
 1237 0199 00 02       		.1byte	0x76
 1238 019a 75          		.1byte	0x0
 1239 019a 02          		.4byte	0x0
 1240 019b 00 00 00 00 		.4byte	0x0
 1241 019d 00 00 00 00 	.LLST26:
 1242                 		.4byte	.LVL63
 1243 019f 00 00 00 00 		.4byte	.LVL64
 1244 01a1 00 00 00 00 		.2byte	0x1
 1245 01a3 00 01       		.1byte	0x51
 1246 01a4 51          		.4byte	0x0
 1247 01a4 00 00 00 00 		.4byte	0x0
 1248 01a6 00 00 00 00 	.LLST27:
 1249 01a8 00 02       		.4byte	.LVL60
 1250 01a9 76          		.4byte	.LVL61
 1251 01aa 00          		.2byte	0x1
 1252 01aa 00 00 00 00 		.1byte	0x51
 1253 01ac 00 00 00 00 		.4byte	.LVL62
 1254                 		.4byte	.LVL63
 1255 01ae 00 00 00 00 		.2byte	0x1
 1256 01b0 00 00 00 00 		.1byte	0x51
 1257 01b2 00 01       		.4byte	0x0
 1258 01b3 51          		.4byte	0x0
 1259 01b4 00 00 00 00 	.LLST28:
 1260 01b6 00 00 00 00 		.4byte	.LFB5
 1261                 		.4byte	.LCFI8
 1262 01b8 00 00 00 00 		.2byte	0x1
 1263 01ba 00 00 00 00 		.1byte	0x55
 1264 01bc 00 01       		.4byte	.LCFI8
 1265 01bd 51          		.4byte	.LFE5
 1266 01bd 00 00 00 00 		.2byte	0x2
 1267 01bf 00 00 00 00 		.1byte	0x75
 1268 01c1 00 01       		.1byte	0x4
 1269 01c2 51          		.4byte	0x0
 1270 01c3 00 00 00 00 		.4byte	0x0
 1271 01c5 00 00 00 00 	.LLST29:
 1272                 		.4byte	.LVL65
 1273 01c7 00 00 00 00 		.4byte	.LVL66
 1274 01c9 00 00 00 00 		.2byte	0x1
 1275 01cb 00 01       		.1byte	0x51
 1276 01cc 55          		.4byte	.LVL66
 1277 01cc 00 00 00 00 		.4byte	.LVL68
 1278 01ce 00 00 00 00 		.2byte	0x2
 1279 01d0 00 02       		.1byte	0x76
 1280 01d1 75          		.1byte	0x1
 1281 01d2 04          		.4byte	.LVL68
 1282 01d2 00 00 00 00 		.4byte	.LVL69
 1283 01d4 00 00 00 00 		.2byte	0x1
 1284                 		.1byte	0x51
 1285 01d6 00 00 00 00 		.4byte	.LVL69
 1286 01d8 00 00 00 00 		.4byte	.LVL70
 1287 01da 00 01       		.2byte	0x2
 1288 01db 51          		.1byte	0x76
 1289 01dc 00 00 00 00 		.1byte	0x1
 1290 01de 00 00 00 00 		.4byte	.LVL70
 1291 01e0 00 02       		.4byte	.LVL71
 1292 01e1 76          		.2byte	0x1
 1293 01e1 01          		.1byte	0x51
 1294 01e2 00 00 00 00 		.4byte	.LVL71
 1295 01e4 00 00 00 00 		.4byte	.LFE5
 1296 01e6 00 01       		.2byte	0x2
 1297 01e7 51          		.1byte	0x76
 1298 01e7 00 00 00 00 		.1byte	0x1
 1299 01e9 00 00 00 00 		.4byte	0x0
 1300 01eb 00 02       		.4byte	0x0
 1301 01ec 76          	.LLST30:
 1302 01ed 01          		.4byte	.LVL65
 1303 01ed 00 00 00 00 		.4byte	.LVL66
 1304 01ef 00 00 00 00 		.2byte	0x1
 1305 01f1 00 01       		.1byte	0x50
 1306 01f2 51          		.4byte	.LVL66
 1307 01f3 00 00 00 00 		.4byte	.LFE5
 1308 01f5 00 00 00 00 		.2byte	0x2
 1309 01f7 00 02       		.1byte	0x76
 1310 01f8 76          		.1byte	0x2
 1311 01f8 01          		.4byte	0x0
 1312 01f9 00 00 00 00 		.4byte	0x0
 1313 01fb 00 00 00 00 	.LLST31:
 1314                 		.4byte	.LVL65
 1315 01fd 00 00 00 00 		.4byte	.LVL66
 1316 01ff 00 00 00 00 		.2byte	0x2
 1317 0201 00 01       		.1byte	0x91
 1318 0202 50          		.1byte	0x0
 1319 0202 00 00 00 00 		.4byte	.LVL66
 1320 0204 00 00 00 00 		.4byte	.LFE5
 1321 0206 00 02       		.2byte	0x2
 1322 0207 76          		.1byte	0x76
 1323 0208 02          		.1byte	0x4
 1324 0208 00 00 00 00 		.4byte	0x0
 1325 020a 00 00 00 00 		.4byte	0x0
 1326                 	.LLST32:
 1327 020c 00 00 00 00 		.4byte	.LVL65
 1328 020e 00 00 00 00 		.4byte	.LVL67
 1329 0210 00 02       		.2byte	0x2
 1330 0211 91          		.1byte	0x91
 1331 0212 00          		.1byte	0x1
 1332 0212 00 00 00 00 		.4byte	.LVL67
 1333 0214 00 00 00 00 		.4byte	.LVL70
 1334 0216 00 02       		.2byte	0x2
 1335 0217 76          		.1byte	0x76
 1336 0218 04          		.1byte	0x5
 1337 0218 00 00 00 00 		.4byte	.LVL70
 1338 021a 00 00 00 00 		.4byte	.LFE5
 1339                 		.2byte	0x2
 1340 021c 00 00 00 00 		.1byte	0x91
 1341 021e 00 00 00 00 		.1byte	0x1
 1342 0220 00 02       		.4byte	0x0
 1343 0221 91          		.4byte	0x0
 1344 0222 01          	.LLST33:
 1345 0222 00 00 00 00 		.4byte	.LVL71
 1346 0224 00 00 00 00 		.4byte	.LVL72
 1347 0226 00 02       		.2byte	0x1
 1348 0227 76          		.1byte	0x51
 1349 0228 05          		.4byte	0x0
 1350 0228 00 00 00 00 		.4byte	0x0
 1351 022a 00 00 00 00 		.file 2 "C:/CSR_uEnergy_SDK-2.3.0.31/tools/include/CSR101x_A05/types.h"
 1352 022c 00 02       		.file 3 "C:/CSR_uEnergy_SDK-2.3.0.31/tools/include/CSR101x_A05/pio.h"
 1353 022d 91          		.file 4 "octet_queue.h"
 1354 022e 01          		.file 5 "spi_master.h"
 1355 022e 00 00 00 00 		.section	.debug_info
 1356 0230 00 00 00 00 		.4byte	0x5f5
 1357                 		.2byte	0x2
 1358 0232 00 00 00 00 		.4byte	.Ldebug_abbrev0
 1359 0234 00 00 00 00 		.1byte	0x4
 1360 0236 00 01       		.1byte	0x1
 1361 0237 51          		.4byte	.LASF97
 1362 0238 00 00 00 00 		.1byte	0x1
 1363 023a 00 00 00 00 		.4byte	.LASF98
 1364                 		.4byte	.LASF99
 1365                 		.4byte	0x0
 1366                 		.4byte	0x0
 1367                 		.4byte	.Ldebug_ranges0+0x0
 1368                 		.4byte	.Ldebug_line0
 1369 0000 00 00 05 F5 		.1byte	0x2
 1370 0002 00 02       		.4byte	.LASF0
 1371 0003 00 00 00 00 		.1byte	0x2
 1372 0005 04          		.1byte	0x1e
 1373 0005 01          		.4byte	0x34
 1374 0006 00 00 00 00 		.1byte	0x3
 1375 0008 01          		.1byte	0x2
 1376 0008 00 00 00 00 		.1byte	0x8
 1377 000a 00 00 00 00 		.4byte	.LASF2
 1378 000c 00 00 00 00 		.1byte	0x2
 1379 000e 00 00 00 00 		.4byte	.LASF1
 1380 0010 00 00 00 00 		.1byte	0x2
 1381 0012 00 00 00 00 		.1byte	0x1f
 1382 0014 02          		.4byte	0x46
 1383 0015 00 00 00 00 		.1byte	0x3
 1384 0017 02          		.1byte	0x2
 1385 0017 1E          		.1byte	0x7
 1386 0018 00 00 00 34 		.4byte	.LASF3
 1387 001a 03          		.1byte	0x3
 1388 001a 02          		.1byte	0x4
 1389 001b 08          		.1byte	0x7
 1390 001b 00 00 00 00 		.4byte	.LASF4
 1391 001d 02          		.1byte	0x3
 1392 001e 00 00 00 00 		.1byte	0x2
 1393 0020 02          		.1byte	0x6
 1394 0020 1F          		.4byte	.LASF5
 1395 0021 00 00 00 46 		.1byte	0x3
 1396 0023 03          		.1byte	0x2
 1397 0023 02          		.1byte	0x5
 1398 0024 07          		.4byte	.LASF6
 1399 0024 00 00 00 00 		.1byte	0x3
 1400 0026 03          		.1byte	0x4
 1401 0027 04          		.1byte	0x5
 1402 0027 07          		.4byte	.LASF7
 1403 0028 00 00 00 00 		.1byte	0x2
 1404 002a 03          		.4byte	.LASF8
 1405 002a 02          		.1byte	0x2
 1406 002b 06          		.1byte	0x2a
 1407 002b 00 00 00 00 		.4byte	0x74
 1408 002d 03          		.1byte	0x3
 1409 002e 02          		.1byte	0x2
 1410 002e 05          		.1byte	0x7
 1411 002f 00 00 00 00 		.4byte	.LASF9
 1412 0031 03          		.1byte	0x4
 1413 0031 04          		.1byte	0x2
 1414 0032 05          		.1byte	0x3
 1415 0032 00 00 00 00 		.1byte	0x1b
 1416 0034 02          		.4byte	0x11a
 1417 0035 00 00 00 00 		.1byte	0x5
 1418 0037 02          		.4byte	.LASF10
 1419 0037 2A          		.1byte	0x0
 1420 0038 00 00 00 74 		.1byte	0x5
 1421 003a 03          		.4byte	.LASF11
 1422 003a 02          		.1byte	0x1
 1423 003b 07          		.1byte	0x5
 1424 003b 00 00 00 00 		.4byte	.LASF12
 1425 003d 04          		.1byte	0x3
 1426 003e 02          		.1byte	0x5
 1427 003e 03          		.4byte	.LASF13
 1428 003f 1B          		.1byte	0x4
 1429 003f 00 00 01 1A 		.1byte	0x5
 1430 0041 05          		.4byte	.LASF14
 1431 0042 00 00 00 00 		.1byte	0x5
 1432 0044 00          		.1byte	0x5
 1433 0044 05          		.4byte	.LASF15
 1434 0045 00 00 00 00 		.1byte	0x6
 1435 0047 01          		.1byte	0x5
 1436 0047 05          		.4byte	.LASF16
 1437 0048 00 00 00 00 		.1byte	0x7
 1438 004a 03          		.1byte	0x5
 1439 004a 05          		.4byte	.LASF17
 1440 004b 00 00 00 00 		.1byte	0x8
 1441 004d 04          		.1byte	0x5
 1442 004d 05          		.4byte	.LASF18
 1443 004e 00 00 00 00 		.1byte	0x9
 1444 0050 05          		.1byte	0x5
 1445 0050 05          		.4byte	.LASF19
 1446 0051 00 00 00 00 		.1byte	0xa
 1447 0053 06          		.1byte	0x5
 1448 0053 05          		.4byte	.LASF20
 1449 0054 00 00 00 00 		.1byte	0xb
 1450 0056 07          		.1byte	0x5
 1451 0056 05          		.4byte	.LASF21
 1452 0057 00 00 00 00 		.1byte	0xc
 1453 0059 08          		.1byte	0x5
 1454 0059 05          		.4byte	.LASF22
 1455 005a 00 00 00 00 		.1byte	0xd
 1456 005c 09          		.1byte	0x5
 1457 005c 05          		.4byte	.LASF23
 1458 005d 00 00 00 00 		.1byte	0xe
 1459 005f 0A          		.1byte	0x5
 1460 005f 05          		.4byte	.LASF24
 1461 0060 00 00 00 00 		.1byte	0xf
 1462 0062 0B          		.1byte	0x5
 1463 0062 05          		.4byte	.LASF25
 1464 0063 00 00 00 00 		.1byte	0x10
 1465 0065 0C          		.1byte	0x5
 1466 0065 05          		.4byte	.LASF26
 1467 0066 00 00 00 00 		.1byte	0x11
 1468 0068 0D          		.1byte	0x5
 1469 0068 05          		.4byte	.LASF27
 1470 0069 00 00 00 00 		.1byte	0x12
 1471 006b 0E          		.1byte	0x5
 1472 006b 05          		.4byte	.LASF28
 1473 006c 00 00 00 00 		.1byte	0x13
 1474 006e 0F          		.1byte	0x5
 1475 006e 05          		.4byte	.LASF29
 1476 006f 00 00 00 00 		.1byte	0x14
 1477 0071 10          		.1byte	0x5
 1478 0071 05          		.4byte	.LASF30
 1479 0072 00 00 00 00 		.1byte	0x15
 1480 0074 11          		.1byte	0x5
 1481 0074 05          		.4byte	.LASF31
 1482 0075 00 00 00 00 		.1byte	0x16
 1483 0077 12          		.1byte	0x5
 1484 0077 05          		.4byte	.LASF32
 1485 0078 00 00 00 00 		.1byte	0x17
 1486 007a 13          		.1byte	0x5
 1487 007a 05          		.4byte	.LASF33
 1488 007b 00 00 00 00 		.1byte	0x18
 1489 007d 14          		.1byte	0x5
 1490 007d 05          		.4byte	.LASF34
 1491 007e 00 00 00 00 		.1byte	0x19
 1492 0080 15          		.1byte	0x0
 1493 0080 05          		.1byte	0x4
 1494 0081 00 00 00 00 		.1byte	0x2
 1495 0083 16          		.1byte	0x4
 1496 0083 05          		.1byte	0x2b
 1497 0084 00 00 00 00 		.4byte	0x135
 1498 0086 17          		.1byte	0x5
 1499 0086 05          		.4byte	.LASF35
 1500 0087 00 00 00 00 		.1byte	0x0
 1501 0089 18          		.1byte	0x5
 1502 0089 05          		.4byte	.LASF36
 1503 008a 00 00 00 00 		.1byte	0x1
 1504 008c 19          		.1byte	0x5
 1505 008c 00          		.4byte	.LASF37
 1506 008d 04          		.1byte	0x2
 1507 008d 02          		.1byte	0x0
 1508 008e 04          		.1byte	0x2
 1509 008e 2B          		.4byte	.LASF38
 1510 008f 00 00 01 35 		.1byte	0x4
 1511 0091 05          		.1byte	0x3a
 1512 0091 00 00 00 00 		.4byte	0x11a
 1513 0093 00          		.1byte	0x6
 1514 0094 05          		.4byte	.LASF64
 1515 0094 00 00 00 00 		.1byte	0xc
 1516 0096 01          		.1byte	0x4
 1517 0097 05          		.1byte	0x3e
 1518 0097 00 00 00 00 		.4byte	0x1a1
 1519 0099 02          		.1byte	0x7
 1520 009a 00          		.4byte	.LASF39
 1521 009a 02          		.1byte	0x4
 1522 009b 00 00 00 00 		.1byte	0x42
 1523 009d 04          		.4byte	0x1a1
 1524 009d 3A          		.1byte	0x2
 1525 009e 00 00 01 1A 		.1byte	0x23
 1526 00a0 06          		.1byte	0x0
 1527 00a0 00 00 00 00 		.1byte	0x7
 1528 00a2 0C          		.4byte	.LASF40
 1529 00a3 04          		.1byte	0x4
 1530 00a3 3E          		.1byte	0x49
 1531 00a4 00 00 01 A1 		.4byte	0x3b
 1532 00a6 07          		.1byte	0x2
 1533 00a6 00 00 00 00 		.1byte	0x23
 1534 00a8 04          		.1byte	0x1
 1535 00a9 42          		.1byte	0x7
 1536 00a9 00 00 01 A1 		.4byte	.LASF41
 1537 00ab 02          		.1byte	0x4
 1538 00ac 23          		.1byte	0x52
 1539 00ac 00          		.4byte	0x3b
 1540 00ad 07          		.1byte	0x2
 1541 00ad 00 00 00 00 		.1byte	0x23
 1542 00af 04          		.1byte	0x2
 1543 00b0 49          		.1byte	0x7
 1544 00b0 00 00 00 3B 		.4byte	.LASF42
 1545 00b2 02          		.1byte	0x4
 1546 00b3 23          		.1byte	0x5b
 1547 00b3 01          		.4byte	0x3b
 1548 00b4 07          		.1byte	0x2
 1549 00b4 00 00 00 00 		.1byte	0x23
 1550 00b6 04          		.1byte	0x3
 1551 00b7 52          		.1byte	0x7
 1552 00b7 00 00 00 3B 		.4byte	.LASF43
 1553 00b9 02          		.1byte	0x4
 1554 00ba 23          		.1byte	0x61
 1555 00ba 02          		.4byte	0x69
 1556 00bb 07          		.1byte	0x2
 1557 00bb 00 00 00 00 		.1byte	0x23
 1558 00bd 04          		.1byte	0x4
 1559 00be 5B          		.1byte	0x7
 1560 00be 00 00 00 3B 		.4byte	.LASF44
 1561 00c0 02          		.1byte	0x4
 1562 00c1 23          		.1byte	0x73
 1563 00c1 03          		.4byte	0x135
 1564 00c2 07          		.1byte	0x2
 1565 00c2 00 00 00 00 		.1byte	0x23
 1566 00c4 04          		.1byte	0x5
 1567 00c5 61          		.1byte	0x0
 1568 00c5 00 00 00 69 		.1byte	0x8
 1569 00c7 02          		.1byte	0x2
 1570 00c8 23          		.1byte	0x2
 1571 00c8 04          		.4byte	.LASF45
 1572 00c9 07          		.1byte	0x4
 1573 00c9 00 00 00 00 		.1byte	0x74
 1574 00cb 04          		.4byte	0x140
 1575 00cc 73          		.1byte	0x2
 1576 00cc 00 00 01 35 		.4byte	.LASF46
 1577 00ce 02          		.1byte	0x4
 1578 00cf 23          		.1byte	0x77
 1579 00cf 05          		.4byte	0x1b9
 1580 00d0 00          		.1byte	0x9
 1581 00d0 08          		.1byte	0x2
 1582 00d1 02          		.4byte	0x1a3
 1583 00d1 02          		.1byte	0x2
 1584 00d2 00 00 00 00 		.4byte	.LASF47
 1585 00d4 04          		.1byte	0x5
 1586 00d4 74          		.1byte	0x42
 1587 00d5 00 00 01 40 		.4byte	0x1ca
 1588 00d7 02          		.1byte	0x9
 1589 00d7 00 00 00 00 		.1byte	0x2
 1590 00d9 04          		.4byte	0x1d0
 1591 00da 77          		.1byte	0xa
 1592 00da 00 00 01 B9 		.1byte	0x1
 1593 00dc 09          		.4byte	0x1e1
 1594 00dd 02          		.1byte	0xb
 1595 00dd 00 00 01 A3 		.4byte	0x1ae
 1596 00df 02          		.1byte	0xb
 1597 00e0 00 00 00 00 		.4byte	0x1ae
 1598 00e2 05          		.1byte	0x0
 1599 00e2 42          		.1byte	0x4
 1600 00e3 00 00 01 CA 		.1byte	0x2
 1601 00e5 09          		.1byte	0x1
 1602 00e5 02          		.1byte	0x8d
 1603 00e6 00 00 01 D0 		.4byte	0x214
 1604 00e8 0A          		.1byte	0x5
 1605 00e8 01          		.4byte	.LASF48
 1606 00e9 00 00 01 E1 		.1byte	0x0
 1607 00eb 0B          		.1byte	0x5
 1608 00eb 00 00 01 AE 		.4byte	.LASF49
 1609 00ed 0B          		.1byte	0x1
 1610 00ee 00 00 01 AE 		.1byte	0x5
 1611 00f0 00          		.4byte	.LASF50
 1612 00f0 04          		.1byte	0x2
 1613 00f1 02          		.1byte	0x5
 1614 00f1 01          		.4byte	.LASF51
 1615 00f2 8D          		.1byte	0x3
 1616 00f2 00 00 02 14 		.1byte	0x5
 1617 00f4 05          		.4byte	.LASF52
 1618 00f5 00 00 00 00 		.1byte	0x4
 1619 00f7 00          		.1byte	0x5
 1620 00f7 05          		.4byte	.LASF53
 1621 00f8 00 00 00 00 		.1byte	0x5
 1622 00fa 01          		.1byte	0x5
 1623 00fa 05          		.4byte	.LASF54
 1624 00fb 00 00 00 00 		.1byte	0x6
 1625 00fd 02          		.1byte	0x0
 1626 00fd 05          		.1byte	0x2
 1627 00fe 00 00 00 00 		.4byte	.LASF55
 1628 0100 03          		.1byte	0x1
 1629 0100 05          		.1byte	0x9f
 1630 0101 00 00 00 00 		.4byte	0x1e1
 1631 0103 04          		.1byte	0x4
 1632 0103 05          		.1byte	0x2
 1633 0104 00 00 00 00 		.1byte	0x1
 1634 0106 05          		.1byte	0xa5
 1635 0106 05          		.4byte	0x252
 1636 0107 00 00 00 00 		.1byte	0x5
 1637 0109 06          		.4byte	.LASF56
 1638 0109 00          		.1byte	0x0
 1639 010a 02          		.1byte	0x5
 1640 010a 00 00 00 00 		.4byte	.LASF57
 1641 010c 01          		.1byte	0x1
 1642 010d 9F          		.1byte	0x5
 1643 010d 00 00 01 E1 		.4byte	.LASF58
 1644 010f 04          		.1byte	0x2
 1645 0110 02          		.1byte	0x5
 1646 0110 01          		.4byte	.LASF59
 1647 0111 A5          		.1byte	0x3
 1648 0111 00 00 02 52 		.1byte	0x5
 1649 0113 05          		.4byte	.LASF60
 1650 0114 00 00 00 00 		.1byte	0x4
 1651 0116 00          		.1byte	0x5
 1652 0116 05          		.4byte	.LASF61
 1653 0117 00 00 00 00 		.1byte	0x5
 1654 0119 01          		.1byte	0x5
 1655 0119 05          		.4byte	.LASF62
 1656 011a 00 00 00 00 		.1byte	0x6
 1657 011c 02          		.1byte	0x0
 1658 011c 05          		.1byte	0x2
 1659 011d 00 00 00 00 		.4byte	.LASF63
 1660 011f 03          		.1byte	0x1
 1661 011f 05          		.1byte	0xb7
 1662 0120 00 00 00 00 		.4byte	0x21f
 1663 0122 04          		.1byte	0x6
 1664 0122 05          		.4byte	.LASF65
 1665 0123 00 00 00 00 		.1byte	0x20
 1666 0125 05          		.1byte	0x1
 1667 0125 05          		.1byte	0xbd
 1668 0126 00 00 00 00 		.4byte	0x2be
 1669 0128 06          		.1byte	0x7
 1670 0128 00          		.4byte	.LASF66
 1671 0129 02          		.1byte	0x1
 1672 0129 00 00 00 00 		.1byte	0xbf
 1673 012b 01          		.4byte	0x214
 1674 012c B7          		.1byte	0x2
 1675 012c 00 00 02 1F 		.1byte	0x23
 1676 012e 06          		.1byte	0x0
 1677 012f 00 00 00 00 		.1byte	0x7
 1678 0131 20          		.4byte	.LASF67
 1679 0131 01          		.1byte	0x1
 1680 0132 BD          		.1byte	0xc1
 1681 0132 00 00 02 BE 		.4byte	0x1ae
 1682 0134 07          		.1byte	0x2
 1683 0135 00 00 00 00 		.1byte	0x23
 1684 0137 01          		.1byte	0x1
 1685 0137 BF          		.1byte	0x7
 1686 0138 00 00 02 14 		.4byte	.LASF68
 1687 013a 02          		.1byte	0x1
 1688 013a 23          		.1byte	0xc3
 1689 013b 00          		.4byte	0x1ae
 1690 013b 07          		.1byte	0x2
 1691 013c 00 00 00 00 		.1byte	0x23
 1692 013e 01          		.1byte	0x2
 1693 013e C1          		.1byte	0x7
 1694 013f 00 00 01 AE 		.4byte	.LASF69
 1695 0141 02          		.1byte	0x1
 1696 0141 23          		.1byte	0xc5
 1697 0142 01          		.4byte	0x1a3
 1698 0142 07          		.1byte	0x2
 1699 0143 00 00 00 00 		.1byte	0x23
 1700 0145 01          		.1byte	0x3
 1701 0145 C3          		.1byte	0x7
 1702 0146 00 00 01 AE 		.4byte	.LASF70
 1703 0148 02          		.1byte	0x1
 1704 0148 23          		.1byte	0xc7
 1705 0149 02          		.4byte	0x1a3
 1706 0149 07          		.1byte	0x2
 1707 014a 00 00 00 00 		.1byte	0x23
 1708 014c 01          		.1byte	0x9
 1709 014c C5          		.1byte	0x7
 1710 014d 00 00 01 A3 		.4byte	.LASF71
 1711 014f 02          		.1byte	0x1
 1712 014f 23          		.1byte	0xc9
 1713 0150 03          		.4byte	0x1bf
 1714 0150 07          		.1byte	0x2
 1715 0151 00 00 00 00 		.1byte	0x23
 1716 0153 01          		.1byte	0xf
 1717 0153 C7          		.1byte	0x0
 1718 0154 00 00 01 A3 		.1byte	0x2
 1719 0156 02          		.4byte	.LASF72
 1720 0156 23          		.1byte	0x1
 1721 0157 09          		.1byte	0xca
 1722 0157 07          		.4byte	0x25d
 1723 0158 00 00 00 00 		.1byte	0xc
 1724 015a 01          		.4byte	.LASF87
 1725 015a C9          		.1byte	0x1
 1726 015b 00 00 01 BF 		.2byte	0x176
 1727 015d 02          		.1byte	0x1
 1728 015d 23          		.4byte	0x214
 1729 015e 0F          		.4byte	.LFB4
 1730 015e 00          		.4byte	.LFE4
 1731 015f 02          		.4byte	.LLST0
 1732 015f 00 00 00 00 		.4byte	0x307
 1733 0161 01          		.1byte	0xd
 1734 0162 CA          		.4byte	.LASF75
 1735 0162 00 00 02 5D 		.1byte	0x1
 1736 0164 0C          		.2byte	0x175
 1737 0165 00 00 00 00 		.4byte	0x252
 1738 0167 01          		.4byte	.LLST1
 1739 0167 01 76       		.1byte	0xe
 1740 0168 01          		.4byte	.LASF78
 1741 0169 00 00 02 14 		.1byte	0x1
 1742 016b 00 00 00 00 		.2byte	0x178
 1743 016d 00 00 00 00 		.4byte	0x214
 1744 016f 00 00 00 00 		.4byte	.LLST2
 1745 0171 00 00 03 07 		.1byte	0x0
 1746 0173 0D          		.1byte	0xf
 1747 0173 00 00 00 00 		.1byte	0x1
 1748 0175 01          		.4byte	.LASF73
 1749 0176 01 75       		.1byte	0x1
 1750 0177 00 00 02 52 		.2byte	0x358
 1751 0179 00 00 00 00 		.1byte	0x1
 1752 017b 0E          		.4byte	0x3b
 1753 017b 00 00 00 00 		.4byte	.LFB10
 1754 017d 01          		.4byte	.LFE10
 1755 017e 01 78       		.1byte	0x1
 1756 017f 00 00 02 14 		.1byte	0x55
 1757 0181 00 00 00 00 		.1byte	0xf
 1758 0183 00          		.1byte	0x1
 1759 0183 0F          		.4byte	.LASF74
 1760 0184 01          		.1byte	0x1
 1761 0184 00 00 00 00 		.2byte	0x341
 1762 0186 01          		.1byte	0x1
 1763 0187 03 58       		.4byte	0x3b
 1764 0188 01          		.4byte	.LFB9
 1765 0188 00 00 00 3B 		.4byte	.LFE9
 1766 018a 00 00 00 00 		.1byte	0x1
 1767 018c 00 00 00 00 		.1byte	0x55
 1768 018e 01          		.1byte	0x10
 1769 018f 55          		.4byte	.LASF100
 1770 018f 0F          		.1byte	0x1
 1771 0190 01          		.2byte	0x12c
 1772 0190 00 00 00 00 		.1byte	0x1
 1773 0192 01          		.4byte	.LFB3
 1774 0193 03 41       		.4byte	.LFE3
 1775 0194 01          		.1byte	0x1
 1776 0194 00 00 00 3B 		.1byte	0x55
 1777 0196 00 00 00 00 		.4byte	0x35f
 1778 0198 00 00 00 00 		.1byte	0xd
 1779 019a 01          		.4byte	.LASF76
 1780 019b 55          		.1byte	0x1
 1781 019b 10          		.2byte	0x12b
 1782 019c 00 00 00 00 		.4byte	0x69
 1783 019e 01          		.4byte	.LLST6
 1784 019e 01 2C       		.1byte	0x0
 1785 019f 01          		.1byte	0x11
 1786 01a0 00 00 00 00 		.1byte	0x1
 1787 01a2 00 00 00 00 		.4byte	.LASF85
 1788 01a4 01          		.1byte	0x1
 1789 01a4 55          		.2byte	0x3d7
 1790 01a5 00 00 03 5F 		.1byte	0x1
 1791 01a7 0D          		.4byte	.LFB13
 1792 01a7 00 00 00 00 		.4byte	.LFE13
 1793 01a9 01          		.4byte	.LLST7
 1794 01aa 01 2B       		.4byte	0x3e9
 1795 01ab 00 00 00 69 		.1byte	0xd
 1796 01ad 00 00 00 00 		.4byte	.LASF77
 1797 01af 00          		.1byte	0x1
 1798 01af 11          		.2byte	0x3d6
 1799 01b0 01          		.4byte	0x3e9
 1800 01b0 00 00 00 00 		.4byte	.LLST8
 1801 01b2 01          		.1byte	0x12
 1802 01b3 03 D7       		.4byte	.LASF101
 1803 01b4 01          		.1byte	0x1
 1804 01b4 00 00 00 00 		.2byte	0x3d9
 1805 01b6 00 00 00 00 		.4byte	0x3ef
 1806 01b8 00 00 00 00 		.1byte	0x13
 1807 01ba 00 00 03 E9 		.4byte	.LBB2
 1808 01bc 0D          		.4byte	.LBE2
 1809 01bd 00 00 00 00 		.1byte	0xe
 1810 01bf 01          		.4byte	.LASF79
 1811 01bf 03 D6       		.1byte	0x1
 1812 01c0 00 00 03 E9 		.2byte	0x3dd
 1813 01c2 00 00 00 00 		.4byte	0x214
 1814 01c4 12          		.4byte	.LLST9
 1815 01c5 00 00 00 00 		.1byte	0x13
 1816 01c7 01          		.4byte	.LBB3
 1817 01c7 03 D9       		.4byte	.LBE3
 1818 01c8 00 00 03 EF 		.1byte	0xe
 1819 01ca 13          		.4byte	.LASF80
 1820 01cb 00 00 00 00 		.1byte	0x1
 1821 01cd 00 00 00 00 		.2byte	0x3e4
 1822 01cf 0E          		.4byte	0x3b
 1823 01cf 00 00 00 00 		.4byte	.LLST10
 1824 01d1 01          		.1byte	0xe
 1825 01d2 03 DD       		.4byte	.LASF81
 1826 01d3 00 00 02 14 		.1byte	0x1
 1827 01d5 00 00 00 00 		.2byte	0x3e6
 1828 01d7 13          		.4byte	0x3b
 1829 01d7 00 00 00 00 		.4byte	.LLST11
 1830 01d9 00 00 00 00 		.1byte	0x14
 1831 01db 0E          		.4byte	.LASF82
 1832 01dc 00 00 00 00 		.1byte	0x1
 1833 01de 01          		.2byte	0x3e8
 1834 01de 03 E4       		.4byte	0x3b
 1835 01df 00 00 00 3B 		.1byte	0x2
 1836 01e1 00 00 00 00 		.1byte	0x76
 1837 01e3 0E          		.1byte	0x3
 1838 01e4 00 00 00 00 		.1byte	0x0
 1839 01e6 01          		.1byte	0x0
 1840 01e6 03 E6       		.1byte	0x0
 1841 01e7 00 00 00 3B 		.1byte	0x9
 1842 01e9 00 00 00 00 		.1byte	0x2
 1843 01eb 14          		.4byte	0x3b
 1844 01ec 00 00 00 00 		.1byte	0x15
 1845 01ee 01          		.4byte	0x3b
 1846 01ee 03 E8       		.1byte	0x16
 1847 01ef 00 00 00 3B 		.1byte	0x1
 1848 01f1 02          		.4byte	.LASF83
 1849 01f2 76          		.1byte	0x1
 1850 01f2 03          		.2byte	0x30c
 1851 01f3 00          		.1byte	0x1
 1852 01f3 00          		.4byte	0x69
 1853 01f4 00          		.4byte	.LFB8
 1854 01f4 09          		.4byte	.LFE8
 1855 01f5 02          		.4byte	.LLST12
 1856 01f5 00 00 00 3B 		.4byte	0x433
 1857 01f7 15          		.1byte	0xe
 1858 01f8 00 00 00 3B 		.4byte	.LASF78
 1859 01fa 16          		.1byte	0x1
 1860 01fa 01          		.2byte	0x30d
 1861 01fb 00 00 00 00 		.4byte	0x69
 1862 01fd 01          		.4byte	.LLST13
 1863 01fd 03 0C       		.1byte	0xe
 1864 01fe 01          		.4byte	.LASF79
 1865 01ff 00 00 00 69 		.1byte	0x1
 1866 0201 00 00 00 00 		.2byte	0x30e
 1867 0203 00 00 00 00 		.4byte	0x433
 1868 0205 00 00 00 00 		.4byte	.LLST14
 1869 0207 00 00 04 33 		.1byte	0x0
 1870 0209 0E          		.1byte	0x15
 1871 0209 00 00 00 00 		.4byte	0x214
 1872 020b 01          		.1byte	0x16
 1873 020c 03 0D       		.1byte	0x1
 1874 020d 00 00 00 69 		.4byte	.LASF84
 1875 020f 00 00 00 00 		.1byte	0x1
 1876 0211 0E          		.2byte	0x2b0
 1877 0211 00 00 00 00 		.1byte	0x1
 1878 0213 01          		.4byte	0x69
 1879 0214 03 0E       		.4byte	.LFB7
 1880 0215 00 00 04 33 		.4byte	.LFE7
 1881 0217 00 00 00 00 		.4byte	.LLST15
 1882 0219 00          		.4byte	0x48f
 1883 0219 15          		.1byte	0x14
 1884 021a 00 00 02 14 		.4byte	.LASF78
 1885 021c 16          		.1byte	0x1
 1886 021c 01          		.2byte	0x2b1
 1887 021d 00 00 00 00 		.4byte	0x69
 1888 021f 01          		.1byte	0x1
 1889 021f 02 B0       		.1byte	0x50
 1890 0220 01          		.1byte	0xe
 1891 0221 00 00 00 69 		.4byte	.LASF79
 1892 0223 00 00 00 00 		.1byte	0x1
 1893 0225 00 00 00 00 		.2byte	0x2b3
 1894 0227 00 00 00 00 		.4byte	0x214
 1895 0229 00 00 04 8F 		.4byte	.LLST16
 1896 022b 14          		.1byte	0x13
 1897 022b 00 00 00 00 		.4byte	.LBB4
 1898 022d 01          		.4byte	.LBE4
 1899 022e 02 B1       		.1byte	0xe
 1900 022f 00 00 00 69 		.4byte	.LASF80
 1901 0231 01          		.1byte	0x1
 1902 0231 50          		.2byte	0x2c4
 1903 0232 0E          		.4byte	0x3ef
 1904 0232 00 00 00 00 		.4byte	.LLST17
 1905 0234 01          		.1byte	0x0
 1906 0235 02 B3       		.1byte	0x0
 1907 0236 00 00 02 14 		.1byte	0x17
 1908 0238 00 00 00 00 		.1byte	0x1
 1909 023a 13          		.4byte	.LASF102
 1910 023a 00 00 00 00 		.1byte	0x1
 1911 023c 00 00 00 00 		.2byte	0x3ac
 1912 023e 0E          		.1byte	0x1
 1913 023f 00 00 00 00 		.4byte	.LFB12
 1914 0241 01          		.4byte	.LFE12
 1915 0241 02 C4       		.4byte	.LLST18
 1916 0242 00 00 03 EF 		.1byte	0x11
 1917 0244 00 00 00 00 		.1byte	0x1
 1918 0246 00          		.4byte	.LASF86
 1919 0247 00          		.1byte	0x1
 1920 0247 17          		.2byte	0x28d
 1921 0248 01          		.1byte	0x1
 1922 0248 00 00 00 00 		.4byte	.LFB6
 1923 024a 01          		.4byte	.LFE6
 1924 024b 03 AC       		.4byte	.LLST19
 1925 024c 01          		.4byte	0x4d0
 1926 024c 00 00 00 00 		.1byte	0xe
 1927 024e 00 00 00 00 		.4byte	.LASF79
 1928 0250 00 00 00 00 		.1byte	0x1
 1929 0252 11          		.2byte	0x28f
 1930 0253 01          		.4byte	0x433
 1931 0253 00 00 00 00 		.4byte	.LLST20
 1932 0255 01          		.1byte	0x0
 1933 0256 02 8D       		.1byte	0x18
 1934 0257 01          		.4byte	.LASF88
 1935 0257 00 00 00 00 		.1byte	0x1
 1936 0259 00 00 00 00 		.1byte	0xf5
 1937 025b 00 00 00 00 		.1byte	0x1
 1938 025d 00 00 04 D0 		.4byte	0x69
 1939 025f 0E          		.4byte	.LFB2
 1940 0260 00 00 00 00 		.4byte	.LFE2
 1941 0262 01          		.4byte	.LLST21
 1942 0262 02 8F       		.4byte	0x50b
 1943 0263 00 00 04 33 		.1byte	0x19
 1944 0265 00 00 00 00 		.4byte	.LASF89
 1945 0267 00          		.1byte	0x1
 1946 0268 18          		.1byte	0xf4
 1947 0268 00 00 00 00 		.4byte	0x29
 1948 026a 01          		.4byte	.LLST22
 1949 026b F5          		.1byte	0x1a
 1950 026b 01          		.4byte	.LASF78
 1951 026c 00 00 00 69 		.1byte	0x1
 1952 026e 00 00 00 00 		.1byte	0xf6
 1953 0270 00 00 00 00 		.4byte	0x69
 1954 0272 00 00 00 00 		.4byte	.LLST23
 1955 0274 00 00 05 0B 		.1byte	0x0
 1956 0276 19          		.1byte	0x16
 1957 0276 00 00 00 00 		.1byte	0x1
 1958 0278 01          		.4byte	.LASF90
 1959 0279 F4          		.1byte	0x1
 1960 0279 00 00 00 29 		.2byte	0x374
 1961 027b 00 00 00 00 		.1byte	0x1
 1962 027d 1A          		.4byte	0x69
 1963 027e 00 00 00 00 		.4byte	.LFB11
 1964 0280 01          		.4byte	.LFE11
 1965 0280 F6          		.4byte	.LLST24
 1966 0281 00 00 00 69 		.4byte	0x55a
 1967 0283 00 00 00 00 		.1byte	0xd
 1968 0285 00          		.4byte	.LASF89
 1969 0285 16          		.1byte	0x1
 1970 0286 01          		.2byte	0x373
 1971 0286 00 00 00 00 		.4byte	0x29
 1972 0288 01          		.4byte	.LLST25
 1973 0289 03 74       		.1byte	0xe
 1974 028a 01          		.4byte	.LASF78
 1975 028a 00 00 00 69 		.1byte	0x1
 1976 028c 00 00 00 00 		.2byte	0x375
 1977 028e 00 00 00 00 		.4byte	0x69
 1978 0290 00 00 00 00 		.4byte	.LLST26
 1979 0292 00 00 05 5A 		.1byte	0xe
 1980 0294 0D          		.4byte	.LASF79
 1981 0295 00 00 00 00 		.1byte	0x1
 1982 0297 01          		.2byte	0x376
 1983 0297 03 73       		.4byte	0x433
 1984 0298 00 00 00 29 		.4byte	.LLST27
 1985 029a 00 00 00 00 		.1byte	0x0
 1986 029c 0E          		.1byte	0x16
 1987 029d 00 00 00 00 		.1byte	0x1
 1988 029f 01          		.4byte	.LASF91
 1989 029f 03 75       		.1byte	0x1
 1990 02a0 00 00 00 69 		.2byte	0x246
 1991 02a2 00 00 00 00 		.1byte	0x1
 1992 02a4 0E          		.4byte	0x69
 1993 02a5 00 00 00 00 		.4byte	.LFB5
 1994 02a7 01          		.4byte	.LFE5
 1995 02a7 03 76       		.4byte	.LLST28
 1996 02a8 00 00 04 33 		.4byte	0x5e7
 1997 02aa 00 00 00 00 		.1byte	0xd
 1998 02ac 00          		.4byte	.LASF92
 1999 02ad 16          		.1byte	0x1
 2000 02ad 01          		.2byte	0x240
 2001 02ae 00 00 00 00 		.4byte	0x3e9
 2002 02b0 01          		.4byte	.LLST29
 2003 02b0 02 46       		.1byte	0xd
 2004 02b1 01          		.4byte	.LASF93
 2005 02b2 00 00 00 69 		.1byte	0x1
 2006 02b4 00 00 00 00 		.2byte	0x241
 2007 02b6 00 00 00 00 		.4byte	0x1bf
 2008 02b8 00 00 00 00 		.4byte	.LLST30
 2009 02ba 00 00 05 E7 		.1byte	0xd
 2010 02bc 0D          		.4byte	.LASF94
 2011 02bc 00 00 00 00 		.1byte	0x1
 2012 02be 01          		.2byte	0x242
 2013 02bf 02 40       		.4byte	0x1ae
 2014 02c0 00 00 03 E9 		.4byte	.LLST31
 2015 02c2 00 00 00 00 		.1byte	0xd
 2016 02c4 0D          		.4byte	.LASF95
 2017 02c4 00 00 00 00 		.1byte	0x1
 2018 02c6 01          		.2byte	0x243
 2019 02c7 02 41       		.4byte	0x1ae
 2020 02c8 00 00 01 BF 		.4byte	.LLST32
 2021 02ca 00 00 00 00 		.1byte	0x1b
 2022 02cc 0D          		.4byte	.LASF89
 2023 02cc 00 00 00 00 		.1byte	0x1
 2024 02ce 01          		.2byte	0x244
 2025 02cf 02 42       		.4byte	0x29
 2026 02d0 00 00 01 AE 		.1byte	0x2
 2027 02d2 00 00 00 00 		.1byte	0x91
 2028 02d4 0D          		.1byte	0x2
 2029 02d4 00 00 00 00 		.1byte	0x1b
 2030 02d6 01          		.4byte	.LASF96
 2031 02d7 02 43       		.1byte	0x1
 2032 02d8 00 00 01 AE 		.2byte	0x245
 2033 02da 00 00 00 00 		.4byte	0x29
 2034 02dc 1B          		.1byte	0x2
 2035 02dc 00 00 00 00 		.1byte	0x91
 2036 02de 01          		.1byte	0x3
 2037 02df 02 44       		.1byte	0xe
 2038 02e0 00 00 00 29 		.4byte	.LASF78
 2039 02e2 02          		.1byte	0x1
 2040 02e2 91          		.2byte	0x248
 2041 02e3 02          		.4byte	0x69
 2042 02e3 1B          		.4byte	.LLST33
 2043 02e4 00 00 00 00 		.1byte	0x0
 2044 02e6 01          		.1byte	0x1c
 2045 02e6 02 45       		.4byte	.LASF66
 2046 02e7 00 00 00 29 		.1byte	0x1
 2047 02e9 02          		.1byte	0xd1
 2048 02ea 91          		.4byte	0x2be
 2049 02ea 03          		.1byte	0x5
 2050 02eb 0E          		.1byte	0x3
 2051 02eb 00 00 00 00 		.4byte	state
 2052 02ed 01          		.1byte	0x0
 2053 02ee 02 48       		.section	.debug_abbrev
 2054 02ef 00 00 00 69 		.1byte	0x1
 2055 02f1 00 00 00 00 		.1byte	0x11
 2056 02f3 00          		.1byte	0x1
 2057 02f3 1C          		.1byte	0x25
 2058 02f4 00 00 00 00 		.1byte	0xe
 2059 02f6 01          		.1byte	0x13
 2060 02f6 D1          		.1byte	0xb
 2061 02f7 00 00 02 BE 		.1byte	0x3
 2062 02f9 05          		.1byte	0xe
 2063 02f9 03          		.1byte	0x1b
 2064 02fa 00 00 00 00 		.1byte	0xe
 2065 02fc 00          		.1byte	0x11
 2066                 		.1byte	0x1
 2067 0000 01          		.1byte	0x52
 2068 0000 11          		.1byte	0x1
 2069 0001 01          		.1byte	0x55
 2070 0001 25          		.1byte	0x6
 2071 0002 0E          		.1byte	0x10
 2072 0002 13          		.1byte	0x6
 2073 0003 0B          		.1byte	0x0
 2074 0003 03          		.1byte	0x0
 2075 0004 0E          		.1byte	0x2
 2076 0004 1B          		.1byte	0x16
 2077 0005 0E          		.1byte	0x0
 2078 0005 11          		.1byte	0x3
 2079 0006 01          		.1byte	0xe
 2080 0006 52          		.1byte	0x3a
 2081 0007 01          		.1byte	0xb
 2082 0007 55          		.1byte	0x3b
 2083 0008 06          		.1byte	0xb
 2084 0008 10          		.1byte	0x49
 2085 0009 06          		.1byte	0x13
 2086 0009 00          		.1byte	0x0
 2087 000a 00          		.1byte	0x0
 2088 000a 02          		.1byte	0x3
 2089 000b 16          		.1byte	0x24
 2090 000b 00          		.1byte	0x0
 2091 000c 03          		.1byte	0xb
 2092 000c 0E          		.1byte	0xb
 2093 000d 3A          		.1byte	0x3e
 2094 000d 0B          		.1byte	0xb
 2095 000e 3B          		.1byte	0x3
 2096 000e 0B          		.1byte	0xe
 2097 000f 49          		.1byte	0x0
 2098 000f 13          		.1byte	0x0
 2099 0010 00          		.1byte	0x4
 2100 0010 00          		.1byte	0x4
 2101 0011 03          		.1byte	0x1
 2102 0011 24          		.1byte	0xb
 2103 0012 00          		.1byte	0xb
 2104 0012 0B          		.1byte	0x3a
 2105 0013 0B          		.1byte	0xb
 2106 0013 3E          		.1byte	0x3b
 2107 0014 0B          		.1byte	0xb
 2108 0014 03          		.1byte	0x1
 2109 0015 0E          		.1byte	0x13
 2110 0015 00          		.1byte	0x0
 2111 0016 00          		.1byte	0x0
 2112 0016 04          		.1byte	0x5
 2113 0017 04          		.1byte	0x28
 2114 0017 01          		.1byte	0x0
 2115 0018 0B          		.1byte	0x3
 2116 0018 0B          		.1byte	0xe
 2117 0019 3A          		.1byte	0x1c
 2118 0019 0B          		.1byte	0xd
 2119 001a 3B          		.1byte	0x0
 2120 001a 0B          		.1byte	0x0
 2121 001b 01          		.1byte	0x6
 2122 001b 13          		.1byte	0x13
 2123 001c 00          		.1byte	0x1
 2124 001c 00          		.1byte	0x3
 2125 001d 05          		.1byte	0xe
 2126 001d 28          		.1byte	0xb
 2127 001e 00          		.1byte	0xb
 2128 001e 03          		.1byte	0x3a
 2129 001f 0E          		.1byte	0xb
 2130 001f 1C          		.1byte	0x3b
 2131 0020 0D          		.1byte	0xb
 2132 0020 00          		.1byte	0x1
 2133 0021 00          		.1byte	0x13
 2134 0021 06          		.1byte	0x0
 2135 0022 13          		.1byte	0x0
 2136 0022 01          		.1byte	0x7
 2137 0023 03          		.1byte	0xd
 2138 0023 0E          		.1byte	0x0
 2139 0024 0B          		.1byte	0x3
 2140 0024 0B          		.1byte	0xe
 2141 0025 3A          		.1byte	0x3a
 2142 0025 0B          		.1byte	0xb
 2143 0026 3B          		.1byte	0x3b
 2144 0026 0B          		.1byte	0xb
 2145 0027 01          		.1byte	0x49
 2146 0027 13          		.1byte	0x13
 2147 0028 00          		.1byte	0x38
 2148 0028 00          		.1byte	0xa
 2149 0029 07          		.1byte	0x0
 2150 0029 0D          		.1byte	0x0
 2151 002a 00          		.1byte	0x8
 2152 002a 03          		.1byte	0xf
 2153 002b 0E          		.1byte	0x0
 2154 002b 3A          		.1byte	0xb
 2155 002c 0B          		.1byte	0xb
 2156 002c 3B          		.1byte	0x0
 2157 002d 0B          		.1byte	0x0
 2158 002d 49          		.1byte	0x9
 2159 002e 13          		.1byte	0xf
 2160 002e 38          		.1byte	0x0
 2161 002f 0A          		.1byte	0xb
 2162 002f 00          		.1byte	0xb
 2163 0030 00          		.1byte	0x49
 2164 0030 08          		.1byte	0x13
 2165 0031 0F          		.1byte	0x0
 2166 0031 00          		.1byte	0x0
 2167 0032 0B          		.1byte	0xa
 2168 0032 0B          		.1byte	0x15
 2169 0033 00          		.1byte	0x1
 2170 0033 00          		.1byte	0x27
 2171 0034 09          		.1byte	0xc
 2172 0034 0F          		.1byte	0x1
 2173 0035 00          		.1byte	0x13
 2174 0035 0B          		.1byte	0x0
 2175 0036 0B          		.1byte	0x0
 2176 0036 49          		.1byte	0xb
 2177 0037 13          		.1byte	0x5
 2178 0037 00          		.1byte	0x0
 2179 0038 00          		.1byte	0x49
 2180 0038 0A          		.1byte	0x13
 2181 0039 15          		.1byte	0x0
 2182 0039 01          		.1byte	0x0
 2183 003a 27          		.1byte	0xc
 2184 003a 0C          		.1byte	0x2e
 2185 003b 01          		.1byte	0x1
 2186 003b 13          		.1byte	0x3
 2187 003c 00          		.1byte	0xe
 2188 003c 00          		.1byte	0x3a
 2189 003d 0B          		.1byte	0xb
 2190 003d 05          		.1byte	0x3b
 2191 003e 00          		.1byte	0x5
 2192 003e 49          		.1byte	0x27
 2193 003f 13          		.1byte	0xc
 2194 003f 00          		.1byte	0x49
 2195 0040 00          		.1byte	0x13
 2196 0040 0C          		.1byte	0x11
 2197 0041 2E          		.1byte	0x1
 2198 0041 01          		.1byte	0x12
 2199 0042 03          		.1byte	0x1
 2200 0042 0E          		.1byte	0x40
 2201 0043 3A          		.1byte	0x6
 2202 0043 0B          		.1byte	0x1
 2203 0044 3B          		.1byte	0x13
 2204 0044 05          		.1byte	0x0
 2205 0045 27          		.1byte	0x0
 2206 0045 0C          		.1byte	0xd
 2207 0046 49          		.1byte	0x5
 2208 0046 13          		.1byte	0x0
 2209 0047 11          		.1byte	0x3
 2210 0047 01          		.1byte	0xe
 2211 0048 12          		.1byte	0x3a
 2212 0048 01          		.1byte	0xb
 2213 0049 40          		.1byte	0x3b
 2214 0049 06          		.1byte	0x5
 2215 004a 01          		.1byte	0x49
 2216 004a 13          		.1byte	0x13
 2217 004b 00          		.1byte	0x2
 2218 004b 00          		.1byte	0x6
 2219 004c 0D          		.1byte	0x0
 2220 004c 05          		.1byte	0x0
 2221 004d 00          		.1byte	0xe
 2222 004d 03          		.1byte	0x34
 2223 004e 0E          		.1byte	0x0
 2224 004e 3A          		.1byte	0x3
 2225 004f 0B          		.1byte	0xe
 2226 004f 3B          		.1byte	0x3a
 2227 0050 05          		.1byte	0xb
 2228 0050 49          		.1byte	0x3b
 2229 0051 13          		.1byte	0x5
 2230 0051 02          		.1byte	0x49
 2231 0052 06          		.1byte	0x13
 2232 0052 00          		.1byte	0x2
 2233 0053 00          		.1byte	0x6
 2234 0053 0E          		.1byte	0x0
 2235 0054 34          		.1byte	0x0
 2236 0054 00          		.1byte	0xf
 2237 0055 03          		.1byte	0x2e
 2238 0055 0E          		.1byte	0x0
 2239 0056 3A          		.1byte	0x3f
 2240 0056 0B          		.1byte	0xc
 2241 0057 3B          		.1byte	0x3
 2242 0057 05          		.1byte	0xe
 2243 0058 49          		.1byte	0x3a
 2244 0058 13          		.1byte	0xb
 2245 0059 02          		.1byte	0x3b
 2246 0059 06          		.1byte	0x5
 2247 005a 00          		.1byte	0x27
 2248 005a 00          		.1byte	0xc
 2249 005b 0F          		.1byte	0x49
 2250 005b 2E          		.1byte	0x13
 2251 005c 00          		.1byte	0x11
 2252 005c 3F          		.1byte	0x1
 2253 005d 0C          		.1byte	0x12
 2254 005d 03          		.1byte	0x1
 2255 005e 0E          		.1byte	0x40
 2256 005e 3A          		.1byte	0xa
 2257 005f 0B          		.1byte	0x0
 2258 005f 3B          		.1byte	0x0
 2259 0060 05          		.1byte	0x10
 2260 0060 27          		.1byte	0x2e
 2261 0061 0C          		.1byte	0x1
 2262 0061 49          		.1byte	0x3
 2263 0062 13          		.1byte	0xe
 2264 0062 11          		.1byte	0x3a
 2265 0063 01          		.1byte	0xb
 2266 0063 12          		.1byte	0x3b
 2267 0064 01          		.1byte	0x5
 2268 0064 40          		.1byte	0x27
 2269 0065 0A          		.1byte	0xc
 2270 0065 00          		.1byte	0x11
 2271 0066 00          		.1byte	0x1
 2272 0066 10          		.1byte	0x12
 2273 0067 2E          		.1byte	0x1
 2274 0067 01          		.1byte	0x40
 2275 0068 03          		.1byte	0xa
 2276 0068 0E          		.1byte	0x1
 2277 0069 3A          		.1byte	0x13
 2278 0069 0B          		.1byte	0x0
 2279 006a 3B          		.1byte	0x0
 2280 006a 05          		.1byte	0x11
 2281 006b 27          		.1byte	0x2e
 2282 006b 0C          		.1byte	0x1
 2283 006c 11          		.1byte	0x3f
 2284 006c 01          		.1byte	0xc
 2285 006d 12          		.1byte	0x3
 2286 006d 01          		.1byte	0xe
 2287 006e 40          		.1byte	0x3a
 2288 006e 0A          		.1byte	0xb
 2289 006f 01          		.1byte	0x3b
 2290 006f 13          		.1byte	0x5
 2291 0070 00          		.1byte	0x27
 2292 0070 00          		.1byte	0xc
 2293 0071 11          		.1byte	0x11
 2294 0071 2E          		.1byte	0x1
 2295 0072 01          		.1byte	0x12
 2296 0072 3F          		.1byte	0x1
 2297 0073 0C          		.1byte	0x40
 2298 0073 03          		.1byte	0x6
 2299 0074 0E          		.1byte	0x1
 2300 0074 3A          		.1byte	0x13
 2301 0075 0B          		.1byte	0x0
 2302 0075 3B          		.1byte	0x0
 2303 0076 05          		.1byte	0x12
 2304 0076 27          		.1byte	0x34
 2305 0077 0C          		.1byte	0x0
 2306 0077 11          		.1byte	0x3
 2307 0078 01          		.1byte	0xe
 2308 0078 12          		.1byte	0x3a
 2309 0079 01          		.1byte	0xb
 2310 0079 40          		.1byte	0x3b
 2311 007a 06          		.1byte	0x5
 2312 007a 01          		.1byte	0x49
 2313 007b 13          		.1byte	0x13
 2314 007b 00          		.1byte	0x0
 2315 007c 00          		.1byte	0x0
 2316 007c 12          		.1byte	0x13
 2317 007d 34          		.1byte	0xb
 2318 007d 00          		.1byte	0x1
 2319 007e 03          		.1byte	0x11
 2320 007e 0E          		.1byte	0x1
 2321 007f 3A          		.1byte	0x12
 2322 007f 0B          		.1byte	0x1
 2323 0080 3B          		.1byte	0x0
 2324 0080 05          		.1byte	0x0
 2325 0081 49          		.1byte	0x14
 2326 0081 13          		.1byte	0x34
 2327 0082 00          		.1byte	0x0
 2328 0082 00          		.1byte	0x3
 2329 0083 13          		.1byte	0xe
 2330 0083 0B          		.1byte	0x3a
 2331 0084 01          		.1byte	0xb
 2332 0084 11          		.1byte	0x3b
 2333 0085 01          		.1byte	0x5
 2334 0085 12          		.1byte	0x49
 2335 0086 01          		.1byte	0x13
 2336 0086 00          		.1byte	0x2
 2337 0087 00          		.1byte	0xa
 2338 0087 14          		.1byte	0x0
 2339 0088 34          		.1byte	0x0
 2340 0088 00          		.1byte	0x15
 2341 0089 03          		.1byte	0x26
 2342 0089 0E          		.1byte	0x0
 2343 008a 3A          		.1byte	0x49
 2344 008a 0B          		.1byte	0x13
 2345 008b 3B          		.1byte	0x0
 2346 008b 05          		.1byte	0x0
 2347 008c 49          		.1byte	0x16
 2348 008c 13          		.1byte	0x2e
 2349 008d 02          		.1byte	0x1
 2350 008d 0A          		.1byte	0x3f
 2351 008e 00          		.1byte	0xc
 2352 008e 00          		.1byte	0x3
 2353 008f 15          		.1byte	0xe
 2354 008f 26          		.1byte	0x3a
 2355 0090 00          		.1byte	0xb
 2356 0090 49          		.1byte	0x3b
 2357 0091 13          		.1byte	0x5
 2358 0091 00          		.1byte	0x27
 2359 0092 00          		.1byte	0xc
 2360 0092 16          		.1byte	0x49
 2361 0093 2E          		.1byte	0x13
 2362 0093 01          		.1byte	0x11
 2363 0094 3F          		.1byte	0x1
 2364 0094 0C          		.1byte	0x12
 2365 0095 03          		.1byte	0x1
 2366 0095 0E          		.1byte	0x40
 2367 0096 3A          		.1byte	0x6
 2368 0096 0B          		.1byte	0x1
 2369 0097 3B          		.1byte	0x13
 2370 0097 05          		.1byte	0x0
 2371 0098 27          		.1byte	0x0
 2372 0098 0C          		.1byte	0x17
 2373 0099 49          		.1byte	0x2e
 2374 0099 13          		.1byte	0x0
 2375 009a 11          		.1byte	0x3f
 2376 009a 01          		.1byte	0xc
 2377 009b 12          		.1byte	0x3
 2378 009b 01          		.1byte	0xe
 2379 009c 40          		.1byte	0x3a
 2380 009c 06          		.1byte	0xb
 2381 009d 01          		.1byte	0x3b
 2382 009d 13          		.1byte	0x5
 2383 009e 00          		.1byte	0x27
 2384 009e 00          		.1byte	0xc
 2385 009f 17          		.1byte	0x11
 2386 009f 2E          		.1byte	0x1
 2387 00a0 00          		.1byte	0x12
 2388 00a0 3F          		.1byte	0x1
 2389 00a1 0C          		.1byte	0x40
 2390 00a1 03          		.1byte	0x6
 2391 00a2 0E          		.1byte	0x0
 2392 00a2 3A          		.1byte	0x0
 2393 00a3 0B          		.1byte	0x18
 2394 00a3 3B          		.1byte	0x2e
 2395 00a4 05          		.1byte	0x1
 2396 00a4 27          		.1byte	0x3
 2397 00a5 0C          		.1byte	0xe
 2398 00a5 11          		.1byte	0x3a
 2399 00a6 01          		.1byte	0xb
 2400 00a6 12          		.1byte	0x3b
 2401 00a7 01          		.1byte	0xb
 2402 00a7 40          		.1byte	0x27
 2403 00a8 06          		.1byte	0xc
 2404 00a8 00          		.1byte	0x49
 2405 00a9 00          		.1byte	0x13
 2406 00a9 18          		.1byte	0x11
 2407 00aa 2E          		.1byte	0x1
 2408 00aa 01          		.1byte	0x12
 2409 00ab 03          		.1byte	0x1
 2410 00ab 0E          		.1byte	0x40
 2411 00ac 3A          		.1byte	0x6
 2412 00ac 0B          		.1byte	0x1
 2413 00ad 3B          		.1byte	0x13
 2414 00ad 0B          		.1byte	0x0
 2415 00ae 27          		.1byte	0x0
 2416 00ae 0C          		.1byte	0x19
 2417 00af 49          		.1byte	0x5
 2418 00af 13          		.1byte	0x0
 2419 00b0 11          		.1byte	0x3
 2420 00b0 01          		.1byte	0xe
 2421 00b1 12          		.1byte	0x3a
 2422 00b1 01          		.1byte	0xb
 2423 00b2 40          		.1byte	0x3b
 2424 00b2 06          		.1byte	0xb
 2425 00b3 01          		.1byte	0x49
 2426 00b3 13          		.1byte	0x13
 2427 00b4 00          		.1byte	0x2
 2428 00b4 00          		.1byte	0x6
 2429 00b5 19          		.1byte	0x0
 2430 00b5 05          		.1byte	0x0
 2431 00b6 00          		.1byte	0x1a
 2432 00b6 03          		.1byte	0x34
 2433 00b7 0E          		.1byte	0x0
 2434 00b7 3A          		.1byte	0x3
 2435 00b8 0B          		.1byte	0xe
 2436 00b8 3B          		.1byte	0x3a
 2437 00b9 0B          		.1byte	0xb
 2438 00b9 49          		.1byte	0x3b
 2439 00ba 13          		.1byte	0xb
 2440 00ba 02          		.1byte	0x49
 2441 00bb 06          		.1byte	0x13
 2442 00bb 00          		.1byte	0x2
 2443 00bc 00          		.1byte	0x6
 2444 00bc 1A          		.1byte	0x0
 2445 00bd 34          		.1byte	0x0
 2446 00bd 00          		.1byte	0x1b
 2447 00be 03          		.1byte	0x5
 2448 00be 0E          		.1byte	0x0
 2449 00bf 3A          		.1byte	0x3
 2450 00bf 0B          		.1byte	0xe
 2451 00c0 3B          		.1byte	0x3a
 2452 00c0 0B          		.1byte	0xb
 2453 00c1 49          		.1byte	0x3b
 2454 00c1 13          		.1byte	0x5
 2455 00c2 02          		.1byte	0x49
 2456 00c2 06          		.1byte	0x13
 2457 00c3 00          		.1byte	0x2
 2458 00c3 00          		.1byte	0xa
 2459 00c4 1B          		.1byte	0x0
 2460 00c4 05          		.1byte	0x0
 2461 00c5 00          		.1byte	0x1c
 2462 00c5 03          		.1byte	0x34
 2463 00c6 0E          		.1byte	0x0
 2464 00c6 3A          		.1byte	0x3
 2465 00c7 0B          		.1byte	0xe
 2466 00c7 3B          		.1byte	0x3a
 2467 00c8 05          		.1byte	0xb
 2468 00c8 49          		.1byte	0x3b
 2469 00c9 13          		.1byte	0xb
 2470 00c9 02          		.1byte	0x49
 2471 00ca 0A          		.1byte	0x13
 2472 00ca 00          		.1byte	0x2
 2473 00cb 00          		.1byte	0xa
 2474 00cb 1C          		.1byte	0x0
 2475 00cc 34          		.1byte	0x0
 2476 00cc 00          		.1byte	0x0
 2477 00cd 03          		.section	.debug_pubnames,"",@progbits
 2478 00cd 0E          		.4byte	0x103
 2479 00ce 3A          		.2byte	0x2
 2480 00ce 0B          		.4byte	.Ldebug_info0
 2481 00cf 3B          		.4byte	0x5f9
 2482 00cf 0B          		.4byte	0x307
 2483 00d0 49          		.ascii "SpiMasterGetSharedRAMRxDataSize\000"
 2484 00d0 13          		.4byte	0x31f
 2485 00d1 02          		.ascii "SpiMasterGetSharedRAMTxDataSize\000"
 2486 00d1 0A          		.4byte	0x35f
 2487 00d2 00          		.ascii "SpiMasterProcessPioControllerEvent\000"
 2488 00d2 00          		.4byte	0x3f4
 2489 00d3 00          		.ascii "SpiMasterEndTransaction\000"
 2490                 		.4byte	0x438
 2491 0000 00 00 01 03 		.ascii "SpiMasterStartTransaction\000"
 2492 0002 00 02       		.4byte	0x48f
 2493 0003 00 00 00 00 		.ascii "SpiMasterDeinit\000"
 2494 0005 00 00 05 F9 		.4byte	0x4a5
 2495 0007 00 00 03 07 		.ascii "SpiMasterStart\000"
 2496 0009 53 70 69 4D 		.4byte	0x50b
 2496      61 73 74 65 
 2496      72 47 65 74 
 2496      53 68 61 72 
 2496      65 64 52 41 
 2497 0019 00 00 03 1F 		.ascii "SpiMasterReset\000"
 2498 001b 53 70 69 4D 		.4byte	0x55a
 2498      61 73 74 65 
 2498      72 47 65 74 
 2498      53 68 61 72 
 2498      65 64 52 41 
 2499 002b 00 00 03 5F 		.ascii "SpiMasterInit\000"
 2500 002d 53 70 69 4D 		.4byte	0x0
 2500      61 73 74 65 
 2500      72 50 72 6F 
 2500      63 65 73 73 
 2500      50 69 6F 43 
 2501 003e 00 00 03 F4 		.section	.debug_aranges,"",@progbits
 2502 0040 53 70 69 4D 		.4byte	0x74
 2502      61 73 74 65 
 2502      72 45 6E 64 
 2502      54 72 61 6E 
 2502      73 61 63 74 
 2503 004c 00 00 04 38 		.2byte	0x2
 2504 004e 53 70 69 4D 		.4byte	.Ldebug_info0
 2504      61 73 74 65 
 2504      72 53 74 61 
 2504      72 74 54 72 
 2504      61 6E 73 61 
 2505 005b 00 00 04 8F 		.1byte	0x4
 2506 005d 53 70 69 4D 		.1byte	0x0
 2506      61 73 74 65 
 2506      72 44 65 69 
 2506      6E 69 74 00 
 2507 0065 00 00 04 A5 		.2byte	0x0
 2508 0067 53 70 69 4D 		.2byte	0x0
 2508      61 73 74 65 
 2508      72 53 74 61 
 2508      72 74 00 
 2509 006f 00 00 05 0B 		.4byte	.LFB4
 2510 0071 53 70 69 4D 		.4byte	.LFE4-.LFB4
 2510      61 73 74 65 
 2510      72 52 65 73 
 2510      65 74 00 
 2511 0078 00 00 05 5A 		.4byte	.LFB10
 2512 007a 53 70 69 4D 		.4byte	.LFE10-.LFB10
 2512      61 73 74 65 
 2512      72 49 6E 69 
 2512      74 00 
 2513 0081 00 00 00 00 		.4byte	.LFB9
 2514                 		.4byte	.LFE9-.LFB9
 2515 0000 00 00 00 74 		.4byte	.LFB3
 2516 0002 00 02       		.4byte	.LFE3-.LFB3
 2517 0003 00 00 00 00 		.4byte	.LFB13
 2518 0005 04          		.4byte	.LFE13-.LFB13
 2519 0005 00          		.4byte	.LFB8
 2520 0006 00 00       		.4byte	.LFE8-.LFB8
 2521 0007 00 00       		.4byte	.LFB7
 2522 0008 00 00 00 00 		.4byte	.LFE7-.LFB7
 2523 000a 00 00 00 00 		.4byte	.LFB12
 2524 000c 00 00 00 00 		.4byte	.LFE12-.LFB12
 2525 000e 00 00 00 00 		.4byte	.LFB6
 2526 0010 00 00 00 00 		.4byte	.LFE6-.LFB6
 2527 0012 00 00 00 00 		.4byte	.LFB2
 2528 0014 00 00 00 00 		.4byte	.LFE2-.LFB2
 2529 0016 00 00 00 00 		.4byte	.LFB11
 2530 0018 00 00 00 00 		.4byte	.LFE11-.LFB11
 2531 001a 00 00 00 00 		.4byte	.LFB5
 2532 001c 00 00 00 00 		.4byte	.LFE5-.LFB5
 2533 001e 00 00 00 00 		.4byte	0x0
 2534 0020 00 00 00 00 		.4byte	0x0
 2535 0022 00 00 00 00 		.section	.debug_ranges,"",@progbits
 2536 0024 00 00 00 00 	.Ldebug_ranges0:
 2537 0026 00 00 00 00 		.4byte	.Ltext0
 2538 0028 00 00 00 00 		.4byte	.Letext0
 2539 002a 00 00 00 00 		.4byte	.LFB4
 2540 002c 00 00 00 00 		.4byte	.LFE4
 2541 002e 00 00 00 00 		.4byte	.LFB10
 2542 0030 00 00 00 00 		.4byte	.LFE10
 2543 0032 00 00 00 00 		.4byte	.LFB9
 2544 0034 00 00 00 00 		.4byte	.LFE9
 2545 0036 00 00 00 00 		.4byte	.LFB3
 2546 0038 00 00 00 00 		.4byte	.LFE3
 2547 003a 00 00 00 00 		.4byte	.LFB13
 2548                 		.4byte	.LFE13
 2549                 		.4byte	.LFB8
 2550 0000 00 00 00 00 		.4byte	.LFE8
 2551 0002 00 00 00 00 		.4byte	.LFB7
 2552 0004 00 00 00 00 		.4byte	.LFE7
 2553 0006 00 00 00 00 		.4byte	.LFB12
 2554 0008 00 00 00 00 		.4byte	.LFE12
 2555 000a 00 00 00 00 		.4byte	.LFB6
 2556 000c 00 00 00 00 		.4byte	.LFE6
 2557 000e 00 00 00 00 		.4byte	.LFB2
 2558 0010 00 00 00 00 		.4byte	.LFE2
 2559 0012 00 00 00 00 		.4byte	.LFB11
 2560 0014 00 00 00 00 		.4byte	.LFE11
 2561 0016 00 00 00 00 		.4byte	.LFB5
 2562 0018 00 00 00 00 		.4byte	.LFE5
 2563 001a 00 00 00 00 		.4byte	0x0
 2564 001c 00 00 00 00 		.4byte	0x0
 2565 001e 00 00 00 00 		.section	.debug_str,"MS",@progbits,1
 2566 0020 00 00 00 00 	.LASF40:
 2567 0022 00 00 00 00 		.ascii "capacity\000"
 2568 0024 00 00 00 00 	.LASF1:
 2569 0026 00 00 00 00 		.ascii "uint16\000"
 2570 0028 00 00 00 00 	.LASF88:
 2571 002a 00 00 00 00 		.ascii "setupSharedRAM\000"
 2572 002c 00 00 00 00 	.LASF62:
 2573 002e 00 00 00 00 		.ascii "TransactionEvent_Reset\000"
 2574 0030 00 00 00 00 	.LASF68:
 2575 0032 00 00 00 00 		.ascii "p_rx_data\000"
 2576 0034 00 00 00 00 	.LASF53:
 2577 0036 00 00 00 00 		.ascii "TransactionState_WaitingForPioControllerToDeassert\000"
 2578                 	.LASF12:
 2579                 		.ascii "pio_mode_clk_req\000"
 2580 0000 63 61 70 61 	.LASF37:
 2580      63 69 74 79 
 2580      00 
 2581                 		.ascii "OQDataMode_INVALID\000"
 2582 0004 75 69 6E 74 	.LASF67:
 2582      31 36 00 
 2583                 		.ascii "p_tx_data\000"
 2584 0008 73 65 74 75 	.LASF57:
 2584      70 53 68 61 
 2584      72 65 64 52 
 2584      41 4D 00 
 2585                 		.ascii "TransactionEvent_AssertSSEL\000"
 2586 000f 54 72 61 6E 	.LASF54:
 2586      73 61 63 74 
 2586      69 6F 6E 45 
 2586      76 65 6E 74 
 2586      5F 52 65 73 
 2587                 		.ascii "TransactionState_Invalid\000"
 2588 001b 70 5F 72 78 	.LASF85:
 2588      5F 64 61 74 
 2588      61 00 
 2589                 		.ascii "SpiMasterProcessPioControllerEvent\000"
 2590 0020 54 72 61 6E 	.LASF21:
 2590      73 61 63 74 
 2590      69 6F 6E 53 
 2590      74 61 74 65 
 2590      5F 57 61 69 
 2591                 		.ascii "pio_mode_uart\000"
 2592 0039 70 69 6F 5F 	.LASF95:
 2592      6D 6F 64 65 
 2592      5F 63 6C 6B 
 2592      5F 72 65 71 
 2592      00 
 2593                 		.ascii "p_rx_data_buffer\000"
 2594 0042 4F 51 44 61 	.LASF100:
 2594      74 61 4D 6F 
 2594      64 65 5F 49 
 2594      4E 56 41 4C 
 2594      49 44 00 
 2595                 		.ascii "setSSEL\000"
 2596 004b 70 5F 74 78 	.LASF10:
 2596      5F 64 61 74 
 2596      61 00 
 2597                 		.ascii "pio_mode_user\000"
 2598 0050 54 72 61 6E 	.LASF102:
 2598      73 61 63 74 
 2598      69 6F 6E 45 
 2598      76 65 6E 74 
 2598      5F 41 73 73 
 2599                 		.ascii "SpiMasterDeinit\000"
 2600 005e 54 72 61 6E 	.LASF35:
 2600      73 61 63 74 
 2600      69 6F 6E 53 
 2600      74 61 74 65 
 2600      5F 49 6E 76 
 2601                 		.ascii "OQDataMode_unpacked\000"
 2602 006b 53 70 69 4D 	.LASF11:
 2602      61 73 74 65 
 2602      72 50 72 6F 
 2602      63 65 73 73 
 2602      50 69 6F 43 
 2603                 		.ascii "pio_mode_edge_capture\000"
 2604 007c 70 69 6F 5F 	.LASF55:
 2604      6D 6F 64 65 
 2604      5F 75 61 72 
 2604      74 00 
 2605                 		.ascii "TransactionState\000"
 2606 0083 70 5F 72 78 	.LASF5:
 2606      5F 64 61 74 
 2606      61 5F 62 75 
 2606      66 66 65 72 
 2606      00 
 2607                 		.ascii "signed char\000"
 2608 008c 73 65 74 53 	.LASF87:
 2608      53 45 4C 00 
 2609                 		.ascii "processEvent\000"
 2610 0090 70 69 6F 5F 	.LASF30:
 2610      6D 6F 64 65 
 2610      5F 75 73 65 
 2610      72 00 
 2611                 		.ascii "pio_mode_i2c_data\000"
 2612 0097 53 70 69 4D 	.LASF84:
 2612      61 73 74 65 
 2612      72 44 65 69 
 2612      6E 69 74 00 
 2613                 		.ascii "SpiMasterStartTransaction\000"
 2614 009f 4F 51 44 61 	.LASF43:
 2614      74 61 4D 6F 
 2614      64 65 5F 75 
 2614      6E 70 61 63 
 2614      6B 65 64 00 
 2615                 		.ascii "empty\000"
 2616 00a9 70 69 6F 5F 	.LASF66:
 2616      6D 6F 64 65 
 2616      5F 65 64 67 
 2616      65 5F 63 61 
 2616      70 74 75 72 
 2617                 		.ascii "state\000"
 2618 00b4 54 72 61 6E 	.LASF7:
 2618      73 61 63 74 
 2618      69 6F 6E 53 
 2618      74 61 74 65 
 2618      00 
 2619                 		.ascii "long int\000"
 2620 00bc 73 69 67 6E 	.LASF0:
 2620      65 64 20 63 
 2620      68 61 72 00 
 2621                 		.ascii "uint8\000"
 2622 00c2 70 72 6F 63 	.LASF97:
 2622      65 73 73 45 
 2622      76 65 6E 74 
 2622      00 
 2623                 		.ascii "GNU C 4.3.4 CSR version 22 for xap [1468380]\000"
 2624 00c9 70 69 6F 5F 	.LASF42:
 2624      6D 6F 64 65 
 2624      5F 69 32 63 
 2624      5F 64 61 74 
 2624      61 00 
 2625                 		.ascii "boundary\000"
 2626 00d2 53 70 69 4D 	.LASF73:
 2626      61 73 74 65 
 2626      72 53 74 61 
 2626      72 74 54 72 
 2626      61 6E 73 61 
 2627                 		.ascii "SpiMasterGetSharedRAMRxDataSize\000"
 2628 00df 65 6D 70 74 	.LASF74:
 2628      79 00 
 2629                 		.ascii "SpiMasterGetSharedRAMTxDataSize\000"
 2630 00e2 73 74 61 74 	.LASF36:
 2630      65 00 
 2631                 		.ascii "OQDataMode_packed\000"
 2632 00e5 6C 6F 6E 67 	.LASF9:
 2632      20 69 6E 74 
 2632      00 
 2633                 		.ascii "unsigned int\000"
 2634 00e9 75 69 6E 74 	.LASF99:
 2634      38 00 
 2635                 		.ascii "D:\\SVN\\Prj01051MigrosEtiketRepo\\trunk\\05_DetailedDesignProcess\\01_DetailedDesignDocum
 2636 00ec 47 4E 55 20 	.LASF4:
 2636      43 20 34 2E 
 2636      33 2E 34 20 
 2636      43 53 52 20 
 2636      76 65 72 73 
 2637                 		.ascii "long unsigned int\000"
 2638 0103 62 6F 75 6E 	.LASF61:
 2638      64 61 72 79 
 2638      00 
 2639                 		.ascii "TransactionEvent_PIOControllerEvent\000"
 2640 0107 53 70 69 4D 	.LASF75:
 2640      61 73 74 65 
 2640      72 47 65 74 
 2640      53 68 61 72 
 2640      65 64 52 41 
 2641                 		.ascii "event\000"
 2642 0117 53 70 69 4D 	.LASF3:
 2642      61 73 74 65 
 2642      72 47 65 74 
 2642      53 68 61 72 
 2642      65 64 52 41 
 2643                 		.ascii "short unsigned int\000"
 2644 0127 4F 51 44 61 	.LASF69:
 2644      74 61 4D 6F 
 2644      64 65 5F 70 
 2644      61 63 6B 65 
 2644      64 00 
 2645                 		.ascii "pio_rx_data\000"
 2646 0130 75 6E 73 69 	.LASF71:
 2646      67 6E 65 64 
 2646      20 69 6E 74 
 2646      00 
 2647                 		.ascii "p_data_cb_func\000"
 2648 0137 44 3A 5C 53 	.LASF93:
 2648      56 4E 5C 50 
 2648      72 6A 30 31 
 2648      30 35 31 4D 
 2648      69 67 72 6F 
 2649                 		.ascii "p_data_callback\000"
 2650 0186 6C 6F 6E 67 	.LASF70:
 2650      20 75 6E 73 
 2650      69 67 6E 65 
 2650      64 20 69 6E 
 2650      74 00 
 2651                 		.ascii "pio_tx_data\000"
 2652 018f 54 72 61 6E 	.LASF8:
 2652      73 61 63 74 
 2652      69 6F 6E 45 
 2652      76 65 6E 74 
 2652      5F 50 49 4F 
 2653                 		.ascii "bool\000"
 2654 01a1 65 76 65 6E 	.LASF83:
 2654      74 00 
 2655                 		.ascii "SpiMasterEndTransaction\000"
 2656 01a4 73 68 6F 72 	.LASF38:
 2656      74 20 75 6E 
 2656      73 69 67 6E 
 2656      65 64 20 69 
 2656      6E 74 00 
 2657                 		.ascii "OQDataMode\000"
 2658 01ae 70 69 6F 5F 	.LASF33:
 2658      72 78 5F 64 
 2658      61 74 61 00 
 2659                 		.ascii "pio_mode_pio_control_timer\000"
 2660 01b4 70 5F 64 61 	.LASF48:
 2660      74 61 5F 63 
 2660      62 5F 66 75 
 2660      6E 63 00 
 2661                 		.ascii "TransactionState_Initialised\000"
 2662 01bb 70 5F 64 61 	.LASF52:
 2662      74 61 5F 63 
 2662      61 6C 6C 62 
 2662      61 63 6B 00 
 2663                 		.ascii "TransactionState_WaitingForPioController\000"
 2664 01c3 70 69 6F 5F 	.LASF60:
 2664      74 78 5F 64 
 2664      61 74 61 00 
 2665                 		.ascii "TransactionEvent_PIOControllerUnblockedButNoData\000"
 2666 01c9 62 6F 6F 6C 	.LASF86:
 2666      00 
 2667                 		.ascii "SpiMasterStart\000"
 2668 01cc 53 70 69 4D 	.LASF17:
 2668      61 73 74 65 
 2668      72 45 6E 64 
 2668      54 72 61 6E 
 2668      73 61 63 74 
 2669                 		.ascii "pio_mode_quadrature0\000"
 2670 01d8 4F 51 44 61 	.LASF18:
 2670      74 61 4D 6F 
 2670      64 65 00 
 2671                 		.ascii "pio_mode_quadrature1\000"
 2672 01dd 70 69 6F 5F 	.LASF19:
 2672      6D 6F 64 65 
 2672      5F 70 69 6F 
 2672      5F 63 6F 6E 
 2672      74 72 6F 6C 
 2673                 		.ascii "pio_mode_quadrature2\000"
 2674 01eb 54 72 61 6E 	.LASF20:
 2674      73 61 63 74 
 2674      69 6F 6E 53 
 2674      74 61 74 65 
 2674      5F 49 6E 69 
 2675                 		.ascii "pio_mode_quadrature3\000"
 2676 01f9 54 72 61 6E 	.LASF92:
 2676      73 61 63 74 
 2676      69 6F 6E 53 
 2676      74 61 74 65 
 2676      5F 57 61 69 
 2677                 		.ascii "p_pio_controller_code_addr\000"
 2678 020e 54 72 61 6E 	.LASF45:
 2678      73 61 63 74 
 2678      69 6F 6E 45 
 2678      76 65 6E 74 
 2678      5F 50 49 4F 
 2679                 		.ascii "OQ_HANDLE_T\000"
 2680 0226 53 70 69 4D 	.LASF39:
 2680      61 73 74 65 
 2680      72 53 74 61 
 2680      72 74 00 
 2681                 		.ascii "p_buffer\000"
 2682 022e 70 69 6F 5F 	.LASF79:
 2682      6D 6F 64 65 
 2682      5F 71 75 61 
 2682      64 72 61 74 
 2682      75 72 65 30 
 2683                 		.ascii "newState\000"
 2684 0238 70 69 6F 5F 	.LASF24:
 2684      6D 6F 64 65 
 2684      5F 71 75 61 
 2684      64 72 61 74 
 2684      75 72 65 31 
 2685                 		.ascii "pio_mode_nvm_power_en\000"
 2686 0243 70 69 6F 5F 	.LASF26:
 2686      6D 6F 64 65 
 2686      5F 71 75 61 
 2686      64 72 61 74 
 2686      75 72 65 32 
 2687                 		.ascii "pio_mode_pio_control_txd\000"
 2688 024d 70 69 6F 5F 	.LASF94:
 2688      6D 6F 64 65 
 2688      5F 71 75 61 
 2688      64 72 61 74 
 2688      75 72 65 33 
 2689                 		.ascii "p_tx_data_buffer\000"
 2690 0258 70 5F 70 69 	.LASF90:
 2690      6F 5F 63 6F 
 2690      6E 74 72 6F 
 2690      6C 6C 65 72 
 2690      5F 63 6F 64 
 2691                 		.ascii "SpiMasterReset\000"
 2692 0265 4F 51 5F 48 	.LASF25:
 2692      41 4E 44 4C 
 2692      45 5F 54 00 
 2693                 		.ascii "pio_mode_pio_controller\000"
 2694 026b 70 5F 62 75 	.LASF76:
 2694      66 66 65 72 
 2694      00 
 2695                 		.ascii "assert\000"
 2696 0270 6E 65 77 53 	.LASF82:
 2696      74 61 74 65 
 2696      00 
 2697                 		.ascii "pio_rx_data_size\000"
 2698 0274 70 69 6F 5F 	.LASF22:
 2698      6D 6F 64 65 
 2698      5F 6E 76 6D 
 2698      5F 70 6F 77 
 2698      65 72 5F 65 
 2699                 		.ascii "pio_mode_radio_rx_en\000"
 2700 027f 70 69 6F 5F 	.LASF65:
 2700      6D 6F 64 65 
 2700      5F 70 69 6F 
 2700      5F 63 6F 6E 
 2700      74 72 6F 6C 
 2701                 		.ascii "_SPI_MASTER_STATE_T\000"
 2702 028c 70 5F 74 78 	.LASF63:
 2702      5F 64 61 74 
 2702      61 5F 62 75 
 2702      66 66 65 72 
 2702      00 
 2703                 		.ascii "TransactionEvent\000"
 2704 0294 53 70 69 4D 	.LASF2:
 2704      61 73 74 65 
 2704      72 52 65 73 
 2704      65 74 00 
 2705                 		.ascii "unsigned char\000"
 2706 029c 70 69 6F 5F 	.LASF98:
 2706      6D 6F 64 65 
 2706      5F 70 69 6F 
 2706      5F 63 6F 6E 
 2706      74 72 6F 6C 
 2707                 		.ascii "spi_master.c\000"
 2708 02a8 61 73 73 65 	.LASF6:
 2708      72 74 00 
 2709                 		.ascii "short int\000"
 2710 02ab 70 69 6F 5F 	.LASF59:
 2710      72 78 5F 64 
 2710      61 74 61 5F 
 2710      73 69 7A 65 
 2710      00 
 2711                 		.ascii "TransactionEvent_PIOControllerUnblockedWithDataToSend\000"
 2712 02b4 70 69 6F 5F 	.LASF78:
 2712      6D 6F 64 65 
 2712      5F 72 61 64 
 2712      69 6F 5F 72 
 2712      78 5F 65 6E 
 2713                 		.ascii "ret_val\000"
 2714 02be 5F 53 50 49 	.LASF32:
 2714      5F 4D 41 53 
 2714      54 45 52 5F 
 2714      53 54 41 54 
 2714      45 5F 54 00 
 2715                 		.ascii "pio_mode_uart_flow_ctrl\000"
 2716 02c8 54 72 61 6E 	.LASF89:
 2716      73 61 63 74 
 2716      69 6F 6E 45 
 2716      76 65 6E 74 
 2716      00 
 2717                 		.ascii "tx_buffer_fill\000"
 2718 02d1 75 6E 73 69 	.LASF101:
 2718      67 6E 65 64 
 2718      20 63 68 61 
 2718      72 00 
 2719                 		.ascii "valid_interrupt\000"
 2720 02d8 73 70 69 5F 	.LASF46:
 2720      6D 61 73 74 
 2720      65 72 2E 63 
 2720      00 
 2721                 		.ascii "OQ_HANDLE\000"
 2722 02de 73 68 6F 72 	.LASF80:
 2722      74 20 69 6E 
 2722      74 00 
 2723                 		.ascii "transfer_size\000"
 2724 02e3 54 72 61 6E 	.LASF44:
 2724      73 61 63 74 
 2724      69 6F 6E 45 
 2724      76 65 6E 74 
 2724      5F 50 49 4F 
 2725                 		.ascii "mode\000"
 2726 02fe 72 65 74 5F 	.LASF31:
 2726      76 61 6C 00 
 2727                 		.ascii "pio_mode_i2c_clock\000"
 2728 0302 70 69 6F 5F 	.LASF58:
 2728      6D 6F 64 65 
 2728      5F 75 61 72 
 2728      74 5F 66 6C 
 2728      6F 77 5F 63 
 2729                 		.ascii "TransactionEvent_DeassertSSEL\000"
 2730 030e 74 78 5F 62 	.LASF34:
 2730      75 66 66 65 
 2730      72 5F 66 69 
 2730      6C 6C 00 
 2731                 		.ascii "pio_mode_ana_mon_clk_pio\000"
 2732 0316 76 61 6C 69 	.LASF72:
 2732      64 5F 69 6E 
 2732      74 65 72 72 
 2732      75 70 74 00 
 2733                 		.ascii "SPI_MASTER_STATE_T\000"
 2734 031e 4F 51 5F 48 	.LASF23:
 2734      41 4E 44 4C 
 2734      45 00 
 2735                 		.ascii "pio_mode_radio_tx_en\000"
 2736 0323 74 72 61 6E 	.LASF64:
 2736      73 66 65 72 
 2736      5F 73 69 7A 
 2736      65 00 
 2737                 		.ascii "_OQ_HANDLE_T\000"
 2738 032a 6D 6F 64 65 	.LASF91:
 2738      00 
 2739                 		.ascii "SpiMasterInit\000"
 2740 032c 70 69 6F 5F 	.LASF13:
 2740      6D 6F 64 65 
 2740      5F 69 32 63 
 2740      5F 63 6C 6F 
 2740      63 6B 00 
 2741                 		.ascii "pio_mode_pwm0\000"
 2742 0336 54 72 61 6E 	.LASF14:
 2742      73 61 63 74 
 2742      69 6F 6E 45 
 2742      76 65 6E 74 
 2742      5F 44 65 61 
 2743                 		.ascii "pio_mode_pwm1\000"
 2744 0345 70 69 6F 5F 	.LASF15:
 2744      6D 6F 64 65 
 2744      5F 61 6E 61 
 2744      5F 6D 6F 6E 
 2744      5F 63 6C 6B 
 2745                 		.ascii "pio_mode_pwm2\000"
 2746 0351 53 50 49 5F 	.LASF16:
 2746      4D 41 53 54 
 2746      45 52 5F 53 
 2746      54 41 54 45 
 2746      5F 54 00 
 2747                 		.ascii "pio_mode_pwm3\000"
 2748 035b 70 69 6F 5F 	.LASF47:
 2748      6D 6F 64 65 
 2748      5F 72 61 64 
 2748      69 6F 5F 74 
 2748      78 5F 65 6E 
 2749                 		.ascii "SpiMasterTransactionCallbackType\000"
 2750 0365 5F 4F 51 5F 	.LASF51:
 2750      48 41 4E 44 
 2750      4C 45 5F 54 
 2750      00 
 2751                 		.ascii "TransactionState_PioControllerOnHold\000"
 2752 036c 53 70 69 4D 	.LASF81:
 2752      61 73 74 65 
 2752      72 49 6E 69 
 2752      74 00 
 2753                 		.ascii "pio_tx_data_size\000"
 2754 0373 70 69 6F 5F 	.LASF50:
 2754      6D 6F 64 65 
 2754      5F 70 77 6D 
 2754      30 00 
 2755                 		.ascii "TransactionState_TransactionStarted\000"
 2756 037a 70 69 6F 5F 	.LASF27:
 2756      6D 6F 64 65 
 2756      5F 70 77 6D 
 2756      31 00 
 2757                 		.ascii "pio_mode_pio_control_rxd\000"
 2758 0381 70 69 6F 5F 	.LASF29:
 2758      6D 6F 64 65 
 2758      5F 70 77 6D 
 2758      32 00 
 2759                 		.ascii "pio_mode_ser_flash_csb\000"
 2760 0388 70 69 6F 5F 	.LASF77:
 2760      6D 6F 64 65 
 2760      5F 70 77 6D 
 2760      33 00 
 2761                 		.ascii "p_data\000"
 2762 038f 53 70 69 4D 	.LASF56:
 2762      61 73 74 65 
 2762      72 54 72 61 
 2762      6E 73 61 63 
 2762      74 69 6F 6E 
 2763                 		.ascii "TransactionEvent_PIOControllerStart\000"
 2764 039f 54 72 61 6E 	.LASF28:
 2764      73 61 63 74 
 2764      69 6F 6E 53 
 2764      74 61 74 65 
 2764      5F 50 69 6F 
 2765                 		.ascii "pio_mode_ser_flash_dout\000"
 2766 03b2 70 69 6F 5F 	.LASF41:
 2766      74 78 5F 64 
 2766      61 74 61 5F 
 2766      73 69 7A 65 
 2766      00 
 2767                 		.ascii "start\000"
 2768 03ba 54 72 61 6E 	.LASF96:
 2768      73 61 63 74 
 2768      69 6F 6E 53 
 2768      74 61 74 65 
 2768      5F 54 72 61 
 2769                 		.ascii "inter_octet_delay\000"
 2770 03cc 70 69 6F 5F 	.LASF49:
 2770      6D 6F 64 65 
 2770      5F 70 69 6F 
 2770      5F 63 6F 6E 
 2770      74 72 6F 6C 
 2771                 		.ascii "TransactionState_PIOControllerReady\000"
 2772 03d9 70 69 6F 5F 		.ident	"GCC: (GNU) 4.3.4 CSR version 22 for xap [1468380]"
 2772      6D 6F 64 65 
 2772      5F 73 65 72 
 2772      5F 66 6C 61 
 2772      73 68 5F 63 
 2773                 	...
