   1                 		.file	"octet_queue.c"
   2                 		.variant xap2+
   3                 	
   4                 		.small
   5                 	
   6                 		.section	.debug_abbrev,"",@progbits
   7                 	.Ldebug_abbrev0:
   8                 		.section	.debug_info,"",@progbits
   9                 	.Ldebug_info0:
  10                 		.section	.debug_line,"",@progbits
  11                 	.Ldebug_line0:
  12 0000 00 00 00 00 		.text
  12      00 02 00 00 
  12      00 00 01 01 
  12      FB 0E 0D 00 
  12      01 01 01 01 
  13                 	.Ltext0:
  14                 		.section	.text.OQCreate,"ax",@progbits
  15                 		.global	OQCreate
  16                 		.type	OQCreate, @function
  17                 	OQCreate:
  18                 	.LFB4:
  19                 		.file 1 "octet_queue.c"
   0:octet_queue.c **** /******************************************************************************
   1:octet_queue.c ****  *  Copyright Cambridge Silicon Radio Limited 2013-2015
   2:octet_queue.c ****  *  Part of CSR uEnergy SDK 2.4.4
   3:octet_queue.c ****  *  Application version 2.4.4.0
   4:octet_queue.c ****  *
   5:octet_queue.c ****  *  FILE
   6:octet_queue.c ****  *      octet_queue.c
   7:octet_queue.c ****  *
   8:octet_queue.c ****  *  DESCRIPTION
   9:octet_queue.c ****  *      Circular buffer implementation using packed and unpacked arrays
  10:octet_queue.c ****  *
  11:octet_queue.c ****  ******************************************************************************/
  12:octet_queue.c **** 
  13:octet_queue.c **** /*============================================================================*
  14:octet_queue.c ****  *  SDK Header Files
  15:octet_queue.c ****  *============================================================================*/
  16:octet_queue.c **** 
  17:octet_queue.c **** #include <mem.h>            /* Memory library */
  18:octet_queue.c **** 
  19:octet_queue.c **** /*============================================================================*
  20:octet_queue.c ****  *  Local Header Files
  21:octet_queue.c ****  *============================================================================*/
  22:octet_queue.c **** 
  23:octet_queue.c **** #include "octet_queue.h"    /* Interface to this source file */
  24:octet_queue.c **** 
  25:octet_queue.c **** /*============================================================================*
  26:octet_queue.c ****  *  Private Definitions
  27:octet_queue.c ****  *============================================================================*/
  28:octet_queue.c **** 
  29:octet_queue.c **** /*----------------------------------------------------------------------------*
  30:octet_queue.c ****  *  NAME
  31:octet_queue.c ****  *      FILL_BUFFER
  32:octet_queue.c ****  *
  33:octet_queue.c ****  *  DESCRIPTION
  34:octet_queue.c ****  *      Fill a buffer with a fill octet.
  35:octet_queue.c ****  *
  36:octet_queue.c ****  *  PARAMETERS
  37:octet_queue.c ****  *      buffer [in]             Buffer to fill
  38:octet_queue.c ****  *      octet [in]              Octet to fill buffer with. The octet in the LSB
  39:octet_queue.c ****  *                              of the 16-bit word will be used
  40:octet_queue.c ****  *      size [in]               Number of elements to fill. For a packed buffer
  41:octet_queue.c ****  *                              this is the number of uint16's, for an unpacked
  42:octet_queue.c ****  *                              unpacked buffer this is the number of uint8's
  43:octet_queue.c ****  *
  44:octet_queue.c ****  *  RETURNS
  45:octet_queue.c ****  *      Original pointer to the destination buffer
  46:octet_queue.c ****  *----------------------------------------------------------------------------*/
  47:octet_queue.c **** #define FILL_BUFFER(buffer, octet, size) \
  48:octet_queue.c ****     MemSet(buffer, ((uint16)(octet) << 8) | ((octet) & 0x00ff), size)
  49:octet_queue.c **** 
  50:octet_queue.c **** /*============================================================================*
  51:octet_queue.c ****  *  Private Function Prototypes
  52:octet_queue.c ****  *============================================================================*/
  53:octet_queue.c **** 
  54:octet_queue.c **** /* Store data in the queue */
  55:octet_queue.c **** static uint16 queueData(OQ_HANDLE   handle,
  56:octet_queue.c ****                         const void *p_data,
  57:octet_queue.c ****                         uint16      data_size_in_octets,
  58:octet_queue.c ****                         bool        src_starts_at_odd_octet,
  59:octet_queue.c ****                         OQDataMode  src_data_mode);
  60:octet_queue.c **** 
  61:octet_queue.c **** /* Extract data from the queue */
  62:octet_queue.c **** static uint16 popData(OQ_HANDLE  handle,
  63:octet_queue.c ****                       void      *p_data,
  64:octet_queue.c ****                       uint16     data_size_in_octets);
  65:octet_queue.c **** 
  66:octet_queue.c **** /*============================================================================*
  67:octet_queue.c ****  *  Private Function Implementations
  68:octet_queue.c ****  *============================================================================*/
  69:octet_queue.c **** 
  70:octet_queue.c **** /*----------------------------------------------------------------------------*
  71:octet_queue.c ****  *  NAME
  72:octet_queue.c ****  *      queueData
  73:octet_queue.c ****  *
  74:octet_queue.c ****  *  DESCRIPTION
  75:octet_queue.c ****  *      Queue data into octet queue.
  76:octet_queue.c ****  *
  77:octet_queue.c ****  *  PARAMETERS
  78:octet_queue.c ****  *      handle [in]             Handle to the octet queue into which data is to
  79:octet_queue.c ****  *                              be queued
  80:octet_queue.c ****  *      p_data [in]             Pointer to the source buffer holding data to be
  81:octet_queue.c ****  *                              queued. Size of each element of the buffer
  82:octet_queue.c ****  *                              depends on the source buffer data mode.
  83:octet_queue.c ****  *      data_size_in_octets [in]
  84:octet_queue.c ****  *                              The number of octets to be queued.
  85:octet_queue.c ****  *      src_starts_at_odd_octet [in] 
  86:octet_queue.c ****  *                              Start from odd octet when copying from the
  87:octet_queue.c ****  *                              source buffer. This parameter is only applicable
  88:octet_queue.c ****  *                              in packed mode.
  89:octet_queue.c ****  *      src_data_mode [in]      Data mode that the source buffer uses.
  90:octet_queue.c ****  *
  91:octet_queue.c ****  *  RETURNS
  92:octet_queue.c ****  *      Number of octets of data actually buffered
  93:octet_queue.c ****  *----------------------------------------------------------------------------*/
  94:octet_queue.c **** static uint16 queueData(OQ_HANDLE   handle,
  95:octet_queue.c ****                         const void *p_data,
  96:octet_queue.c ****                         uint16      data_size_in_octets,
  97:octet_queue.c ****                         bool        src_starts_at_odd_octet,
  98:octet_queue.c ****                         OQDataMode  src_data_mode)
  99:octet_queue.c **** {
 100:octet_queue.c ****     /* Available space in the queue, in octets */
 101:octet_queue.c ****     /* (This will be 0 if handle is invalid) */
 102:octet_queue.c ****     const uint16 space = OQSpace(handle);
 103:octet_queue.c ****     
 104:octet_queue.c ****     /* Number of octets of data that can be queued */
 105:octet_queue.c ****     const uint16 octets_queued = MIN(space, data_size_in_octets);
 106:octet_queue.c ****     
 107:octet_queue.c ****     /* Number of octets of data remaining to be queued */
 108:octet_queue.c ****     uint16 data_to_be_queued = octets_queued;
 109:octet_queue.c ****     
 110:octet_queue.c ****     /* If there is no space to queue more data return now */
 111:octet_queue.c ****     if (data_to_be_queued == 0)
 112:octet_queue.c ****         return 0;
 113:octet_queue.c ****     
 114:octet_queue.c ****     if ((handle->mode == OQDataMode_packed) &&
 115:octet_queue.c ****         (src_data_mode == OQDataMode_packed))
 116:octet_queue.c ****     {
 117:octet_queue.c ****         /* Pointer into source buffer */
 118:octet_queue.c ****         const uint16 *in = (const uint16 *)p_data;
 119:octet_queue.c ****         /* Pointer into destination buffer */
 120:octet_queue.c ****         uint16 *out = (uint16 *)handle->p_buffer + handle->boundary/2;
 121:octet_queue.c ****         /* Flag to indicate whether source octet is from MSB or LSB */
 122:octet_queue.c ****         bool in_msb = src_starts_at_odd_octet;
 123:octet_queue.c ****         /* Flag to indicate whether destination octet is from MSB or LSB */
 124:octet_queue.c ****         bool out_msb = handle->boundary & 0x1;
 125:octet_queue.c ****     
 126:octet_queue.c ****         /* If the source and destination buffers are not similarly aligned */
 127:octet_queue.c ****         if (in_msb != out_msb)
 128:octet_queue.c ****         {
 129:octet_queue.c ****             /* Copy each octet from source to destination one by one */
 130:octet_queue.c ****             do
 131:octet_queue.c ****             {
 132:octet_queue.c ****                 uint16 src_octet;       /* Octet to copy */
 133:octet_queue.c ****             
 134:octet_queue.c ****                 /* Read octet from source */
 135:octet_queue.c ****                 if (in_msb)
 136:octet_queue.c ****                 {
 137:octet_queue.c ****                     src_octet = (*in & 0xff00) >> 8;
 138:octet_queue.c ****                     in++;   /* Move the input pointer to the next word */
 139:octet_queue.c ****                 }
 140:octet_queue.c ****                 else
 141:octet_queue.c ****                 {
 142:octet_queue.c ****                     src_octet = *in & 0x00ff;
 143:octet_queue.c ****                 }
 144:octet_queue.c ****             
 145:octet_queue.c ****                 /* Write octet to destination */
 146:octet_queue.c ****                 if (out_msb)
 147:octet_queue.c ****                 {
 148:octet_queue.c ****                     *out = (*out & 0x00ff) | (src_octet << 8);
 149:octet_queue.c ****                     out++;  /* Move the output pointer to the next word */
 150:octet_queue.c ****                 }
 151:octet_queue.c ****                 else
 152:octet_queue.c ****                 {
 153:octet_queue.c ****                     *out = (*out & 0xff00) | src_octet;
 154:octet_queue.c ****                 }
 155:octet_queue.c **** 
 156:octet_queue.c ****                 /* Toggle MSB flags */
 157:octet_queue.c ****                 in_msb = !in_msb;
 158:octet_queue.c ****                 out_msb = !out_msb;
 159:octet_queue.c ****                     
 160:octet_queue.c ****                 /* The above could be optimised given that if in_msb is true,
 161:octet_queue.c ****                  * then out_msb must be false, and vice versa. In fact we do
 162:octet_queue.c ****                  * not need out_msb at all.
 163:octet_queue.c ****                  * It has been left un-optimised to improve readability.
 164:octet_queue.c ****                  */
 165:octet_queue.c ****                     
 166:octet_queue.c ****                 /* Decrement number of octets to be queued */
 167:octet_queue.c ****                 data_to_be_queued--;
 168:octet_queue.c **** 
 169:octet_queue.c ****                 /* Advance queue boundary and wrap round if end of buffer
 170:octet_queue.c ****                  * reached.
 171:octet_queue.c ****                  */
 172:octet_queue.c ****                 if (++handle->boundary == OQCapacity(handle))
 173:octet_queue.c ****                 {
 174:octet_queue.c ****                     out = (uint16 *)handle->p_buffer;
 175:octet_queue.c ****                     handle->boundary = 0;
 176:octet_queue.c ****                 }
 177:octet_queue.c ****             } while (data_to_be_queued > 0);
 178:octet_queue.c ****         }
 179:octet_queue.c ****         else /* in_msb == out_msb */
 180:octet_queue.c ****         {
 181:octet_queue.c ****             /* How many octets will fit in the remaining buffer */
 182:octet_queue.c ****             uint16 remaining;
 183:octet_queue.c **** 
 184:octet_queue.c ****             /* If the buffers are aligned on the MSB copy the first octet
 185:octet_queue.c ****              * separately (because MemCopy only works on whole words).
 186:octet_queue.c ****              */
 187:octet_queue.c ****             if (in_msb)
 188:octet_queue.c ****             {
 189:octet_queue.c ****                 /* Copy the octet from the source to the destination */
 190:octet_queue.c ****                 *out = (*out & 0x00ff) | (*in & 0xff00);
 191:octet_queue.c ****             
 192:octet_queue.c ****                 /* Decrement number of octets to be queued */
 193:octet_queue.c ****                 data_to_be_queued--;
 194:octet_queue.c ****             
 195:octet_queue.c ****                 /* Advance buffer pointers */
 196:octet_queue.c ****                 in++;
 197:octet_queue.c ****                 out++;
 198:octet_queue.c ****             
 199:octet_queue.c ****                 /* Advance queue boundary */
 200:octet_queue.c ****                 handle->boundary++;
 201:octet_queue.c ****             }
 202:octet_queue.c ****                 
 203:octet_queue.c ****             /* Check whether the buffer will wrap round */
 204:octet_queue.c ****             remaining = OQCapacity(handle) - handle->boundary;
 205:octet_queue.c ****             if (data_to_be_queued >= remaining)
 206:octet_queue.c ****             {
 207:octet_queue.c ****                 /* Copy the data from source to destination */
 208:octet_queue.c ****                 MemCopy(out, in, remaining/2);
 209:octet_queue.c ****                     
 210:octet_queue.c ****                 /* Decrement the number of octets remaining to be copied */
 211:octet_queue.c ****                 data_to_be_queued -= remaining;
 212:octet_queue.c ****                     
 213:octet_queue.c ****                 /* Advance the input pointer */
 214:octet_queue.c ****                 in += remaining/2;
 215:octet_queue.c ****             
 216:octet_queue.c ****                 /* Reset the output pointer */
 217:octet_queue.c ****                 out = (uint16 *)handle->p_buffer;
 218:octet_queue.c ****             
 219:octet_queue.c ****                 /* Reset the queue boundary */
 220:octet_queue.c ****                 handle->boundary = 0;
 221:octet_queue.c ****             }
 222:octet_queue.c ****         
 223:octet_queue.c ****             /* Copy from source to destination */
 224:octet_queue.c ****             MemCopy(out, in, data_to_be_queued/2);
 225:octet_queue.c ****         
 226:octet_queue.c ****             /* If there is an odd octet left over */
 227:octet_queue.c ****             if (data_to_be_queued & 0x1)
 228:octet_queue.c ****             {
 229:octet_queue.c ****                 /* Advance buffer pointers */
 230:octet_queue.c ****                 in += data_to_be_queued/2;
 231:octet_queue.c ****                 out += data_to_be_queued/2;
 232:octet_queue.c ****             
 233:octet_queue.c ****                 /* Copy the octet into the LSB leaving the MSB unaltered */
 234:octet_queue.c ****                 *out = (*out & 0xff00) | (*in & 0x00ff);
 235:octet_queue.c ****             }
 236:octet_queue.c ****                 
 237:octet_queue.c ****             /* Advance queue boundary */
 238:octet_queue.c ****             handle->boundary += data_to_be_queued;
 239:octet_queue.c ****         }
 240:octet_queue.c ****     }
 241:octet_queue.c ****     else if ((handle->mode == OQDataMode_unpacked) &&
 242:octet_queue.c ****              (src_data_mode == OQDataMode_unpacked))
 243:octet_queue.c ****     {
 244:octet_queue.c ****         /* Pointer into source buffer */
 245:octet_queue.c ****         const uint8 *in = (const uint8 *)p_data;
 246:octet_queue.c ****         /* Pointer into destination buffer */
 247:octet_queue.c ****         uint8 *out = (uint8 *)handle->p_buffer + handle->boundary;
 248:octet_queue.c ****         /* How many octets will fit in the remaining buffer */
 249:octet_queue.c ****         const uint16 remaining = OQCapacity(handle) - handle->boundary;
 250:octet_queue.c **** 
 251:octet_queue.c ****         /* Check whether the buffer will wrap round */
 252:octet_queue.c ****         if (data_to_be_queued >= remaining)
 253:octet_queue.c ****         {
 254:octet_queue.c ****             /* Copy the data from source to destination */
 255:octet_queue.c ****             MemCopy(out, in, remaining);
 256:octet_queue.c **** 
 257:octet_queue.c ****             /* Decrement the number of octets remaining to be copied */
 258:octet_queue.c ****             data_to_be_queued -= remaining;
 259:octet_queue.c ****         
 260:octet_queue.c ****             /* Advance the input pointer */
 261:octet_queue.c ****             in += remaining;
 262:octet_queue.c **** 
 263:octet_queue.c ****             /* Reset the output pointer */
 264:octet_queue.c ****             out = (uint8 *)handle->p_buffer;
 265:octet_queue.c ****         
 266:octet_queue.c ****             /* Reset the queue boundary */
 267:octet_queue.c ****             handle->boundary = 0;
 268:octet_queue.c ****         }
 269:octet_queue.c **** 
 270:octet_queue.c ****         /* Copy from source to destination */
 271:octet_queue.c ****         MemCopy(out, in, data_to_be_queued);
 272:octet_queue.c **** 
 273:octet_queue.c ****         /* Advance queue boundary */
 274:octet_queue.c ****         handle->boundary += data_to_be_queued;
 275:octet_queue.c ****     }
 276:octet_queue.c ****     else if ((handle->mode == OQDataMode_packed) &&
 277:octet_queue.c ****              (src_data_mode == OQDataMode_unpacked))
 278:octet_queue.c ****     {
 279:octet_queue.c ****         /* Pointer into source buffer */
 280:octet_queue.c ****         const uint8 *in = (const uint8 *)p_data;
 281:octet_queue.c ****         /* Pointer into destination buffer */
 282:octet_queue.c ****         uint16 *out = (uint16 *)handle->p_buffer + handle->boundary/2;
 283:octet_queue.c ****         /* How many octets will fit in the remaining buffer */
 284:octet_queue.c ****         uint16 remaining;
 285:octet_queue.c ****     
 286:octet_queue.c ****         /* If the first octet to write is in the MSB */
 287:octet_queue.c ****         if (handle->boundary & 0x1)
 288:octet_queue.c ****         {
 289:octet_queue.c ****             /* Copy the first octet separately (MemCopyPack only copies into
 290:octet_queue.c ****              * whole words)
 291:octet_queue.c ****              */
 292:octet_queue.c ****             *out = (*out & 0x00ff) | ((*in & 0x00ff) << 8);
 293:octet_queue.c ****         
 294:octet_queue.c ****             /* Decrement number of octets remaining to be copied */
 295:octet_queue.c ****             data_to_be_queued--;
 296:octet_queue.c ****         
 297:octet_queue.c ****             /* Advance pointers */
 298:octet_queue.c ****             out++;
 299:octet_queue.c ****             in++;
 300:octet_queue.c ****         
 301:octet_queue.c ****             /* Advance queue boundary */
 302:octet_queue.c ****             handle->boundary++;
 303:octet_queue.c ****         }
 304:octet_queue.c **** 
 305:octet_queue.c ****         /* Check whether the buffer will wrap round */
 306:octet_queue.c ****         remaining = OQCapacity(handle) - handle->boundary;
 307:octet_queue.c ****         if (data_to_be_queued >= remaining)
 308:octet_queue.c ****         {
 309:octet_queue.c ****             /* Copy the data from source to destination */
 310:octet_queue.c ****             MemCopyPack(out, in, remaining);
 311:octet_queue.c **** 
 312:octet_queue.c ****             /* Decrement the number of octets remaining to be copied */
 313:octet_queue.c ****             data_to_be_queued -= remaining;
 314:octet_queue.c **** 
 315:octet_queue.c ****             /* Advance the input pointer */
 316:octet_queue.c ****             in += remaining;
 317:octet_queue.c ****         
 318:octet_queue.c ****             /* Reset the output pointer */
 319:octet_queue.c ****             out = (uint16 *)handle->p_buffer;
 320:octet_queue.c ****         
 321:octet_queue.c ****             /* Reset the queue boundary */
 322:octet_queue.c ****             handle->boundary = 0;
 323:octet_queue.c ****         }
 324:octet_queue.c **** 
 325:octet_queue.c ****         /* Copy whole words from source to destination. If there are an odd
 326:octet_queue.c ****          * number of octets to copy then the last octet is copied into the
 327:octet_queue.c ****          * LSB of the last destination word, and the MSB is not modified.
 328:octet_queue.c ****          */
 329:octet_queue.c ****         MemCopyPack(out, in, data_to_be_queued);
 330:octet_queue.c **** 
 331:octet_queue.c ****         /* Advance queue boundary */
 332:octet_queue.c ****         handle->boundary += data_to_be_queued;
 333:octet_queue.c ****     }
 334:octet_queue.c ****     else /* ((handle->mode == OQDataMode_unpacked) &&
 335:octet_queue.c ****              (src_data_mode == OQDataMode_packed)) */
 336:octet_queue.c ****     {
 337:octet_queue.c ****         /* Pointer into source buffer */
 338:octet_queue.c ****         const uint16 *in = (const uint16 *)p_data;
 339:octet_queue.c ****         /* Pointer into destination buffer */
 340:octet_queue.c ****         uint8 *out = (uint8 *)handle->p_buffer + handle->boundary;
 341:octet_queue.c ****         /* How many octets will fit in the remaining buffer */
 342:octet_queue.c ****         uint16 remaining;
 343:octet_queue.c **** 
 344:octet_queue.c ****         /* If the first octet to read is in the MSB */
 345:octet_queue.c ****         if (src_starts_at_odd_octet)
 346:octet_queue.c ****         {
 347:octet_queue.c ****             /* Copy the first octet separately (MemCopyUnPack only copies
 348:octet_queue.c ****              * from whole words)
 349:octet_queue.c ****              */
 350:octet_queue.c ****             *out = (*in & 0xff00) >> 8;
 351:octet_queue.c ****         
 352:octet_queue.c ****             /* Decrement number of octets remaining to be copied */
 353:octet_queue.c ****             data_to_be_queued--;
 354:octet_queue.c ****         
 355:octet_queue.c ****             /* Advance buffer pointers */
 356:octet_queue.c ****             out++;
 357:octet_queue.c ****             in++;
 358:octet_queue.c ****         
 359:octet_queue.c ****             /* Advance queue boundary */
 360:octet_queue.c ****             handle->boundary++;
 361:octet_queue.c ****         }
 362:octet_queue.c **** 
 363:octet_queue.c ****         /* Check whether the buffer will wrap round */    
 364:octet_queue.c ****         remaining = OQCapacity(handle) - handle->boundary;
 365:octet_queue.c ****         if (data_to_be_queued >= remaining)
 366:octet_queue.c ****         {
 367:octet_queue.c ****             /* Copy the data from source to destination */
 368:octet_queue.c ****             MemCopyUnPack(out, in, remaining);
 369:octet_queue.c **** 
 370:octet_queue.c ****             /* Decrement the number of octets remaining to be copied */
 371:octet_queue.c ****             data_to_be_queued -= remaining;
 372:octet_queue.c ****         
 373:octet_queue.c ****             /* Advance the input pointer */
 374:octet_queue.c ****             in += remaining/2;
 375:octet_queue.c **** 
 376:octet_queue.c ****             /* Reset the output pointer */
 377:octet_queue.c ****             out = (uint8 *)handle->p_buffer;
 378:octet_queue.c ****         
 379:octet_queue.c ****             /* Reset the queue boundary */
 380:octet_queue.c ****             handle->boundary = 0;
 381:octet_queue.c ****                 
 382:octet_queue.c ****             /* If the next octet to read is in the MSB */
 383:octet_queue.c ****             if ((data_to_be_queued > 0) && (remaining & 0x1))
 384:octet_queue.c ****             {
 385:octet_queue.c ****                 /* Copy the next octet separately (MemCopyUnPack only copies
 386:octet_queue.c ****                  * from whole words)
 387:octet_queue.c ****                  */
 388:octet_queue.c ****                 *out = (*in & 0xff00) >> 8;
 389:octet_queue.c ****         
 390:octet_queue.c ****                 /* Decrement number of octets remaining to be copied */
 391:octet_queue.c ****                 data_to_be_queued--;
 392:octet_queue.c ****         
 393:octet_queue.c ****                 /* Advance buffer pointers */
 394:octet_queue.c ****                 out++;
 395:octet_queue.c ****                 in++;
 396:octet_queue.c ****         
 397:octet_queue.c ****                 /* Advance queue boundary */
 398:octet_queue.c ****                 handle->boundary++;                    
 399:octet_queue.c ****             }
 400:octet_queue.c ****         }
 401:octet_queue.c **** 
 402:octet_queue.c ****         /* Copy from source to destination */
 403:octet_queue.c ****         MemCopyUnPack(out, in, data_to_be_queued);
 404:octet_queue.c **** 
 405:octet_queue.c ****         /* Advance queue boundary */
 406:octet_queue.c ****         handle->boundary += data_to_be_queued;
 407:octet_queue.c ****     }
 408:octet_queue.c **** 
 409:octet_queue.c ****     /* Buffer is not empty as we have just queued data */
 410:octet_queue.c ****     handle->empty = FALSE;
 411:octet_queue.c **** 
 412:octet_queue.c ****     return octets_queued;
 413:octet_queue.c **** } /* queueData */
 414:octet_queue.c **** 
 415:octet_queue.c **** /*----------------------------------------------------------------------------*
 416:octet_queue.c ****  *  NAME
 417:octet_queue.c ****  *      popData
 418:octet_queue.c ****  *
 419:octet_queue.c ****  *  DESCRIPTION
 420:octet_queue.c ****  *      Pop octets from the start of the queue into a buffer
 421:octet_queue.c ****  *
 422:octet_queue.c ****  *  PARAMETERS
 423:octet_queue.c ****  *      handle [in]             Handle to the octet queue from which data is to
 424:octet_queue.c ****  *                              be read
 425:octet_queue.c ****  *      p_data [in]             Pointer to a buffer where data from the queue is
 426:octet_queue.c ****  *                              to be copied. The size of each element in the
 427:octet_queue.c ****  *                              buffer depends on the data mode of the queue.
 428:octet_queue.c ****  *      data_size_in_octets [in]
 429:octet_queue.c ****  *                              The number of octets to be extracted.
 430:octet_queue.c ****  *
 431:octet_queue.c ****  *  RETURNS
 432:octet_queue.c ****  *      Number of octets actually extracted from the queue
 433:octet_queue.c ****  *----------------------------------------------------------------------------*/
 434:octet_queue.c **** static uint16 popData(OQ_HANDLE  handle,
 435:octet_queue.c ****                       void      *p_data,
 436:octet_queue.c ****                       uint16     data_size_in_octets)
 437:octet_queue.c **** {
 438:octet_queue.c ****     /* Total available data in the queue, in octets */
 439:octet_queue.c ****     /* (This will be 0 if handle is invalid) */
 440:octet_queue.c ****     const uint16 avlbl_data = OQSize(handle);
 441:octet_queue.c ****     
 442:octet_queue.c ****     /* Number of octets of data that are to be fetched */
 443:octet_queue.c ****     const uint16 octets_fetched = MIN(avlbl_data, data_size_in_octets);
 444:octet_queue.c **** 
 445:octet_queue.c ****     /* Number of octets remaining to be fetched */
 446:octet_queue.c ****     uint16 data_to_be_fetched = octets_fetched;
 447:octet_queue.c **** 
 448:octet_queue.c ****     /* If there is no data available return now */
 449:octet_queue.c ****     if (data_to_be_fetched == 0)
 450:octet_queue.c ****         return 0;
 451:octet_queue.c **** 
 452:octet_queue.c ****     if (handle->mode == OQDataMode_packed)
 453:octet_queue.c ****     {
 454:octet_queue.c ****         /* Octet queue is packed */
 455:octet_queue.c **** 
 456:octet_queue.c ****         /* Pointer into source buffer */
 457:octet_queue.c ****         const uint16 *in = (const uint16 *)handle->p_buffer + handle->start/2;
 458:octet_queue.c ****         /* Pointer into destination buffer */
 459:octet_queue.c ****         uint16 *out = (uint16 *)p_data;
 460:octet_queue.c ****         /* Flag to indicate whether source octet is from MSB or LSB */
 461:octet_queue.c ****         bool in_msb = handle->start & 0x1;
 462:octet_queue.c **** 
 463:octet_queue.c ****         /* If the source and destination buffers are not similarly aligned
 464:octet_queue.c ****          * (first destination octet is always in the LSB)
 465:octet_queue.c ****          */
 466:octet_queue.c ****         if (in_msb)
 467:octet_queue.c ****         {
 468:octet_queue.c ****             /* Pointer to first element beyond the buffer */
 469:octet_queue.c ****             const uint16 *const buffer_end = (const uint16 *)handle->p_buffer +
 470:octet_queue.c ****                                                               handle->capacity;
 471:octet_queue.c ****             /* Flag to indicate whether destination octet is from MSB or LSB */
 472:octet_queue.c ****             bool out_msb = FALSE;   /* Always LSB to start with */
 473:octet_queue.c **** 
 474:octet_queue.c ****             /* Copy each octet from source to destination one by one */
 475:octet_queue.c ****             do
 476:octet_queue.c ****             {
 477:octet_queue.c ****                 uint16 src_octet;       /* Octet to copy */
 478:octet_queue.c ****             
 479:octet_queue.c ****                 /* Read octet from source */
 480:octet_queue.c ****                 if (in_msb)
 481:octet_queue.c ****                 {
 482:octet_queue.c ****                     src_octet = (*in & 0xff00) >> 8;
 483:octet_queue.c ****                     in++;   /* Move the input pointer to the next word */
 484:octet_queue.c ****                 }
 485:octet_queue.c ****                 else
 486:octet_queue.c ****                 {
 487:octet_queue.c ****                     src_octet = *in & 0x00ff;
 488:octet_queue.c ****                 }
 489:octet_queue.c ****             
 490:octet_queue.c ****                 /* Write octet to destination */
 491:octet_queue.c ****                 if (out_msb)
 492:octet_queue.c ****                 {
 493:octet_queue.c ****                     *out = (*out & 0x00ff) | (src_octet << 8);
 494:octet_queue.c ****                     out++;  /* Move the output pointer to the next word */
 495:octet_queue.c ****                 }
 496:octet_queue.c ****                 else
 497:octet_queue.c ****                 {
 498:octet_queue.c ****                     *out = (*out & 0xff00) | src_octet;
 499:octet_queue.c ****                 }
 500:octet_queue.c **** 
 501:octet_queue.c ****                 /* Toggle MSB flags */
 502:octet_queue.c ****                 in_msb = !in_msb;
 503:octet_queue.c ****                 out_msb = !out_msb;
 504:octet_queue.c ****                     
 505:octet_queue.c ****                 /* The above could be optimised given that if in_msb is true,
 506:octet_queue.c ****                  * then out_msb must be false, and vice versa. In fact we do
 507:octet_queue.c ****                  * not need out_msb at all.
 508:octet_queue.c ****                  * It has been left un-optimised to improve readability.
 509:octet_queue.c ****                  */
 510:octet_queue.c ****                     
 511:octet_queue.c ****                 /* Decrement number of octets to be fetched */
 512:octet_queue.c ****                 data_to_be_fetched--;
 513:octet_queue.c **** 
 514:octet_queue.c ****                 /* Reset the input pointer if end of buffer reached. */
 515:octet_queue.c ****                 if (in == buffer_end)
 516:octet_queue.c ****                 {
 517:octet_queue.c ****                     in = (const uint16 *)handle->p_buffer;
 518:octet_queue.c ****                 }
 519:octet_queue.c ****             } while (data_to_be_fetched > 0);
 520:octet_queue.c ****         }
 521:octet_queue.c ****         else /* !in_msb */
 522:octet_queue.c ****         {
 523:octet_queue.c ****             /* How many octets are available before the queue wraps round */
 524:octet_queue.c ****             const uint16 remaining = OQCapacity(handle) - handle->start;
 525:octet_queue.c ****             
 526:octet_queue.c ****             /* Check whether the queue will wrap round */
 527:octet_queue.c ****             if (data_to_be_fetched >= remaining)
 528:octet_queue.c ****             {
 529:octet_queue.c ****                 /* Copy the data from source to destination */
 530:octet_queue.c ****                 MemCopy(out, in, remaining/2);
 531:octet_queue.c ****                 
 532:octet_queue.c ****                 /* Decrement the number of octets waiting to be copied */
 533:octet_queue.c ****                 data_to_be_fetched -= remaining;
 534:octet_queue.c ****                 
 535:octet_queue.c ****                 /* Reset the input pointer */
 536:octet_queue.c ****                 in = (const uint16 *)handle->p_buffer;
 537:octet_queue.c ****                 
 538:octet_queue.c ****                 /* Advance the output pointer */
 539:octet_queue.c ****                 out += remaining/2;
 540:octet_queue.c ****             }
 541:octet_queue.c **** 
 542:octet_queue.c ****             /* Copy from source to destination */
 543:octet_queue.c ****             MemCopy(out, in, data_to_be_fetched/2);
 544:octet_queue.c **** 
 545:octet_queue.c ****             /* If there is an odd octet remaining to be copied */
 546:octet_queue.c ****             if (data_to_be_fetched & 0x1)
 547:octet_queue.c ****             {
 548:octet_queue.c ****                 /* Advance buffer pointers */
 549:octet_queue.c ****                 in += data_to_be_fetched/2;
 550:octet_queue.c ****                 out += data_to_be_fetched/2;
 551:octet_queue.c ****             
 552:octet_queue.c ****                 /* Copy the octet into the LSB leaving the MSB unaltered */
 553:octet_queue.c ****                 *out = (*out & 0xff00) | (*in & 0x00ff);
 554:octet_queue.c ****             }
 555:octet_queue.c ****         }
 556:octet_queue.c ****     }
 557:octet_queue.c ****     else /* handle->mode == OQDataMode_unpacked */
 558:octet_queue.c ****     {
 559:octet_queue.c ****         /* Octet queue is unpacked */
 560:octet_queue.c **** 
 561:octet_queue.c ****         /* Pointer into source buffer */
 562:octet_queue.c ****         const uint8 *in = (const uint8 *)handle->p_buffer + handle->start;
 563:octet_queue.c ****         /* Pointer into destination buffer */
 564:octet_queue.c ****         uint8 *out = (uint8 *)p_data;
 565:octet_queue.c ****         /* How many octets are available before the queue wraps round */
 566:octet_queue.c ****         const uint16 remaining = OQCapacity(handle) - handle->start;
 567:octet_queue.c ****             
 568:octet_queue.c ****         /* Check whether the queue will wrap round */
 569:octet_queue.c ****         if (data_to_be_fetched >= remaining)
 570:octet_queue.c ****         {
 571:octet_queue.c ****             /* Copy the data from source to destination */
 572:octet_queue.c ****             MemCopy(out, in, remaining);
 573:octet_queue.c ****                 
 574:octet_queue.c ****             /* Decrement the number of octets waiting to be copied */
 575:octet_queue.c ****             data_to_be_fetched -= remaining;
 576:octet_queue.c ****                 
 577:octet_queue.c ****             /* Reset the input pointer */
 578:octet_queue.c ****             in = (const uint8 *)handle->p_buffer;
 579:octet_queue.c ****                 
 580:octet_queue.c ****             /* Advance the output pointer */
 581:octet_queue.c ****             out += remaining;
 582:octet_queue.c ****         }
 583:octet_queue.c **** 
 584:octet_queue.c ****         /* Copy from source to destination */
 585:octet_queue.c ****         MemCopy(out, in, data_to_be_fetched);
 586:octet_queue.c ****     }
 587:octet_queue.c ****     
 588:octet_queue.c ****     /* Advance queue indices (and optionally fill empty spaces with fill
 589:octet_queue.c ****      * octet)
 590:octet_queue.c ****      */
 591:octet_queue.c ****     OQDecrementSize(handle, octets_fetched);
 592:octet_queue.c **** 
 593:octet_queue.c ****     return octets_fetched;
 594:octet_queue.c **** } /* popData */
 595:octet_queue.c **** 
 596:octet_queue.c **** /*============================================================================*
 597:octet_queue.c ****  *  Public Function Implementations
 598:octet_queue.c ****  *============================================================================*/
 599:octet_queue.c **** 
 600:octet_queue.c **** /*----------------------------------------------------------------------------*
 601:octet_queue.c ****  *  NAME
 602:octet_queue.c ****  *      OQCreate
 603:octet_queue.c ****  *
 604:octet_queue.c ****  *  DESCRIPTION
 605:octet_queue.c ****  *      Create an octet queue on top of a given buffer. Automatically
 606:octet_queue.c ****  *      initialises the buffer with the fill character (since the queue is
 607:octet_queue.c ****  *      emptied upon creation), if buffer filling is enabled (#OQSetFill)
 608:octet_queue.c ****  *      prior to calling this function.
 609:octet_queue.c ****  *
 610:octet_queue.c ****  *  PARAMETERS
 611:octet_queue.c ****  *      p_buffer [in]           Buffer for backing the queue. The queue can only
 612:octet_queue.c ****  *                              function during the life span of the buffer. The
 613:octet_queue.c ****  *                              queue handle will become invalid once the buffer
 614:octet_queue.c ****  *                              is freed.
 615:octet_queue.c ****  *      buffer_capacity [in]    Total capacity of the buffer in number of
 616:octet_queue.c ****  *                              elements - i.e. number of uint8 for unpacked, or
 617:octet_queue.c ****  *                              number of uint16 if packed. Must be a positive
 618:octet_queue.c ****  *                              integer up to MAX_ALLOWED_BUFFER_CAPACITY.
 619:octet_queue.c ****  *      buffer_mode [in]        Mode in which the data is buffered
 620:octet_queue.c ****  *      handle [out]            Octet queue structure, into which the handle
 621:octet_queue.c ****  *                              will be created and copied.
 622:octet_queue.c ****  *
 623:octet_queue.c ****  *  RETURNS
 624:octet_queue.c ****  *      TRUE if success, FALSE if failed
 625:octet_queue.c ****  *----------------------------------------------------------------------------*/
 626:octet_queue.c **** bool OQCreate(void       *p_buffer,
 627:octet_queue.c ****                uint16      buffer_capacity,
 628:octet_queue.c ****                OQDataMode  buffer_mode,
 629:octet_queue.c ****                OQ_HANDLE   handle)
 630:octet_queue.c **** {
  20                 	:
  21                 		enter	#0x0001
  22 0000 01 0B       	.LCFI0:
  23                 		st	AL,@0xfff8
  24 0001 F8 25       		ld	X,@(0x0002,Y)
  25 0002 02 1B       		.loc 1 636 0
 631:octet_queue.c ****     /* If  valid buffer capacity is specified, and data mode is valid */
 632:octet_queue.c ****     const bool ret_val = (handle != NULL) && (p_buffer != NULL) && 
 633:octet_queue.c ****                          (buffer_capacity <= MAX_ALLOWED_BUFFER_CAPACITY) &&
 634:octet_queue.c ****                          (buffer_capacity > 0) &&
 635:octet_queue.c ****                          (buffer_mode < OQDataMode_INVALID);
  26                 	L2
  27 0003 00 00 00 00 	.LVL1:
  27      00 F4 
  28                 		tst	@$XAP_AL
  29 0006 00 00 00 99 		beq	.L2
  30 0008 00 00 00 00 	.LVL2:
  30      00 F4 
  31                 		cmp	AH,#0x7fff
  32 000b 80 00 FF 80 		bcc	.L2
  33 000d 00 00 00 00 		tst	@$XAP_AH
  33      00 F8 
  34 0010 00 00 00 99 		beq	.L2
  35 0012 00 00 00 00 		ld	AL,#0x0000
  35      00 F4 
  36 0015 00 14       	.LVL3:
  37                 		st	AL,@0xfff9
  38 0016 F9 25       		ld	AL,@(0x0001,Y)
  39 0017 01 17       		cmp	AL,#0x0002
  40 0018 02 84       		bcc	.L5
  41 0019 00 00 00 00 	.LVL4:
  41      00 F8 
  42                 		ld	AL,#0x0001
  43 001c 01 14       		st	AL,@0xfff9
  44 001d F9 25       		.loc 1 641 0
 636:octet_queue.c **** 
 637:octet_queue.c ****     if (ret_val)
 638:octet_queue.c ****     {
 639:octet_queue.c ****         /* Initialise the octet queue control structure */
 640:octet_queue.c ****         handle->p_buffer = p_buffer;
  45                 	AL,@(0,X)
  46 001e F8 15       		.loc 1 642 0
  47 001f 00 26       		st	AH,@(0x0001,X)
 641:octet_queue.c ****         handle->capacity = buffer_capacity;
  48                 	oc 1 643 0
  49 0020 01 22       		ld	AL,@(0x0001,Y)
 642:octet_queue.c ****         handle->mode = buffer_mode;
  50                 	t	AL,@(0x0005,X)
  51 0021 01 17       		.loc 1 644 0
  52 0022 05 26       		ld	AL,#0x0000
 643:octet_queue.c ****         handle->start = 0;
  53                 		AL,@(0x0002,X)
  54 0023 00 14       		.loc 1 645 0
  55 0024 02 26       		st	AL,@(0x0003,X)
 644:octet_queue.c ****         handle->boundary = 0;
  56                 	oc 1 646 0
  57 0025 03 26       		ld	AL,#0x0001
 645:octet_queue.c ****         handle->empty = TRUE;
  58                 	t	AL,@(0x0004,X)
  59 0026 01 14       		bra	.L5
  60 0027 04 26       	.LVL5:
  61 0028 00 00 00 00 	.L2:
  61      00 E0 
  62                 		.loc 1 636 0
  63                 		ld	AL,#0x0000
 636:octet_queue.c ****                          (buffer_mode < OQDataMode_INVALID);
  64                 	
  65 002b 00 14       		st	AL,@0xfff9
  66                 	.LVL7:
  67 002c F9 25       	.L5:
  68                 		.loc 1 658 0
  69                 		ld	AL,@0xfff9
 646:octet_queue.c **** #ifdef OQ_ENABLE_BUFFER_FILL
 647:octet_queue.c ****         /* Check whether filling is enabled for this queue */
 648:octet_queue.c ****         if (handle->fill & 0xff00)
 649:octet_queue.c ****         {
 650:octet_queue.c ****             /* Fill the buffer with fill octets */
 651:octet_queue.c ****             FILL_BUFFER(handle->p_buffer, handle->fill, handle->capacity);
 652:octet_queue.c ****         }
 653:octet_queue.c **** #endif
 654:octet_queue.c ****     }
 655:octet_queue.c ****     
 656:octet_queue.c ****     return ret_val;
 657:octet_queue.c **** } /* OQCreate */
  70                 	e	#0x0001
  71 002d F9 15       	.LVL8:
  72 002e 01 0F       	.LFE4:
  73                 		.size	OQCreate, .-OQCreate
  74                 		.global	__size_of_OQCreate
  75                 		.equ	__size_of_OQCreate,. - OQCreate
  76                 		.section	.text.OQDestroy,"ax",@progbits
  77                 		.global	OQDestroy
  78                 		.type	OQDestroy, @function
  79                 	OQDestroy:
  80                 	.LFB5:
  81                 		.loc 1 674 0
  82                 	.LVL9:
 658:octet_queue.c **** 
 659:octet_queue.c **** /*----------------------------------------------------------------------------*
 660:octet_queue.c ****  *  NAME
 661:octet_queue.c ****  *      OQDestroy
 662:octet_queue.c ****  *
 663:octet_queue.c ****  *  DESCRIPTION
 664:octet_queue.c ****  *      Destroy the queue. The handle will no longer be valid.
 665:octet_queue.c ****  *
 666:octet_queue.c ****  *  PARAMETERS
 667:octet_queue.c ****  *      handle [in/out]         Handle to the queue to destroy
 668:octet_queue.c ****  *
 669:octet_queue.c ****  *  RETURNS
 670:octet_queue.c ****  *      Nothing
 671:octet_queue.c ****  *----------------------------------------------------------------------------*/
 672:octet_queue.c **** void OQDestroy(OQ_HANDLE handle)
 673:octet_queue.c **** {
  83                 	1
  84                 	.LCFI1:
  85 0000 01 0B       		ld	X,@$XAP_AL
  86                 		.loc 1 675 0
  87 0001 00 00 00 19 		beq	.L9
 674:octet_queue.c ****     if (handle != NULL)
  88                 	 1 677 0
  89 0003 00 00 00 00 		ld	AL,#0x0000
  89      00 F4 
 675:octet_queue.c ****     {
 676:octet_queue.c ****         handle->p_buffer = NULL;
  90                 	VL10:
  91 0006 00 14       		st	AL,@(0,X)
  92                 		.loc 1 678 0
  93 0007 00 26       		st	AL,@(0x0001,X)
 677:octet_queue.c ****         handle->capacity = 0;
  94                 	c 1 679 0
  95 0008 01 26       		ld	AL,#0x0001
 678:octet_queue.c ****         handle->empty = TRUE;
  96                 	t	AL,@(0x0004,X)
  97 0009 01 14       	.LVL11:
  98 000a 04 26       	.L9:
  99                 		.loc 1 681 0
 100                 		leave	#0x0001
 679:octet_queue.c ****     }
 680:octet_queue.c **** } /* OQDestroy */
 101                 	2:
 102 000b 01 0F       	.LFE5:
 103                 		.size	OQDestroy, .-OQDestroy
 104                 		.global	__size_of_OQDestroy
 105                 		.equ	__size_of_OQDestroy,. - OQDestroy
 106                 		.section	.text.OQIsValid,"ax",@progbits
 107                 		.global	OQIsValid
 108                 		.type	OQIsValid, @function
 109                 	OQIsValid:
 110                 	.LFB6:
 111                 		.loc 1 697 0
 112                 	.LVL13:
 681:octet_queue.c **** 
 682:octet_queue.c **** /*----------------------------------------------------------------------------*
 683:octet_queue.c ****  *  NAME
 684:octet_queue.c ****  *      OQIsValid
 685:octet_queue.c ****  *
 686:octet_queue.c ****  *  DESCRIPTION
 687:octet_queue.c ****  *      Check that the supplied handle has not been destroyed
 688:octet_queue.c ****  *
 689:octet_queue.c ****  *  PARAMETERS
 690:octet_queue.c ****  *      handle [in]             Handle to the queue to validate
 691:octet_queue.c ****  *
 692:octet_queue.c ****  *  RETURNS
 693:octet_queue.c ****  *      TRUE if the queue is valid, FALSE otherwise
 694:octet_queue.c ****  *----------------------------------------------------------------------------*/
 695:octet_queue.c **** bool OQIsValid(const OQ_HANDLE handle)
 696:octet_queue.c **** {
 113                 	01
 114                 	.LCFI2:
 115 0000 01 0B       		ld	X,@$XAP_AL
 116                 		.loc 1 698 0
 117 0001 00 00 00 19 		beq	.L11
 697:octet_queue.c ****     return ((handle != NULL) &&
 118                 	@(0,X)
 119 0003 00 00 00 00 		beq	.L11
 119      00 F4 
 120 0006 00 9A       	.LVL14:
 121 0007 00 00 00 00 		ld	AL,#0x0000
 121      00 F4 
 122                 		tst	@(0x0001,X)
 123 000a 00 14       		bne	.L12
 124 000b 01 9A       		ld	AL,#0x0001
 125 000c 00 00 00 00 	.L12:
 125      00 F0 
 126 000f 01 14       		xor	AL,#0x0001
 127                 		bra	.L13
 128 0010 01 D4       	.LVL15:
 129 0011 00 00 00 00 	.L11:
 129      00 E0 
 130                 		ld	AL,#0x0000
 131                 	.LVL16:
 132 0014 00 14       	.L13:
 133                 		.loc 1 701 0
 134                 		leave	#0x0001
 698:octet_queue.c ****             (handle->p_buffer != NULL) &&
 699:octet_queue.c ****             (handle->capacity > 0));
 700:octet_queue.c **** } /* OQIsValid */
 135                 	size	OQIsValid, .-OQIsValid
 136 0015 01 0F       		.global	__size_of_OQIsValid
 137                 		.equ	__size_of_OQIsValid,. - OQIsValid
 138                 		.section	.text.OQIsEmpty,"ax",@progbits
 139                 		.global	OQIsEmpty
 140                 		.type	OQIsEmpty, @function
 141                 	OQIsEmpty:
 142                 	.LFB11:
 143                 		.loc 1 900 0
 144                 	.LVL18:
 145                 		enter	#0x0001
 146                 	.LCFI3:
 701:octet_queue.c **** 
 702:octet_queue.c **** /*----------------------------------------------------------------------------*
 703:octet_queue.c ****  *  NAME
 704:octet_queue.c ****  *      OQQueueData
 705:octet_queue.c ****  *
 706:octet_queue.c ****  *  DESCRIPTION
 707:octet_queue.c ****  *      Queue data into octet queue
 708:octet_queue.c ****  *
 709:octet_queue.c ****  *  PARAMETERS
 710:octet_queue.c ****  *      handle [in]             Handle to the queue
 711:octet_queue.c ****  *      p_data [in]             Buffer holding data to be queued. The buffer
 712:octet_queue.c ****  *                              must be packed in the same way as the queue.
 713:octet_queue.c ****  *                              If the buffer is packed, then the first octet
 714:octet_queue.c ****  *                              will be taken from the LSB of the first word in
 715:octet_queue.c ****  *                              the buffer.
 716:octet_queue.c ****  *      octet_count [in]        The number of octets of data to be queued.
 717:octet_queue.c ****  *                              If there is not enough space in the queue then
 718:octet_queue.c ****  *                              as many octets as will fit will be queued.
 719:octet_queue.c ****  *                              An odd number of octets is acceptable whichever
 720:octet_queue.c ****  *                              packing mode is used.
 721:octet_queue.c ****  *
 722:octet_queue.c ****  *  RETURNS
 723:octet_queue.c ****  *      Number of octets of data actually queued
 724:octet_queue.c ****  *----------------------------------------------------------------------------*/
 725:octet_queue.c **** uint16 OQQueueData(OQ_HANDLE handle, const void *p_data, uint16 octet_count)
 726:octet_queue.c **** {
 727:octet_queue.c ****     return queueData(handle, p_data, octet_count, FALSE, handle->mode);
 728:octet_queue.c **** } /* OQQueueData */
 729:octet_queue.c **** 
 730:octet_queue.c **** /*----------------------------------------------------------------------------*
 731:octet_queue.c ****  *  NAME
 732:octet_queue.c ****  *      OQPopData
 733:octet_queue.c ****  *
 734:octet_queue.c ****  *  DESCRIPTION
 735:octet_queue.c ****  *      Extract octets from the head of the queue into a buffer
 736:octet_queue.c ****  *
 737:octet_queue.c ****  *  PARAMETERS
 738:octet_queue.c ****  *      handle [in]             Handle to the queue
 739:octet_queue.c ****  *      p_data [out]            Buffer to which data from the queue is to be
 740:octet_queue.c ****  *                              extracted. The buffer must be packed in the same
 741:octet_queue.c ****  *                              way as the queue. If the buffer is packed, then
 742:octet_queue.c ****  *                              the first octet will be stored in the LSB of the
 743:octet_queue.c ****  *                              first word in the buffer.
 744:octet_queue.c ****  *      octet_count [in]        The number of octets of data to be extracted.
 745:octet_queue.c ****  *                              If there is not enough data in the queue then
 746:octet_queue.c ****  *                              as many octets as are available will be
 747:octet_queue.c ****  *                              extracted. An odd number of octets is acceptable
 748:octet_queue.c ****  *                              whichever packing mode is used.
 749:octet_queue.c ****  *
 750:octet_queue.c ****  *  RETURNS
 751:octet_queue.c ****  *      Number of octets actually extracted from the queue.
 752:octet_queue.c ****  *----------------------------------------------------------------------------*/
 753:octet_queue.c **** uint16 OQPopData(OQ_HANDLE handle, void *p_data, uint16 octet_count)
 754:octet_queue.c **** {
 755:octet_queue.c ****     return popData(handle, p_data, octet_count);
 756:octet_queue.c **** } /* OQPopData */
 757:octet_queue.c **** 
 758:octet_queue.c **** /*----------------------------------------------------------------------------*
 759:octet_queue.c ****  *  NAME
 760:octet_queue.c ****  *      OQTransferData
 761:octet_queue.c ****  *
 762:octet_queue.c ****  *  DESCRIPTION
 763:octet_queue.c ****  *      Extract data from one octet queue and insert it into another. Queues
 764:octet_queue.c ****  *      need not have identical data packing modes.
 765:octet_queue.c ****  *      Effectively the same as calling OQPopData followed by OQQueueData
 766:octet_queue.c ****  *      without having to create a buffer to hold the data inbetween.
 767:octet_queue.c ****  *
 768:octet_queue.c ****  *  PARAMETERS
 769:octet_queue.c ****  *      from [in]               Handle to the octet queue from which data is to
 770:octet_queue.c ****  *                              be read
 771:octet_queue.c ****  *      to [out]                Handle to the octet queue into which data is to
 772:octet_queue.c ****  *                              be queued
 773:octet_queue.c ****  *      octet_count [in]        The number of octets of data to be transferred.
 774:octet_queue.c ****  *                              If there is not enough data in the source queue
 775:octet_queue.c ****  *                              then only as much data as is available will be
 776:octet_queue.c ****  *                              transferred.
 777:octet_queue.c ****  *                              If there is not enough space in the destination
 778:octet_queue.c ****  *                              queue then only as much data as there is space
 779:octet_queue.c ****  *                              for will be transferred.
 780:octet_queue.c ****  *                              An odd number of octets is acceptable whichever
 781:octet_queue.c ****  *                              packing mode is used.
 782:octet_queue.c ****  *
 783:octet_queue.c ****  *  RETURNS
 784:octet_queue.c ****  *      Number of octets actually transferred.
 785:octet_queue.c ****  *----------------------------------------------------------------------------*/
 786:octet_queue.c **** uint16 OQTransferData(OQ_HANDLE from, OQ_HANDLE to, uint16 octet_count)
 787:octet_queue.c **** {
 788:octet_queue.c ****     /* Available space in the destination queue, in octets */
 789:octet_queue.c ****     /* (This will be 0 if handle is invalid) */
 790:octet_queue.c ****     const uint16 avlbl_space = OQSpace(to);
 791:octet_queue.c ****     
 792:octet_queue.c ****     /* Total available data in the source queue, in octets */
 793:octet_queue.c ****     /* (This will be 0 if handle is invalid) */
 794:octet_queue.c ****     const uint16 avlbl_data = OQSize(from);
 795:octet_queue.c **** 
 796:octet_queue.c ****     /* Maximum number of octets of data that can be transferred */
 797:octet_queue.c ****     const uint16 octets_moved = MIN(MIN(avlbl_data, avlbl_space), octet_count);
 798:octet_queue.c **** 
 799:octet_queue.c ****     /* Number of octets remaining to be transferred */
 800:octet_queue.c ****     uint16 data_to_be_moved = octets_moved;
 801:octet_queue.c ****     
 802:octet_queue.c ****     /* How many octets are available before the source queue wraps round */
 803:octet_queue.c ****     const uint16 remaining = OQCapacity(from) - from->start;
 804:octet_queue.c **** 	
 805:octet_queue.c ****     /* Indicate whether first octet is from MSB (ignored in unpacked mode) */
 806:octet_queue.c ****     bool first_msb = from->start & 0x1;
 807:octet_queue.c **** 
 808:octet_queue.c ****     /* Pointer into the source buffer */
 809:octet_queue.c ****     const void *src;
 810:octet_queue.c **** 	
 811:octet_queue.c ****     /* If there is no data to transfer return now */
 812:octet_queue.c ****     if (data_to_be_moved == 0)
 813:octet_queue.c ****         return 0;
 814:octet_queue.c ****     
 815:octet_queue.c ****     /* Set up the source pointer based on the queue data mode */
 816:octet_queue.c ****     if (from->mode == OQDataMode_packed)
 817:octet_queue.c ****     {
 818:octet_queue.c ****         src = (const uint16 *)from->p_buffer + from->start/2;
 819:octet_queue.c ****     }
 820:octet_queue.c ****     else
 821:octet_queue.c ****     {
 822:octet_queue.c ****         src = (const uint8 *)from->p_buffer + from->start;
 823:octet_queue.c ****     }
 824:octet_queue.c ****     
 825:octet_queue.c ****     /* Check whether the source buffer will wrap round */
 826:octet_queue.c ****     if (data_to_be_moved > remaining)
 827:octet_queue.c ****     {
 828:octet_queue.c ****         /* Copy data from source to destination */
 829:octet_queue.c ****         queueData(to, src, remaining, first_msb, from->mode);
 830:octet_queue.c **** 
 831:octet_queue.c ****         /* Decrement the number of octets waiting to be moved */
 832:octet_queue.c ****         data_to_be_moved -= remaining;
 833:octet_queue.c ****         
 834:octet_queue.c ****         /* Reset the input pointer */
 835:octet_queue.c ****         src = from->p_buffer;
 836:octet_queue.c **** 	    
 837:octet_queue.c ****         /* Update MSB flag */
 838:octet_queue.c ****         first_msb = FALSE;
 839:octet_queue.c ****     }
 840:octet_queue.c **** 
 841:octet_queue.c ****     /* Copy data from source to destination */
 842:octet_queue.c ****     queueData(to, src, data_to_be_moved, first_msb, from->mode);
 843:octet_queue.c **** 
 844:octet_queue.c ****     /* Decrement the size of the source to account for data that has
 845:octet_queue.c ****      * been transferred */
 846:octet_queue.c ****     OQDecrementSize(from, octets_moved);
 847:octet_queue.c **** 
 848:octet_queue.c ****     return octets_moved;
 849:octet_queue.c **** } /* OQTransferData */
 850:octet_queue.c **** 
 851:octet_queue.c **** /*----------------------------------------------------------------------------*
 852:octet_queue.c ****  *  NAME
 853:octet_queue.c ****  *      OQSize
 854:octet_queue.c ****  *
 855:octet_queue.c ****  *  DESCRIPTION
 856:octet_queue.c ****  *      Get the size of the data in an octet queue.
 857:octet_queue.c ****  *
 858:octet_queue.c ****  *  PARAMETERS
 859:octet_queue.c ****  *      handle [in]             Handle to the octet queue
 860:octet_queue.c ****  *
 861:octet_queue.c ****  *  RETURNS
 862:octet_queue.c ****  *      Number of octets queued
 863:octet_queue.c ****  *----------------------------------------------------------------------------*/
 864:octet_queue.c **** uint16 OQSize(const OQ_HANDLE handle)
 865:octet_queue.c **** {
 866:octet_queue.c ****     uint16 data_size = 0;               /* Size of queued data in octets */
 867:octet_queue.c ****     
 868:octet_queue.c ****     /* If the buffer is not empty */
 869:octet_queue.c ****     if ((handle != NULL) && !handle->empty)
 870:octet_queue.c ****     {
 871:octet_queue.c ****         /* If the boundary index has rolled over */
 872:octet_queue.c ****         if (handle->start >= handle->boundary)
 873:octet_queue.c ****         {
 874:octet_queue.c ****             data_size = OQCapacity(handle) - handle->start + handle->boundary;
 875:octet_queue.c ****         }
 876:octet_queue.c ****         else
 877:octet_queue.c ****         {
 878:octet_queue.c ****             data_size = handle->boundary - handle->start;
 879:octet_queue.c ****         }
 880:octet_queue.c ****     }
 881:octet_queue.c ****     
 882:octet_queue.c ****     return data_size;
 883:octet_queue.c **** } /* OQSize */
 884:octet_queue.c **** 
 885:octet_queue.c **** /*----------------------------------------------------------------------------*
 886:octet_queue.c ****  *  NAME
 887:octet_queue.c ****  *      OQIsEmpty
 888:octet_queue.c ****  *
 889:octet_queue.c ****  *  DESCRIPTION
 890:octet_queue.c ****  *      Check if the given queue is empty
 891:octet_queue.c ****  *
 892:octet_queue.c ****  *  PARAMETERS
 893:octet_queue.c ****  *      handle [in]             Handle to the octet queue
 894:octet_queue.c ****  *
 895:octet_queue.c ****  *  RETURNS
 896:octet_queue.c ****  *      TRUE if empty, FALSE otherwise
 897:octet_queue.c ****  *----------------------------------------------------------------------------*/
 898:octet_queue.c **** bool OQIsEmpty(const OQ_HANDLE handle)
 899:octet_queue.c **** {
 147                 	AL
 148                 		.loc 1 901 0
 149 0000 01 0B       		bne	.L16
 150                 		ld	AL,#0x0000
 151 0001 00 00 00 19 	.LVL19:
 900:octet_queue.c ****     return ((handle != NULL) && handle->empty);
 152                 	.L17
 153 0003 00 00 00 00 	.LVL20:
 153      00 F0 
 154 0006 00 14       	.L16:
 155                 		ld	AL,#0x0000
 156 0007 00 00 00 00 	.LVL21:
 156      00 E0 
 157                 		tst	@(0x0004,X)
 158                 		bne	.L18
 159 000a 00 14       		ld	AL,#0x0001
 160                 	.L18:
 161 000b 04 9A       		xor	AL,#0x0001
 162 000c 00 00 00 00 	.L17:
 162      00 F0 
 163 000f 01 14       		.loc 1 902 0
 164                 		leave	#0x0001
 165 0010 01 D4       	.LVL22:
 166                 	.LFE11:
 901:octet_queue.c **** } /* OQIsEmpty */
 167                 	y, .-OQIsEmpty
 168 0011 01 0F       		.global	__size_of_OQIsEmpty
 169                 		.equ	__size_of_OQIsEmpty,. - OQIsEmpty
 170                 		.section	.text.OQIsFull,"ax",@progbits
 171                 		.global	OQIsFull
 172                 		.type	OQIsFull, @function
 173                 	OQIsFull:
 174                 	.LFB12:
 175                 		.loc 1 918 0
 176                 	.LVL23:
 177                 		enter	#0x0001
 178                 	.LCFI4:
 902:octet_queue.c **** 
 903:octet_queue.c **** /*----------------------------------------------------------------------------*
 904:octet_queue.c ****  *  NAME
 905:octet_queue.c ****  *      OQIsFull
 906:octet_queue.c ****  *
 907:octet_queue.c ****  *  DESCRIPTION
 908:octet_queue.c ****  *      Check if the given queue is full
 909:octet_queue.c ****  *
 910:octet_queue.c ****  *  PARAMETERS
 911:octet_queue.c ****  *      handle [in]             Handle to the octet queue
 912:octet_queue.c ****  *
 913:octet_queue.c ****  *  RETURNS
 914:octet_queue.c ****  *      TRUE if full, FALSE otherwise
 915:octet_queue.c ****  *----------------------------------------------------------------------------*/
 916:octet_queue.c **** bool OQIsFull(const OQ_HANDLE handle)
 917:octet_queue.c **** {
 179                 	AL
 180                 		.loc 1 920 0
 181 0000 01 0B       		beq	.L21
 182                 		ld	AL,@(0x0002,X)
 183 0001 00 00 00 19 	.LVL24:
 918:octet_queue.c ****     /* if buffer rolled over to start and is not empty, it is full */
 919:octet_queue.c ****     return ((handle != NULL) &&
 184                 	AL,@(0x0003,X)
 185 0003 00 00 00 00 		bne	.L21
 185      00 F4 
 186 0006 02 16       		ld	AL,@(0x0004,X)
 187                 		beq	.L22
 188 0007 03 86       		ld	AL,#0x0001
 189 0008 00 00 00 00 	.L22:
 189      00 F0 
 190 000b 04 16       		xor	AL,#0x0001
 191 000c 00 00 00 00 		bra	.L23
 191      00 F4 
 192 000f 01 14       	.LVL25:
 193                 	.L21:
 194 0010 01 D4       		ld	AL,#0x0000
 195 0011 00 00 00 00 	.L23:
 195      00 E0 
 196                 		.loc 1 923 0
 197                 		leave	#0x0001
 198 0014 00 14       	.LVL26:
 199                 	.LFE12:
 920:octet_queue.c ****             (handle->start == handle->boundary) &&
 921:octet_queue.c ****             !handle->empty);
 922:octet_queue.c **** } /* OQIsFull */
 200                 	 .-OQIsFull
 201 0015 01 0F       		.global	__size_of_OQIsFull
 202                 		.equ	__size_of_OQIsFull,. - OQIsFull
 203                 		.section	.text.OQCapacity,"ax",@progbits
 204                 		.global	OQCapacity
 205                 		.type	OQCapacity, @function
 206                 	OQCapacity:
 207                 	.LFB13:
 208                 		.loc 1 939 0
 209                 	.LVL27:
 210                 		enter	#0x0001
 211                 	.LCFI5:
 923:octet_queue.c **** 
 924:octet_queue.c **** /*----------------------------------------------------------------------------*
 925:octet_queue.c ****  *  NAME
 926:octet_queue.c ****  *      OQCapacity
 927:octet_queue.c ****  *
 928:octet_queue.c ****  *  DESCRIPTION
 929:octet_queue.c ****  *      Get the total capacity of the octet queue
 930:octet_queue.c ****  *
 931:octet_queue.c ****  *  PARAMETERS
 932:octet_queue.c ****  *      handle [in]             Handle to the octet queue
 933:octet_queue.c ****  *
 934:octet_queue.c ****  *  RETURNS
 935:octet_queue.c ****  *      Total capacity of the queue in octets
 936:octet_queue.c ****  *----------------------------------------------------------------------------*/
 937:octet_queue.c **** uint16 OQCapacity(const OQ_HANDLE handle)
 938:octet_queue.c **** {
 212                 	AL
 213                 		.loc 1 942 0
 214 0000 01 0B       		bne	.L26
 215                 		ld	AH,#0x0000
 216 0001 00 00 00 19 	.LVL28:
 939:octet_queue.c ****     uint16 octet_count = 0;     /* Number of octets the queue can hold */
 940:octet_queue.c **** 
 941:octet_queue.c ****     if (handle != NULL)
 217                 	.L27
 218 0003 00 00 00 00 	.LVL29:
 218      00 F0 
 219 0006 00 10       	.L26:
 220                 		.loc 1 945 0
 221 0007 00 00 00 00 		ld	AH,@(0x0001,X)
 221      00 E0 
 222                 	.LVL30:
 223                 		.loc 1 948 0
 942:octet_queue.c ****     {
 943:octet_queue.c ****         /* Number of elements in the queue */
 944:octet_queue.c ****         octet_count = handle->capacity;
 224                 	@(0x0005,X)
 225 000a 01 12       	.LVL31:
 226                 		cmp	AL,#0x0001
 945:octet_queue.c ****         
 946:octet_queue.c ****         /* For packed mode, we can store 2 octets in each element */
 947:octet_queue.c ****         if (handle->mode == OQDataMode_packed)
 227                 	e	.L27
 228 000b 05 16       		.loc 1 950 0
 229                 		ld	AL,@$XAP_AH
 230 000c 01 84       		asl	#0x0001
 231 000d 00 00 00 00 	.LVL32:
 231      00 F0 
 948:octet_queue.c ****         {
 949:octet_queue.c ****             octet_count *= 2;
 232                 	H,@$XAP_AL
 233 0010 00 00 00 15 	.LVL33:
 234 0012 01 A0       	.L27:
 235                 		.loc 1 955 0
 236 0013 00 00 00 11 		ld	AL,@$XAP_AH
 237                 		leave	#0x0001
 238                 	.LVL34:
 950:octet_queue.c ****         }
 951:octet_queue.c ****     }
 952:octet_queue.c ****     
 953:octet_queue.c ****     return octet_count;
 954:octet_queue.c **** } /* OQCapacity */
 239                 	
 240 0015 00 00 00 15 		.size	OQCapacity, .-OQCapacity
 241 0017 01 0F       		.global	__size_of_OQCapacity
 242                 		.equ	__size_of_OQCapacity,. - OQCapacity
 243                 		.section	.text.OQSize,"ax",@progbits
 244                 		.global	OQSize
 245                 		.type	OQSize, @function
 246                 	OQSize:
 247                 	.LFB10:
 248                 		.loc 1 866 0
 249                 	.LVL35:
 250                 		enter	#0x0003
 251                 	.LCFI6:
 866:octet_queue.c **** {
 252                 	AL
 253                 		.loc 1 870 0
 254 0000 03 0B       		beq	.L30
 255                 		tst	@(0x0004,X)
 256 0001 00 00 00 19 		bne	.L30
 870:octet_queue.c ****     if ((handle != NULL) && !handle->empty)
 257                 	6:
 258 0003 00 00 00 00 		.loc 1 873 0
 258      00 F4 
 259 0006 04 9A       		ld	AL,@(0x0002,X)
 260 0007 00 00 00 00 		st	AL,@(0x0001,Y)
 260      00 F0 
 261                 		ld	AL,@(0x0003,X)
 873:octet_queue.c ****         if (handle->start >= handle->boundary)
 262                 	L,@(0,Y)
 263 000a 02 16       		ld	AL,@(0x0001,Y)
 264 000b 01 27       		cmp	AL,@(0,Y)
 265 000c 03 16       		bcs	.L31
 266 000d 00 27       		.loc 1 875 0
 267 000e 01 17       		ld	AL,@$XAP_UXL
 268 000f 00 87       		bsr	OQCapacity
 269 0010 00 00 00 00 	.LVL37:
 269      00 FC 
 875:octet_queue.c ****             data_size = OQCapacity(handle) - handle->start + handle->boundary;
 270                 	@(0,Y)
 271 0013 00 00 00 15 	.LVL38:
 272 0015 00 00 00 00 		bra	.L34
 272      00 9C 
 273                 	.LVL39:
 274 0018 00 37       	.L31:
 275                 		.loc 1 879 0
 276 0019 00 00 00 00 		ld	AL,@(0,Y)
 276      00 E0 
 277                 	.LVL40:
 278                 	.L34:
 879:octet_queue.c ****             data_size = handle->boundary - handle->start;
 279                 	(0x0001,Y)
 280 001c 00 17       		bra	.L32
 281                 	.LVL41:
 282                 	.L30:
 283 001d 01 57       		ld	AL,#0x0000
 284 001e 00 00 00 00 	.LVL42:
 284      00 E0 
 285                 	.L32:
 286                 	.LVL43:
 287 0021 00 14       		.loc 1 884 0
 288                 		leave	#0x0003
 289                 	.LVL44:
 290                 	.LFE10:
 884:octet_queue.c **** } /* OQSize */
 291                 	e, .-OQSize
 292 0022 03 0F       		.global	__size_of_OQSize
 293                 		.equ	__size_of_OQSize,. - OQSize
 294                 		.section	.text.OQSpace,"ax",@progbits
 295                 		.global	OQSpace
 296                 		.type	OQSpace, @function
 297                 	OQSpace:
 298                 	.LFB14:
 299                 		.loc 1 971 0
 300                 	.LVL45:
 301                 		enter	#0x0003
 302                 	.LCFI7:
 955:octet_queue.c **** 
 956:octet_queue.c **** /*----------------------------------------------------------------------------*
 957:octet_queue.c ****  *  NAME
 958:octet_queue.c ****  *      OQSpace
 959:octet_queue.c ****  *
 960:octet_queue.c ****  *  DESCRIPTION
 961:octet_queue.c ****  *      Available space in an octet queue
 962:octet_queue.c ****  *
 963:octet_queue.c ****  *  PARAMETERS
 964:octet_queue.c ****  *      handle [in]             Handle to the octet queue
 965:octet_queue.c ****  *
 966:octet_queue.c ****  *  RETURNS
 967:octet_queue.c ****  *      Space available in the queue in octets
 968:octet_queue.c ****  *----------------------------------------------------------------------------*/
 969:octet_queue.c **** uint16 OQSpace(const OQ_HANDLE handle)
 970:octet_queue.c **** {
 303                 	001,Y)
 304                 		.loc 1 972 0
 305 0000 03 0B       		bsr	OQCapacity
 306                 	.LVL46:
 307 0001 01 27       		st	AL,@(0,Y)
 971:octet_queue.c ****     return OQCapacity(handle) - OQSize(handle);
 308                 	L,@(0x0001,Y)
 309 0002 00 00 00 00 		bsr	OQSize
 309      00 9C 
 310                 		ld	X,@(0,Y)
 311 0005 00 27       		sub	X,@$XAP_AL
 312 0006 01 17       		.loc 1 973 0
 313 0007 00 00 00 00 		ld	AL,@$XAP_UXL
 313      00 9C 
 314 000a 00 1B       		leave	#0x0003
 315 000b 00 00 00 59 	.LFE14:
 972:octet_queue.c **** } /* OQSpace */
 316                 	QSpace, .-OQSpace
 317 000d 00 00 00 15 		.global	__size_of_OQSpace
 318 000f 03 0F       		.equ	__size_of_OQSpace,. - OQSpace
 319                 		.section	.text.OQClear,"ax",@progbits
 320                 		.global	OQClear
 321                 		.type	OQClear, @function
 322                 	OQClear:
 323                 	.LFB15:
 324                 		.loc 1 993 0
 325                 	.LVL47:
 326                 		enter	#0x0001
 327                 	.LCFI8:
 973:octet_queue.c **** 
 974:octet_queue.c **** /*----------------------------------------------------------------------------*
 975:octet_queue.c ****  *  NAME
 976:octet_queue.c ****  *      OQClear
 977:octet_queue.c ****  *
 978:octet_queue.c ****  *  DESCRIPTION
 979:octet_queue.c ****  *      Clear the data in an octet queue. If buffer filling is enabled for
 980:octet_queue.c ****  *      this octet queue, it fills the empty areas of the buffer with the
 981:octet_queue.c ****  *      fill character configured using #OQSetFill. This actually removes
 982:octet_queue.c ****  *      the data by moving the buffer start index down to coincide with
 983:octet_queue.c ****  *      the buffer end index.
 984:octet_queue.c ****  *
 985:octet_queue.c ****  *  PARAMETERS
 986:octet_queue.c ****  *      handle [in]             Handle to the octet queue
 987:octet_queue.c ****  *
 988:octet_queue.c ****  *  RETURNS
 989:octet_queue.c ****  *      Nothing
 990:octet_queue.c ****  *----------------------------------------------------------------------------*/
 991:octet_queue.c **** void OQClear(OQ_HANDLE handle)
 992:octet_queue.c **** {
 328                 	AL
 329                 		.loc 1 994 0
 330 0000 01 0B       		beq	.L39
 331                 		tst	@(0x0004,X)
 332 0001 00 00 00 19 		bne	.L39
 993:octet_queue.c ****     if ((handle != NULL) && !handle->empty)
 333                 	8:
 334 0003 00 00 00 00 		.loc 1 997 0
 334      00 F4 
 335 0006 04 9A       		ld	AL,@(0x0003,X)
 336 0007 00 00 00 00 		st	AL,@(0x0002,X)
 336      00 F0 
 337                 		.loc 1 1000 0
 994:octet_queue.c ****     {
 995:octet_queue.c ****         /* Reset the start index of the buffer */
 996:octet_queue.c ****         handle->start = handle->boundary;
 338                 	L,#0x0001
 339 000a 03 16       		st	AL,@(0x0004,X)
 340 000b 02 26       	.LVL49:
 997:octet_queue.c ****         
 998:octet_queue.c ****         /* Indicate that the buffer is empty */
 999:octet_queue.c ****         handle->empty = TRUE;
 341                 	9:
 342 000c 01 14       		.loc 1 1011 0
 343 000d 04 26       		leave	#0x0001
 344                 	.LVL50:
 345                 	.LFE15:
1000:octet_queue.c **** 
1001:octet_queue.c **** #ifdef OQ_ENABLE_BUFFER_FILL
1002:octet_queue.c ****         /* Check filling is enabled for this queue */
1003:octet_queue.c ****         if (handle->fill & 0xFF00)
1004:octet_queue.c ****         {
1005:octet_queue.c ****             /* Fill the buffer with fill octets */
1006:octet_queue.c ****             FILL_BUFFER(handle->p_buffer, handle->fill, handle->capacity);
1007:octet_queue.c ****         }
1008:octet_queue.c **** #endif
1009:octet_queue.c ****     }
1010:octet_queue.c **** } /* OQClear */
 346                 	e	OQClear, .-OQClear
 347 000e 01 0F       		.global	__size_of_OQClear
 348                 		.equ	__size_of_OQClear,. - OQClear
 349                 		.section	.text.OQSetFill,"ax",@progbits
 350                 		.global	OQSetFill
 351                 		.type	OQSetFill, @function
 352                 	OQSetFill:
 353                 	.LFB16:
 354                 		.loc 1 1040 0
 355                 	.LVL51:
 356                 		.loc 1 1047 0
 357                 		bra	0,X
1011:octet_queue.c **** 
1012:octet_queue.c **** /*----------------------------------------------------------------------------*
1013:octet_queue.c ****  *  NAME
1014:octet_queue.c ****  *      OQSetFill
1015:octet_queue.c ****  *
1016:octet_queue.c ****  *  DESCRIPTION
1017:octet_queue.c ****  *      Enable/Disable buffer filling and set the fill octet for a given octet
1018:octet_queue.c ****  *      queue. Buffer filling enables automatically setting empty areas of the
1019:octet_queue.c ****  *      queue to a specified fill octet.
1020:octet_queue.c ****  *
1021:octet_queue.c ****  *      The queue need not have been created yet. This function is typically
1022:octet_queue.c ****  *      called prior to OQCreate so that when the queue is created it is
1023:octet_queue.c ****  *      automatically filled with the fill octet.
1024:octet_queue.c ****  *
1025:octet_queue.c ****  *      If the buffer filling feature is disabled (by not defining macro
1026:octet_queue.c ****  *      OQ_ENABLE_BUFFER_FILL) calling this function has no effect.
1027:octet_queue.c ****  *
1028:octet_queue.c ****  *  PARAMETERS
1029:octet_queue.c ****  *      handle [in]             Handle to the octet queue
1030:octet_queue.c ****  *      enable [in]             Set to TRUE to enable buffer filling for this
1031:octet_queue.c ****  *                              octet queue, or FALSE to disable it
1032:octet_queue.c ****  *      fill_octet [in]         Octet to be used to fill the empty space in the
1033:octet_queue.c ****  *                              buffer. Only effective when the parameter
1034:octet_queue.c ****  *                              "enable" is set to TRUE.
1035:octet_queue.c ****  *  RETURNS
1036:octet_queue.c ****  *      Nothing
1037:octet_queue.c ****  *----------------------------------------------------------------------------*/
1038:octet_queue.c **** void OQSetFill(OQ_HANDLE handle, bool enable, uint8 fill_octet)
1039:octet_queue.c **** {
 358                 	ze	OQSetFill, .-OQSetFill
 359                 		.global	__size_of_OQSetFill
1040:octet_queue.c **** #ifdef OQ_ENABLE_BUFFER_FILL
1041:octet_queue.c ****     if (handle != NULL)
1042:octet_queue.c ****     {
1043:octet_queue.c ****         handle->fill = (((uint16)enable) << 8) | (fill_octet & 0xFF);
1044:octet_queue.c ****     }
1045:octet_queue.c **** #endif
1046:octet_queue.c **** } /* OQSetFill */
 360                 	equ	__size_of_OQSetFill,. - OQSetFill
 361 0000 00 E2       		.section	.text.OQRollbackClear,"ax",@progbits
 362                 		.global	OQRollbackClear
 363                 		.type	OQRollbackClear, @function
 364                 	OQRollbackClear:
 365                 	.LFB17:
 366                 		.loc 1 1071 0
 367                 	.LVL52:
 368                 		enter	#0x0001
 369                 	.LCFI9:
 370                 		ld	X,@$XAP_AL
1047:octet_queue.c **** 
1048:octet_queue.c **** /******************************************************************************
1049:octet_queue.c ****  * Interfaces useful for using the queue on a shared memory, for example
1050:octet_queue.c ****  * reading a shared memory area already being filled by external means.
1051:octet_queue.c ****  *****************************************************************************/
1052:octet_queue.c **** 
1053:octet_queue.c **** /*----------------------------------------------------------------------------*
1054:octet_queue.c ****  *  NAME
1055:octet_queue.c ****  *      OQRollbackClear
1056:octet_queue.c ****  *
1057:octet_queue.c ****  *  DESCRIPTION
1058:octet_queue.c ****  *      Same as OQClear, except that it removes the data by moving the buffer
1059:octet_queue.c ****  *      end index up to coincide with the buffer start index. Useful when
1060:octet_queue.c ****  *      the octet queue is used to access a shared buffer, when required to
1061:octet_queue.c ****  *      overwrite any existing data.
1062:octet_queue.c ****  *
1063:octet_queue.c ****  *  PARAMETERS
1064:octet_queue.c ****  *      handle [in]             Handle to the octet queue
1065:octet_queue.c ****  *
1066:octet_queue.c ****  *  RETURNS
1067:octet_queue.c ****  *      Nothing
1068:octet_queue.c ****  *----------------------------------------------------------------------------*/
1069:octet_queue.c **** void OQRollbackClear(OQ_HANDLE handle)
1070:octet_queue.c **** {
 371                 	2 0
 372                 		beq	.L44
 373 0000 01 0B       		tst	@(0x0004,X)
 374                 		bne	.L44
 375 0001 00 00 00 19 	.LVL53:
1071:octet_queue.c ****     if ((handle != NULL) && !handle->empty)
 376                 	 1 1075 0
 377 0003 00 00 00 00 		ld	AL,@(0x0002,X)
 377      00 F4 
 378 0006 04 9A       		st	AL,@(0x0003,X)
 379 0007 00 00 00 00 		.loc 1 1078 0
 379      00 F0 
 380                 		ld	AL,#0x0001
1072:octet_queue.c ****     {
1073:octet_queue.c ****         /* Reset the boundary index of the buffer */
1074:octet_queue.c ****         handle->boundary = handle->start;
 381                 	L,@(0x0004,X)
 382 000a 02 16       	.LVL54:
 383 000b 03 26       	.L44:
1075:octet_queue.c ****         
1076:octet_queue.c ****         /* Indicate that the buffer is empty */
1077:octet_queue.c ****         handle->empty = TRUE;
 384                 	oc 1 1089 0
 385 000c 01 14       		leave	#0x0001
 386 000d 04 26       	.LVL55:
 387                 	.LFE17:
 388                 		.size	OQRollbackClear, .-OQRollbackClear
1078:octet_queue.c ****         
1079:octet_queue.c **** #ifdef OQ_ENABLE_BUFFER_FILL
1080:octet_queue.c ****         /* Check filling is enabled for this queue */
1081:octet_queue.c ****         if (handle->fill & 0xFF00)
1082:octet_queue.c ****         {
1083:octet_queue.c ****             /* Fill the buffer with fill octets */
1084:octet_queue.c ****             FILL_BUFFER(handle->p_buffer, handle->fill, handle->capacity);
1085:octet_queue.c ****         }
1086:octet_queue.c **** #endif
1087:octet_queue.c ****     }
1088:octet_queue.c **** } /* OQRollbackClear */
 389                 	bal	__size_of_OQRollbackClear
 390 000e 01 0F       		.equ	__size_of_OQRollbackClear,. - OQRollbackClear
 391                 		.section	.text.OQIncrementSize,"ax",@progbits
 392                 		.global	OQIncrementSize
 393                 		.type	OQIncrementSize, @function
 394                 	OQIncrementSize:
 395                 	.LFB19:
 396                 		.loc 1 1157 0
 397                 	.LVL56:
 398                 		enter	#0x0004
 399                 	.LCFI10:
 400                 		st	AL,@(0x0001,Y)
1089:octet_queue.c **** 
1090:octet_queue.c **** /*----------------------------------------------------------------------------*
1091:octet_queue.c ****  *  NAME
1092:octet_queue.c ****  *      OQSetSize
1093:octet_queue.c ****  *
1094:octet_queue.c ****  *  DESCRIPTION
1095:octet_queue.c ****  *      Adjust the buffer indexes as per the octet_count supplied. The buffer
1096:octet_queue.c ****  *      size can be increased or decreased, there by affecting the boundary or
1097:octet_queue.c ****  *      start index respectively. Useful when octet queue is used to access
1098:octet_queue.c ****  *      a shared buffer, to account for data added/extracted externally.
1099:octet_queue.c ****  *
1100:octet_queue.c ****  *  PARAMETERS
1101:octet_queue.c ****  *      handle [in]             Handle to the octet queue
1102:octet_queue.c ****  *      octet_count [in]        New queue size, in octets
1103:octet_queue.c ****  *
1104:octet_queue.c ****  *  RETURNS
1105:octet_queue.c ****  *      TRUE:  Success. The queue size is set to the specified value. Any
1106:octet_queue.c ****  *             surplus data is removed (if the fill character is set, removed
1107:octet_queue.c ****  *             data is replaced by that character). If the queue size has
1108:octet_queue.c ****  *             increased the end index is simply increased to account for the
1109:octet_queue.c ****  *             new size.
1110:octet_queue.c ****  *
1111:octet_queue.c ****  *      FALSE: Failed.
1112:octet_queue.c ****  *----------------------------------------------------------------------------*/
1113:octet_queue.c **** bool OQSetSize(OQ_HANDLE handle, uint16 octet_count)
1114:octet_queue.c **** {
1115:octet_queue.c ****     /* Function status */
1116:octet_queue.c ****     bool ret_val = FALSE;
1117:octet_queue.c ****     
1118:octet_queue.c ****     /* Check the new size does not exceed the maximum queue capacity */
1119:octet_queue.c ****     /* (OQCapacity returns 0 if the queue is invalid) */
1120:octet_queue.c ****     if (octet_count <= OQCapacity(handle))
1121:octet_queue.c ****     {
1122:octet_queue.c ****         const uint16 current_size = OQSize(handle);
1123:octet_queue.c ****         
1124:octet_queue.c ****         if (current_size > octet_count)
1125:octet_queue.c ****         {
1126:octet_queue.c ****             OQDecrementSize(handle, current_size - octet_count);
1127:octet_queue.c ****         }
1128:octet_queue.c ****         else if (current_size < octet_count)
1129:octet_queue.c ****         {
1130:octet_queue.c ****             OQIncrementSize(handle, octet_count - current_size);
1131:octet_queue.c ****         }
1132:octet_queue.c ****         
1133:octet_queue.c ****         ret_val = TRUE;
1134:octet_queue.c ****     }
1135:octet_queue.c **** 
1136:octet_queue.c ****     return ret_val;
1137:octet_queue.c **** } /* OQSetSize */
1138:octet_queue.c **** 
1139:octet_queue.c **** /*----------------------------------------------------------------------------*
1140:octet_queue.c ****  *  NAME
1141:octet_queue.c ****  *      OQIncrementSize
1142:octet_queue.c ****  *
1143:octet_queue.c ****  *  DESCRIPTION
1144:octet_queue.c ****  *      Adjust the buffer end index to add a given number of octets, without
1145:octet_queue.c ****  *      actually adding those octets. Useful when the octet queue is used
1146:octet_queue.c ****  *      to access a shared buffer, to adjust for the data added externally
1147:octet_queue.c ****  *
1148:octet_queue.c ****  *  PARAMETERS
1149:octet_queue.c ****  *      handle [in]             Handle to the octet queue
1150:octet_queue.c ****  *      octet_count [in]        Number of octets to add
1151:octet_queue.c ****  *
1152:octet_queue.c ****  *  RETURNS
1153:octet_queue.c ****  *      Number of octets actually added to the queue
1154:octet_queue.c ****  *----------------------------------------------------------------------------*/
1155:octet_queue.c **** uint16 OQIncrementSize(OQ_HANDLE handle, uint16 octet_count)
1156:octet_queue.c **** {
 401                 	002,Y)
 402                 		.loc 1 1159 0
 403 0000 04 0B       		bsr	OQSpace
 404                 	.LVL57:
 405 0001 01 27       		ld	AH,@(0x0002,Y)
 406 0002 02 23       		st	AH,@(0,Y)
1157:octet_queue.c ****     /* Available space in the queue in octets, 0 if the queue is invalid */
1158:octet_queue.c ****     const uint16 space = OQSpace(handle);
 407                 	:
 408 0003 00 00 00 00 		cmp	AH,@$XAP_AL
 408      00 9C 
 409                 	.LVL59:
 410 0006 02 13       		bcz	.L46
 411 0007 00 23       		st	AL,@(0,Y)
 412                 	.LVL60:
 413 0008 00 00 00 81 	.L46:
 414                 		.loc 1 1165 0
 415 000a 00 00 00 00 		tst	@(0,Y)
 415      00 2C 
 416 000d 00 27       		beq	.L47
 417                 	.LBB2:
 418                 		.loc 1 1168 0
1159:octet_queue.c ****     
1160:octet_queue.c ****     /* Check there's enough space left in the queue */
1161:octet_queue.c ****     if (octet_count > space)
1162:octet_queue.c ****         octet_count = space;
1163:octet_queue.c ****     
1164:octet_queue.c ****     if (octet_count > 0)
 419                 	001,Y)
 420 000e 00 9B       	.LVL61:
 421 000f 00 00 00 00 		bsr	OQCapacity
 421      00 F4 
 422                 		ld	X,@(0x0001,Y)
1165:octet_queue.c ****     {
1166:octet_queue.c ****         /* Amount of space left before the buffer wraps round */
1167:octet_queue.c ****         const uint16 remaining = OQCapacity(handle) - handle->boundary;
 423                 	AH,@(0x0003,X)
 424 0012 01 17       		sub	AL,@$XAP_AH
 425                 	.LVL62:
 426 0013 00 00 00 00 		.loc 1 1171 0
 426      00 9C 
 427 0016 01 1B       		ld	X,@(0,Y)
 428 0017 03 12       		cmp	X,@$XAP_AL
 429 0018 00 00 00 55 		bcs	.L48
 430                 		.loc 1 1172 0
1168:octet_queue.c ****         
1169:octet_queue.c ****         /* Advance the boundary to account for the octets added */
1170:octet_queue.c ****         if (octet_count >= remaining)
 431                 	$XAP_UXL
 432 001a 00 1B       		sub	AH,@$XAP_AL
 433 001b 00 00 00 89 		bra	.L51
 434 001d 00 00 00 00 	.L48:
 434      00 FC 
1171:octet_queue.c ****             handle->boundary = octet_count - remaining;
 435                 	c 1 1174 0
 436 0020 00 00 00 11 		add	AH,@(0,Y)
 437 0022 00 00 00 51 	.L51:
 438 0024 00 00 00 00 		ld	X,@(0x0001,Y)
 438      00 E0 
 439                 		st	AH,@(0x0003,X)
1172:octet_queue.c ****         else
1173:octet_queue.c ****             handle->boundary += octet_count;
 440                 	 1 1177 0
 441 0027 00 33       		ld	AH,#0x0000
 442                 		ld	X,@(0x0001,Y)
 443 0028 01 1B       		st	AH,@(0x0004,X)
 444 0029 03 22       	.LVL63:
1174:octet_queue.c ****         
1175:octet_queue.c ****         /* Buffer isn't empty as we have just moved the boundary */
1176:octet_queue.c ****         handle->empty = FALSE;
 445                 	
 446 002a 00 10       	.LBE2:
 447 002b 01 1B       		.loc 1 1181 0
 448 002c 04 22       		ld	AL,@(0,Y)
 449                 	.LVL64:
 450                 		leave	#0x0004
 451                 	.LFE19:
1177:octet_queue.c ****     }
1178:octet_queue.c **** 
1179:octet_queue.c ****     return octet_count;
1180:octet_queue.c **** } /* OQIncrementSize */
 452                 		OQIncrementSize, .-OQIncrementSize
 453 002d 00 17       		.global	__size_of_OQIncrementSize
 454                 		.equ	__size_of_OQIncrementSize,. - OQIncrementSize
 455 002e 04 0F       		.section	.text.OQDecrementSize,"ax",@progbits
 456                 		.global	OQDecrementSize
 457                 		.type	OQDecrementSize, @function
 458                 	OQDecrementSize:
 459                 	.LFB20:
 460                 		.loc 1 1202 0
 461                 	.LVL65:
 462                 		enter	#0x0004
 463                 	.LCFI11:
 464                 		st	AL,@(0x0001,Y)
1181:octet_queue.c **** 
1182:octet_queue.c **** /*----------------------------------------------------------------------------*
1183:octet_queue.c ****  *  NAME
1184:octet_queue.c ****  *      OQDecrementSize
1185:octet_queue.c ****  *
1186:octet_queue.c ****  *  DESCRIPTION
1187:octet_queue.c ****  *      Adjust the buffer start index to remove a given number of octets,
1188:octet_queue.c ****  *      without actually extracting those octets. If buffer filling is
1189:octet_queue.c ****  *      enabled, this also fills the emptied area with the chosen fill
1190:octet_queue.c ****  *      character. Useful when the octet queue is used to access
1191:octet_queue.c ****  *      a shared buffer, to adjust for the data extracted externally.
1192:octet_queue.c ****  *
1193:octet_queue.c ****  *  PARAMETERS
1194:octet_queue.c ****  *      handle [in]             Handle to the octet queue
1195:octet_queue.c ****  *      octet_count [in]        The number of octets to remove
1196:octet_queue.c ****  *
1197:octet_queue.c ****  *  RETURNS
1198:octet_queue.c ****  *      Number of octets actually removed from the queue
1199:octet_queue.c ****  *----------------------------------------------------------------------------*/
1200:octet_queue.c **** uint16 OQDecrementSize(OQ_HANDLE handle, uint16 octet_count)
1201:octet_queue.c **** {
 465                 	02,Y)
 466                 		.loc 1 1205 0
 467 0000 04 0B       		bsr	OQSize
 468                 	.LVL66:
 469 0001 01 27       		.loc 1 1208 0
 470 0002 02 23       		ld	AH,@(0x0002,Y)
1202:octet_queue.c ****     /* Total available data in the queue, in octets */
1203:octet_queue.c ****     /* (This will be 0 if handle is invalid) */
1204:octet_queue.c ****     const uint16 avlbl_data = OQSize(handle);
 471                 	,@(0,Y)
 472 0003 00 00 00 00 	.LVL67:
 472      00 9C 
 473                 		cmp	AH,@$XAP_AL
1205:octet_queue.c ****     
1206:octet_queue.c ****     /* Number of octets of data that are to be removed */
1207:octet_queue.c ****     const uint16 octets_removed = MIN(avlbl_data, octet_count);
 474                 	L68:
 475 0006 02 13       		bcz	.L53
 476 0007 00 23       		st	AL,@(0,Y)
 477                 	.LVL69:
 478 0008 00 00 00 81 	.L53:
 479                 		.loc 1 1214 0
 480 000a 00 00 00 00 		tst	@(0,Y)
 480      00 2C 
 481 000d 00 27       		beq	.L54
 482                 		.loc 1 1218 0
 483                 		ld	AL,@(0x0001,Y)
1208:octet_queue.c ****     
1209:octet_queue.c ****     /* Number of octets between queue head and end of buffer */
1210:octet_queue.c ****     uint16 wrap_size;
1211:octet_queue.c **** 
1212:octet_queue.c ****     /* If there is no data to be removed return now */
1213:octet_queue.c ****     if (octets_removed == 0)
 484                 	sr	OQCapacity
 485 000e 00 9B       		ld	X,@(0x0001,Y)
 486 000f 00 00 00 00 		ld	AH,@(0x0002,X)
 486      00 F4 
1214:octet_queue.c ****         return 0;
1215:octet_queue.c **** 
1216:octet_queue.c ****     /* Safe to initialise wrap_size now */
1217:octet_queue.c ****     wrap_size = OQCapacity(handle) - handle->start;
 487                 	b	AL,@$XAP_AH
 488 0012 01 17       	.LVL71:
 489                 		.loc 1 1310 0
 490 0013 00 00 00 00 		ld	X,@(0,Y)
 490      00 9C 
 491 0016 01 1B       		cmp	X,@$XAP_AL
 492 0017 02 12       		bcs	.L55
 493 0018 00 00 00 55 		.loc 1 1311 0
 494                 		ld	AH,@$XAP_UXL
1218:octet_queue.c **** 
1219:octet_queue.c **** #ifdef OQ_ENABLE_BUFFER_FILL
1220:octet_queue.c ****     /* If buffer filling has not been disabled */
1221:octet_queue.c **** 
1222:octet_queue.c ****     /* Check whether buffer filling is enabled for this queue */
1223:octet_queue.c ****     if (handle->fill & 0xff00)
1224:octet_queue.c ****     {
1225:octet_queue.c ****         /* Fill octet */
1226:octet_queue.c ****         const uint16 fill = handle->fill & 0x00ff;
1227:octet_queue.c ****         
1228:octet_queue.c ****         /* Number of octets remaining to be filled */
1229:octet_queue.c ****         uint16 octets_to_be_filled = octets_removed;
1230:octet_queue.c ****     
1231:octet_queue.c ****         /* Check whether the queue is packed or unpacked */
1232:octet_queue.c ****         if (handle->mode == OQDataMode_packed)
1233:octet_queue.c ****         {
1234:octet_queue.c ****             /* Pointer into queue buffer */
1235:octet_queue.c ****             uint16 *ptr = (uint16 *)handle->p_buffer + handle->start/2;
1236:octet_queue.c **** 
1237:octet_queue.c ****             /* How many octets remain before the queue wraps round */
1238:octet_queue.c ****             uint16 remaining = wrap_size;
1239:octet_queue.c **** 
1240:octet_queue.c ****             /* If the first byte is from the MSB, fill that byte */
1241:octet_queue.c ****             if (handle->start & 0x1)
1242:octet_queue.c ****             {
1243:octet_queue.c ****                 /* Insert the fill octet into the MSB */
1244:octet_queue.c ****                 *ptr = (*ptr & 0x00ff) | (fill << 8);
1245:octet_queue.c ****             
1246:octet_queue.c ****                 /* Advance the buffer pointer */
1247:octet_queue.c ****                 ptr++;
1248:octet_queue.c ****             
1249:octet_queue.c ****                 /* Decrement number of octets remaining before queue wraps */
1250:octet_queue.c ****                 remaining--;
1251:octet_queue.c ****             
1252:octet_queue.c ****                 /* Decrement number of octets to be filled */
1253:octet_queue.c ****                 octets_to_be_filled--;
1254:octet_queue.c ****             }
1255:octet_queue.c **** 
1256:octet_queue.c ****             /* Check whether the queue will wrap round */
1257:octet_queue.c ****             if (octets_to_be_filled >= remaining)
1258:octet_queue.c ****             {
1259:octet_queue.c ****                 /* Set the remaining octets in the buffer */
1260:octet_queue.c ****                 FILL_BUFFER(ptr, fill, remaining/2);
1261:octet_queue.c ****                 
1262:octet_queue.c ****                 /* Decrement the number of octets waiting to be filled */
1263:octet_queue.c ****                 octets_to_be_filled -= remaining;
1264:octet_queue.c **** 
1265:octet_queue.c ****                 /* Reset the buffer pointer */
1266:octet_queue.c ****                 ptr = handle->p_buffer;
1267:octet_queue.c ****             }
1268:octet_queue.c **** 
1269:octet_queue.c ****             /* Fill the buffer with the fill octet */
1270:octet_queue.c ****             FILL_BUFFER(ptr, fill, octets_to_be_filled/2);
1271:octet_queue.c **** 
1272:octet_queue.c ****             /* If there is an odd octet remaining to be filled */
1273:octet_queue.c ****             if (octets_to_be_filled & 0x1)
1274:octet_queue.c ****             {
1275:octet_queue.c ****                 /* Advance buffer pointer */
1276:octet_queue.c ****                 ptr += octets_to_be_filled/2;
1277:octet_queue.c ****             
1278:octet_queue.c ****                 /* Fill the octet in the LSB leaving the MSB unaltered */
1279:octet_queue.c ****                 *ptr = (*ptr & 0xff00) | fill;
1280:octet_queue.c ****             }
1281:octet_queue.c ****         }
1282:octet_queue.c ****         else /* handle->mode == OQDataMode_unpacked */
1283:octet_queue.c ****         {
1284:octet_queue.c ****             /* Octet queue is unpacked */
1285:octet_queue.c **** 
1286:octet_queue.c ****             /* Pointer into queue buffer */
1287:octet_queue.c ****             uint8 *ptr = (uint8 *)handle->p_buffer + handle->start;
1288:octet_queue.c ****             
1289:octet_queue.c ****             /* Check whether the queue will wrap round */
1290:octet_queue.c ****             if (octets_to_be_filled >= wrap_size)
1291:octet_queue.c ****             {
1292:octet_queue.c ****                 /* Fill the rest of the buffer */
1293:octet_queue.c ****                 FILL_BUFFER(ptr, fill, wrap_size);
1294:octet_queue.c **** 
1295:octet_queue.c ****                 /* Decrement the number of octets waiting to be filled */
1296:octet_queue.c ****                 octets_to_be_filled -= wrap_size;
1297:octet_queue.c ****                   
1298:octet_queue.c ****                 /* Reset the buffer pointer */
1299:octet_queue.c ****                 ptr = handle->p_buffer;
1300:octet_queue.c ****             }
1301:octet_queue.c **** 
1302:octet_queue.c ****             /* Fill the queue buffer */
1303:octet_queue.c ****             FILL_BUFFER(ptr, fill, octets_to_be_filled);
1304:octet_queue.c ****         }
1305:octet_queue.c ****     }
1306:octet_queue.c **** #endif /* OQ_ENABLE_BUFFER_FILL */
1307:octet_queue.c **** 
1308:octet_queue.c ****     /* Advance queue start index, wrapping when end of buffer is reached */
1309:octet_queue.c ****     if (octets_removed >= wrap_size)
 495                 	@$XAP_AL
 496 001a 00 1B       		bra	.L58
 497 001b 00 00 00 89 	.L55:
 498 001d 00 00 00 00 		.loc 1 1313 0
 498      00 FC 
1310:octet_queue.c ****         handle->start = octets_removed - wrap_size;
 499                 		AH,@(0,Y)
 500 0020 00 00 00 11 	.L58:
 501 0022 00 00 00 51 		ld	X,@(0x0001,Y)
 502 0024 00 00 00 00 		st	AH,@(0x0002,X)
 502      00 E0 
 503                 		.loc 1 1316 0
1311:octet_queue.c ****     else
1312:octet_queue.c ****         handle->start += octets_removed;
 504                 	,@(0x0001,Y)
 505 0027 00 33       		ld	AL,@(0x0002,X)
 506                 	.LVL72:
 507 0028 01 1B       		cmp	AL,@(0x0003,X)
 508 0029 02 22       		bne	.L54
1313:octet_queue.c **** 
1314:octet_queue.c ****     /* Indicate whether the queue is empty */
1315:octet_queue.c ****     if (handle->start == handle->boundary)
 509                 	 1 1317 0
 510 002a 01 1B       		ld	AH,#0x0001
 511 002b 02 16       		st	AH,@(0x0004,X)
 512                 	.LVL73:
 513 002c 03 86       	.L54:
 514 002d 00 00 00 00 		.loc 1 1321 0
 514      00 F0 
1316:octet_queue.c ****         handle->empty = TRUE;
 515                 	,@(0,Y)
 516 0030 01 10       	.LVL74:
 517 0031 04 22       		leave	#0x0004
 518                 	.LFE20:
 519                 		.size	OQDecrementSize, .-OQDecrementSize
1317:octet_queue.c ****     
1318:octet_queue.c ****     /* Return the number of octets the queue size has been decremented by */
1319:octet_queue.c ****     return octets_removed;
1320:octet_queue.c **** } /* OQDecrementSize */
 520                 	bal	__size_of_OQDecrementSize
 521 0032 00 17       		.equ	__size_of_OQDecrementSize,. - OQDecrementSize
 522                 		.section	.text.OQSetSize,"ax",@progbits
 523 0033 04 0F       		.global	OQSetSize
 524                 		.type	OQSetSize, @function
 525                 	OQSetSize:
 526                 	.LFB18:
 527                 		.loc 1 1115 0
 528                 	.LVL75:
 529                 		enter	#0x0003
 530                 	.LCFI12:
 531                 		st	AL,@(0,Y)
 532                 		st	AH,@(0x0001,Y)
1115:octet_queue.c **** {
 533                 	0
 534                 		bsr	OQCapacity
 535 0000 03 0B       	.LVL76:
 536                 		ld	X,@(0x0001,Y)
 537 0001 00 27       		cmp	X,@$XAP_AL
 538 0002 01 23       		bcz	.L60
1121:octet_queue.c ****     if (octet_count <= OQCapacity(handle))
 539                 	,#0x0000
 540 0003 00 00 00 00 	.LVL77:
 540      00 9C 
 541                 		bra	.L61
 542 0006 01 1B       	.LVL78:
 543 0007 00 00 00 89 	.L60:
 544 0009 00 00 00 00 	.LBB3:
 544      00 2C 
 545 000c 00 14       		.loc 1 1123 0
 546                 		ld	AL,@(0,Y)
 547 000d 00 00 00 00 		bsr	OQSize
 547      00 E0 
 548                 		ld	AH,@$XAP_AL
 549                 	.LVL79:
 550                 		.loc 1 1125 0
1123:octet_queue.c ****         const uint16 current_size = OQSize(handle);
 551                 	0001,Y)
 552 0010 00 17       		bcz	.L62
 553 0011 00 00 00 00 	.LVL80:
 553      00 9C 
 554 0014 00 00 00 11 		.loc 1 1127 0
 555                 		sub	AH,@(0x0001,Y)
1125:octet_queue.c ****         if (current_size > octet_count)
 556                 	1:
 557 0016 01 87       		ld	AL,@(0,Y)
 558 0017 00 00 00 00 		bsr	OQDecrementSize
 558      00 2C 
 559                 	.LVL82:
1127:octet_queue.c ****             OQDecrementSize(handle, current_size - octet_count);
 560                 		.L65
 561 001a 01 53       	.LVL83:
 562                 	.L62:
 563 001b 00 17       		.loc 1 1129 0
 564 001c 00 00 00 00 		cmp	AL,@(0x0001,Y)
 564      00 9C 
 565                 		bcc	.L65
 566 001f 00 00 00 00 	.L63:
 566      00 E0 
 567                 		.loc 1 1131 0
 568                 		ld	AL,@(0x0001,Y)
1129:octet_queue.c ****         else if (current_size < octet_count)
 569                 	sub	AL,@$XAP_AH
 570 0022 01 87       		st	AL,@(0x0001,Y)
 571 0023 00 00 00 00 	.LVL85:
 571      00 F8 
 572                 		ld	AL,@(0,Y)
1131:octet_queue.c ****             OQIncrementSize(handle, octet_count - current_size);
 573                 	AH,@(0x0001,Y)
 574 0026 01 17       	.LVL86:
 575                 		bsr	OQIncrementSize
 576 0027 00 00 00 55 	.LVL87:
 577 0029 01 27       	.L65:
 578                 		ld	AL,#0x0001
 579 002a 00 17       	.LVL88:
 580 002b 01 13       	.L61:
 581                 	.LVL89:
 582 002c 00 00 00 00 	.LBE3:
 582      00 9C 
 583                 		.loc 1 1138 0
 584                 		leave	#0x0003
 585 002f 01 14       	.LFE18:
 586                 		.size	OQSetSize, .-OQSetSize
 587                 		.global	__size_of_OQSetSize
 588                 		.equ	__size_of_OQSetSize,. - OQSetSize
 589                 		.section	.text.OQGetStartOffset,"ax",@progbits
1138:octet_queue.c **** } /* OQSetSize */
 590                 	rtOffset
 591 0030 03 0F       		.type	OQGetStartOffset, @function
 592                 	OQGetStartOffset:
 593                 	.LFB21:
 594                 		.loc 1 1338 0
 595                 	.LVL90:
 596                 		enter	#0x0001
 597                 	.LCFI13:
 598                 		ld	X,@$XAP_AL
 599                 		.loc 1 1339 0
 600                 		bne	.L67
1321:octet_queue.c **** 
1322:octet_queue.c **** /*----------------------------------------------------------------------------*
1323:octet_queue.c ****  *  NAME
1324:octet_queue.c ****  *      OQGetStartOffset
1325:octet_queue.c ****  *
1326:octet_queue.c ****  *  DESCRIPTION
1327:octet_queue.c ****  *      Get the offset to the head of the queue in octets.
1328:octet_queue.c ****  *
1329:octet_queue.c ****  *  PARAMETERS
1330:octet_queue.c ****  *      handle [in]             Handle to the octet queue
1331:octet_queue.c ****  *
1332:octet_queue.c ****  *  RETURNS
1333:octet_queue.c ****  *      Index of the first octet in the buffer. For an empty queue this is
1334:octet_queue.c ****  *      the index where the first octet will be queued.
1335:octet_queue.c ****  *----------------------------------------------------------------------------*/
1336:octet_queue.c **** uint16 OQGetStartOffset(const OQ_HANDLE handle)
1337:octet_queue.c **** {
 601                 	000
 602                 	.LVL91:
 603 0000 01 0B       		bra	.L68
 604                 	.LVL92:
 605 0001 00 00 00 19 	.L67:
1338:octet_queue.c ****     return (handle != NULL) ? handle->start : 0;
 606                 	L,@(0x0002,X)
 607 0003 00 00 00 00 	.LVL93:
 607      00 F0 
 608 0006 00 14       	.L68:
 609                 		.loc 1 1340 0
 610 0007 00 00 00 00 		leave	#0x0001
 610      00 E0 
 611                 	.LVL94:
 612                 	.LFE21:
 613 000a 02 16       		.size	OQGetStartOffset, .-OQGetStartOffset
 614                 		.global	__size_of_OQGetStartOffset
 615                 		.equ	__size_of_OQGetStartOffset,. - OQGetStartOffset
1339:octet_queue.c **** } /* OQGetStartOffset */
 616                 	.text.OQGetEndOffset,"ax",@progbits
 617 000b 01 0F       		.global	OQGetEndOffset
 618                 		.type	OQGetEndOffset, @function
 619                 	OQGetEndOffset:
 620                 	.LFB22:
 621                 		.loc 1 1357 0
 622                 	.LVL95:
 623                 		enter	#0x0001
 624                 	.LCFI14:
 625                 		ld	X,@$XAP_AL
 626                 		.loc 1 1362 0
 627                 		bne	.L71
1340:octet_queue.c **** 
1341:octet_queue.c **** /*----------------------------------------------------------------------------*
1342:octet_queue.c ****  *  NAME
1343:octet_queue.c ****  *      OQGetEndOffset
1344:octet_queue.c ****  *
1345:octet_queue.c ****  *  DESCRIPTION
1346:octet_queue.c ****  *      Get the offset of the tail of the queue in octets.
1347:octet_queue.c ****  *
1348:octet_queue.c ****  *  PARAMETERS
1349:octet_queue.c ****  *      handle [in]             Handle to the octet queue
1350:octet_queue.c ****  *
1351:octet_queue.c ****  *  RETURNS
1352:octet_queue.c ****  *      Index of the last octet in the buffer. For an empty queue this is
1353:octet_queue.c ****  *      invalid and does not point to any valid data
1354:octet_queue.c ****  *----------------------------------------------------------------------------*/
1355:octet_queue.c **** uint16 OQGetEndOffset(const OQ_HANDLE handle)
1356:octet_queue.c **** {
 628                 	00
 629                 	.LVL96:
 630 0000 01 0B       		bra	.L72
 631                 	.LVL97:
 632 0001 00 00 00 19 	.L71:
1357:octet_queue.c ****     /* Index of last octet in the queue */
1358:octet_queue.c ****     uint16 end_offset = 0;
1359:octet_queue.c ****     
1360:octet_queue.c ****     /* Check the queue is valid */
1361:octet_queue.c ****     if (handle != NULL)
 633                 	 1 1365 0
 634 0003 00 00 00 00 		ld	AL,@(0x0003,X)
 634      00 F0 
 635 0006 00 14       	.LVL98:
 636                 		.loc 1 1370 0
 637 0007 00 00 00 00 		bne	.L75
 637      00 E0 
 638                 	.L73:
 639                 		.loc 1 1378 0
1362:octet_queue.c ****     {
1363:octet_queue.c ****         /* Extract the offset to the end of the queue */
1364:octet_queue.c ****         end_offset = handle->boundary;
 640                 	@$XAP_UXL
 641 000a 03 16       	.LVL99:
 642                 		bsr	OQCapacity
1365:octet_queue.c ****         
1366:octet_queue.c ****         /* The boundary index actually points to the next octet to be filled at
1367:octet_queue.c ****          * the end of the queue. Decrement the index by one to find the most
1368:octet_queue.c ****          * recently queued item */
1369:octet_queue.c ****         if (end_offset > 0)
 643                 	L100:
 644 000b 00 00 00 00 	.L75:
 644      00 F0 
 645                 		add	AL,#0xffff
1370:octet_queue.c ****         {
1371:octet_queue.c ****             /* If the index is not at 0 it can simply be decremented */
1372:octet_queue.c ****             end_offset--;
1373:octet_queue.c ****         }
1374:octet_queue.c ****         else
1375:octet_queue.c ****         {
1376:octet_queue.c ****             /* Otherwise it needs to wrap round to the maximum index */
1377:octet_queue.c ****             end_offset = OQCapacity(handle) - 1;
 646                 	L101:
 647 000e 00 00 00 15 	.L72:
 648                 	.LVL102:
 649 0010 00 00 00 00 		.loc 1 1383 0
 649      00 9C 
 650                 		leave	#0x0001
 651                 	.LVL103:
 652 0013 FF 34       	.LFE22:
 653                 		.size	OQGetEndOffset, .-OQGetEndOffset
 654                 		.global	__size_of_OQGetEndOffset
 655                 		.equ	__size_of_OQGetEndOffset,. - OQGetEndOffset
1378:octet_queue.c ****         }
1379:octet_queue.c ****     }
1380:octet_queue.c **** 
1381:octet_queue.c ****     return end_offset;
1382:octet_queue.c **** } /* OQGetEndOffset */
 656                 	.text.OQPopData,"ax",@progbits
 657 0014 01 0F       		.global	OQPopData
 658                 		.type	OQPopData, @function
 659                 	OQPopData:
 660                 	.LFB8:
 661                 		.loc 1 755 0
 662                 	.LVL104:
 663                 		enter	#0x0009
 664                 	.LCFI15:
 665                 		st	AL,@(0x0005,Y)
 666                 		st	AH,@(0x0006,Y)
 667                 	.LBB11:
 755:octet_queue.c **** {
 668                 	0
 669                 		bsr	OQSize
 670 0000 09 0B       	.LVL105:
 671                 	.LBB12:
 672 0001 05 27       		.loc 1 444 0
 673 0002 06 23       		ld	X,@(0x0009,Y)
 674                 		st	X,@(0,Y)
 441:octet_queue.c ****     const uint16 avlbl_data = OQSize(handle);
 675                 	:
 676 0003 00 00 00 00 		cmp	X,@$XAP_AL
 676      00 9C 
 677                 	.LVL107:
 678                 		bcz	.L77
 444:octet_queue.c ****     const uint16 octets_fetched = MIN(avlbl_data, data_size_in_octets);
 679                 	108:
 680 0006 09 1B       		st	AL,@(0,Y)
 681 0007 00 2B       	.LVL109:
 682                 	.L77:
 683 0008 00 00 00 89 		.loc 1 450 0
 684                 		tst	@(0,Y)
 685 000a 00 00 00 00 		beq	.L78
 685      00 2C 
 686                 		.loc 1 453 0
 687 000d 00 27       		ld	X,@(0x0005,Y)
 688                 		ld	AL,@(0x0005,X)
 689                 	.LVL110:
 450:octet_queue.c ****     if (data_to_be_fetched == 0)
 690                 	)
 691 000e 00 9B       		st	X,@0xfff8
 692 000f 00 00 00 00 		ld	X,@(0x0005,Y)
 692      00 F4 
 453:octet_queue.c ****     if (handle->mode == OQDataMode_packed)
 693                 		X,@(0x0002,X)
 694 0012 05 1B       		st	X,@(0x0007,Y)
 695 0013 05 16       		cmp	AL,#0x0001
 696                 		bne	.L79
 697 0014 00 1A       	.LBB15:
 698 0015 F8 29       		.loc 1 458 0
 699 0016 05 1B       		ld	AH,@$XAP_UXL
 700 0017 02 1A       		lsr	#0x0001
 701 0018 07 2B       		ld	AL,@$XAP_AH
 702 0019 01 84       		add	AL,@0xfff8
 703 001a 00 00 00 00 		st	AL,@(0x0001,Y)
 703      00 F0 
 704                 	.LVL111:
 458:octet_queue.c ****         const uint16 *in = (const uint16 *)handle->p_buffer + handle->start/2;
 705                 	0
 706 001d 00 00 00 11 		ld	X,@(0x0006,Y)
 707 001f 00 09 01 A4 		st	X,@(0x0002,Y)
 708 0021 00 00 00 15 	.LVL112:
 709 0023 F8 35       		.loc 1 467 0
 710 0024 01 27       		ld	AL,@(0x0007,Y)
 711                 		and	AL,#0x0001
 460:octet_queue.c ****         uint16 *out = (uint16 *)p_data;
 712                 	80
 713 0025 06 1B       	.LBB17:
 714 0026 02 2B       		.loc 1 471 0
 715                 		ld	AL,@0xfff8
 467:octet_queue.c ****         if (in_msb)
 716                 	X,@(0x0005,Y)
 717 0027 07 17       		add	AL,@(0x0001,X)
 718 0028 01 C4       		st	AL,@0xfffa
 719 0029 00 00 00 00 	.LVL113:
 719      00 F4 
 720                 		ld	X,@(0,Y)
 471:octet_queue.c ****                                                               handle->capacity;
 721                 	,@0xfff9
 722 002c F8 15       	.LVL114:
 723 002d 05 1B       		ld	AL,#0x0000
 724 002e 01 36       		st	AL,@0xfff8
 725 002f FA 25       	.LVL115:
 726                 		ld	X,#0x0001
 727 0030 00 1B       		st	X,@0xfffb
 728 0031 F9 29       	.LVL116:
 729                 	.L89:
 730 0032 00 14       	.LBB18:
 731 0033 F8 25       		.loc 1 481 0
 732                 		tst	@0xfffb
 733 0034 01 18       		beq	.L81
 734 0035 FB 29       		.loc 1 483 0
 735                 		ld	X,@(0x0001,Y)
 736                 		ld	AH,@(0,X)
 737                 	.LVL117:
 481:octet_queue.c ****                 if (in_msb)
 738                 	c 1 484 0
 739 0036 FB 99       		add	X,#0x0001
 740 0037 00 00 00 00 		st	X,@(0x0001,Y)
 740      00 F4 
 483:octet_queue.c ****                     src_octet = (*in & 0xff00) >> 8;
 741                 	L118:
 742 003a 01 1B       		bra	.L82
 743 003b 00 12       	.LVL119:
 744                 	.L81:
 745 003c 00 09 08 A4 		.loc 1 488 0
 484:octet_queue.c ****                     in++;   /* Move the input pointer to the next word */
 746                 	,@(0x0001,Y)
 747 003e 01 38       		ld	AH,@(0,X)
 748 003f 01 2B       		and	AH,#0x00ff
 749                 	.L82:
 750 0040 00 00 00 00 		.loc 1 492 0
 750      00 E0 
 751                 		tst	@0xfff8
 752                 		beq	.L83
 488:octet_queue.c ****                     src_octet = *in & 0x00ff;
 753                 	 494 0
 754 0043 01 1B       		ld	AL,@$XAP_AH
 755 0044 00 12       		asl	#0x0008
 756 0045 01 00 FF C0 	.LVL120:
 757                 		ld	X,@(0x0002,Y)
 492:octet_queue.c ****                 if (out_msb)
 758                 	H,@(0,X)
 759 0047 F8 99       		and	AH,#0x00ff
 760 0048 00 00 00 00 		or	AL,@$XAP_AH
 760      00 F4 
 494:octet_queue.c ****                     *out = (*out & 0x00ff) | (src_octet << 8);
 761                 		AL,@(0,X)
 762 004b 00 00 00 15 		.loc 1 495 0
 763 004d 08 A0       		add	X,#0x0001
 764                 		st	X,@(0x0002,Y)
 765 004e 02 1B       	.LVL121:
 766 004f 00 12       		bra	.L84
 767 0050 01 00 FF C0 	.LVL122:
 768 0052 00 00 00 B5 	.L83:
 769 0054 00 26       		.loc 1 499 0
 495:octet_queue.c ****                     out++;  /* Move the output pointer to the next word */
 770                 	x0002,Y)
 771 0055 01 38       		ld	AL,@(0,X)
 772 0056 02 2B       		and	AL,#0xff00
 773                 		or	AH,@$XAP_AL
 774 0057 00 00 00 00 		st	AH,@(0,X)
 774      00 E0 
 775                 	.L84:
 776                 		.loc 1 513 0
 499:octet_queue.c ****                     *out = (*out & 0xff00) | src_octet;
 777                 	@0xfff9
 778 005a 02 1B       		add	AL,#0xffff
 779 005b 00 16       		st	AL,@0xfff9
 780 005c FF 00 00 C4 		.loc 1 516 0
 781 005e 00 00 00 B1 		ld	X,@(0x0001,Y)
 782 0060 00 22       		cmp	X,@0xfffa
 783                 		bne	.L85
 513:octet_queue.c ****                 data_to_be_fetched--;
 784                 	 518 0
 785 0061 F9 15       		ld	X,@(0x0005,Y)
 786 0062 FF 34       		ld	X,@(0,X)
 787 0063 F9 25       		st	X,@(0x0001,Y)
 516:octet_queue.c ****                 if (in == buffer_end)
 788                 	123:
 789 0064 01 1B       	.L85:
 790 0065 FA 89       	.LBE18:
 791 0066 00 00 00 00 		.loc 1 520 0
 791      00 F0 
 518:octet_queue.c ****                     in = (const uint16 *)handle->p_buffer;
 792                 		@0xfff9
 793 0069 05 1B       		beq	.L86
 794 006a 00 1A       	.LBB19:
 795 006b 01 2B       		.loc 1 503 0
 796                 		ld	AL,#0x0000
 797                 		tst	@0xfffb
 798                 		bne	.L87
 520:octet_queue.c ****             } while (data_to_be_fetched > 0);
 799                 	#0x0001
 800 006c F9 99       	.L87:
 801 006d 00 00 00 00 		st	AL,@0xfffb
 801      00 F4 
 802                 		.loc 1 504 0
 503:octet_queue.c ****                 in_msb = !in_msb;
 803                 	AL,#0x0000
 804 0070 00 14       		tst	@0xfff8
 805 0071 FB 99       		bne	.L88
 806 0072 00 00 00 00 		ld	AL,#0x0001
 806      00 F0 
 807 0075 01 14       	.L88:
 808                 		st	AL,@0xfff8
 809 0076 FB 25       		bra	.L89
 504:octet_queue.c ****                 out_msb = !out_msb;
 810                 	:
 811 0077 00 14       	.L80:
 812 0078 F8 99       	.LBE19:
 813 0079 00 00 00 00 	.LBE17:
 813      00 F0 
 814 007c 01 14       	.LBE15:
 815                 	.LBE12:
 816 007d F8 25       		.loc 1 525 0
 817 007e 00 00 00 00 		ld	AL,@(0x0005,Y)
 817      00 E0 
 818                 		bsr	OQCapacity
 819                 	.LBB23:
 820                 	.LBB21:
 821                 	.LBB16:
 822                 		sub	AL,@(0x0007,Y)
 823                 		st	AL,@0xfff9
 525:octet_queue.c ****             const uint16 remaining = OQCapacity(handle) - handle->start;
 824                 	 1 528 0
 825 0081 05 17       		ld	X,@(0,Y)
 826 0082 00 00 00 00 		cmp	X,@$XAP_AL
 826      00 9C 
 827                 		bcc	.L90
 828                 	.LVL126:
 829                 		st	X,@0xfff9
 830 0085 07 57       	.LVL127:
 831 0086 F9 25       		bra	.L91
 832                 	.LVL128:
 528:octet_queue.c ****             if (data_to_be_fetched >= remaining)
 833                 	oc 1 531 0
 834 0087 00 1B       		ld	AH,@$XAP_AL
 835 0088 00 00 00 89 		lsr	#0x0001
 836 008a 00 00 00 00 	.LVL129:
 836      00 F8 
 837                 		st	AH,@0xfff8
 838 008d F9 29       		ld	AL,@$XAP_AH
 839                 		ld	AH,@(0x0002,Y)
 840 008e 00 00 00 00 		ld	X,@(0x0001,Y)
 840      00 E0 
 841                 		bc2
 842                 		.loc 1 534 0
 531:octet_queue.c ****                 MemCopy(out, in, remaining/2);
 843                 	,Y)
 844 0091 00 00 00 11 		sub	AL,@0xfff9
 845 0093 00 09 01 A4 		st	AL,@0xfff9
 846                 	.LVL130:
 847 0095 F8 21       		.loc 1 537 0
 848 0096 00 00 00 15 		ld	X,@(0x0005,Y)
 849 0098 02 13       		ld	X,@(0,X)
 850 0099 01 1B       		st	X,@(0x0001,Y)
 851 009a FD 09       	.LVL131:
 534:octet_queue.c ****                 data_to_be_fetched -= remaining;
 852                 	40 0
 853 009b 00 17       		ld	AL,@(0x0002,Y)
 854 009c F9 55       		add	AL,@0xfff8
 855 009d F9 25       		st	AL,@(0x0002,Y)
 856                 	.LVL132:
 537:octet_queue.c ****                 in = (const uint16 *)handle->p_buffer;
 857                 	
 858 009e 05 1B       		.loc 1 544 0
 859 009f 00 1A       		ld	AH,@0xfff9
 860 00a0 01 2B       		lsr	#0x0001
 861                 	.LVL133:
 540:octet_queue.c ****                 out += remaining/2;
 862                 	AH,@0xfff8
 863 00a1 02 17       		ld	AL,@$XAP_AH
 864 00a2 F8 35       		ld	AH,@(0x0002,Y)
 865 00a3 02 27       		ld	X,@(0x0001,Y)
 866                 		bc2
 867                 	.LBE16:
 544:octet_queue.c ****             MemCopy(out, in, data_to_be_fetched/2);
 868                 	:
 869 00a4 F9 11       	.LBE23:
 870 00a5 00 09 01 A4 		.loc 1 547 0
 871                 		ld	X,@0xfff9
 872 00a7 F8 21       		and	X,#0x0001
 873 00a8 00 00 00 15 		beq	.L86
 874 00aa 02 13       	.LVL134:
 875 00ab 01 1B       	.LBB24:
 876 00ac FD 09       	.LBB14:
 877                 	.LBB20:
 878                 		.loc 1 551 0
 879                 		ld	AL,@(0x0002,Y)
 547:octet_queue.c ****             if (data_to_be_fetched & 0x1)
 880                 	ff8
 881 00ad F9 19       		.loc 1 554 0
 882 00ae 01 C8       		ld	X,@(0x0001,Y)
 883 00af 00 00 00 00 	.LVL135:
 883      00 F4 
 884                 		add	X,@0xfff8
 885                 		ld	AH,@(0,X)
 886                 		and	AH,#0x00ff
 887                 		ld	X,@$XAP_AL
 551:octet_queue.c ****                 out += data_to_be_fetched/2;
 888                 	(0,X)
 889 00b2 02 17       		and	AL,#0xff00
 890 00b3 F8 35       		or	AH,@$XAP_AL
 554:octet_queue.c ****                 *out = (*out & 0xff00) | (*in & 0x00ff);
 891                 		AH,@(0,X)
 892 00b4 01 1B       		bra	.L86
 893                 	.LVL136:
 894 00b5 F8 39       	.L79:
 895 00b6 00 12       	.LBE20:
 896 00b7 01 00 FF C0 	.LBE14:
 897 00b9 00 00 00 19 	.LBB13:
 898 00bb 00 16       		.loc 1 563 0
 899 00bc FF 00 00 C4 		ld	AL,@(0x0007,Y)
 900 00be 00 00 00 B1 		add	AL,@0xfff8
 901 00c0 00 22       		st	AL,@(0x0003,Y)
 902 00c1 00 00 00 00 	.LVL137:
 902      00 E0 
 903                 		.loc 1 565 0
 904                 		ld	X,@(0x0006,Y)
 905                 		st	X,@(0x0004,Y)
 906                 	.LVL138:
 907                 	.LBE13:
 563:octet_queue.c ****         const uint8 *in = (const uint8 *)handle->p_buffer + handle->start;
 908                 	67 0
 909 00c4 07 17       		ld	AL,@(0x0005,Y)
 910 00c5 F8 35       		bsr	OQCapacity
 911 00c6 03 27       	.LBB25:
 912                 	.LBB22:
 565:octet_queue.c ****         uint8 *out = (uint8 *)p_data;
 913                 	AL,@(0x0007,Y)
 914 00c7 06 1B       		st	AL,@0xfff8
 915 00c8 04 2B       	.LVL139:
 916                 		.loc 1 570 0
 917                 		ld	X,@(0,Y)
 918                 		cmp	X,@$XAP_AL
 567:octet_queue.c ****         const uint16 remaining = OQCapacity(handle) - handle->start;
 919                 	L92
 920 00c9 05 17       	.LVL140:
 921 00ca 00 00 00 00 		ld	AL,@$XAP_UXL
 921      00 9C 
 922                 	.LVL141:
 923                 		bra	.L93
 924 00cd 07 57       	.LVL142:
 925 00ce F8 25       	.L92:
 926                 		.loc 1 573 0
 570:octet_queue.c ****         if (data_to_be_fetched >= remaining)
 927                 	(0x0004,Y)
 928 00cf 00 1B       		ld	X,@(0x0003,Y)
 929 00d0 00 00 00 89 		bc2
 930 00d2 00 00 00 00 	.LVL143:
 930      00 F8 
 931                 		.loc 1 576 0
 932 00d5 00 00 00 15 		ld	AL,@(0,Y)
 933                 		sub	AL,@0xfff8
 934 00d7 00 00 00 00 	.LVL144:
 934      00 E0 
 935                 		.loc 1 579 0
 936                 		ld	X,@(0x0005,Y)
 573:octet_queue.c ****             MemCopy(out, in, remaining);
 937                 	X)
 938 00da 04 13       		st	X,@(0x0003,Y)
 939 00db 03 1B       	.LVL145:
 940 00dc FD 09       		.loc 1 582 0
 941                 		ld	X,@(0x0004,Y)
 576:octet_queue.c ****             data_to_be_fetched -= remaining;
 942                 	X,@0xfff8
 943 00dd 00 17       		st	X,@(0x0004,Y)
 944 00de F8 55       	.LVL146:
 945                 	.L93:
 579:octet_queue.c ****             in = (const uint8 *)handle->p_buffer;
 946                 	c 1 586 0
 947 00df 05 1B       		ld	AH,@(0x0004,Y)
 948 00e0 00 1A       		ld	X,@(0x0003,Y)
 949 00e1 03 2B       		bc2
 950                 	.LVL147:
 582:octet_queue.c ****             out += remaining;
 951                 	
 952 00e2 04 1B       	.LBE22:
 953 00e3 F8 39       		.loc 1 592 0
 954 00e4 04 2B       		ld	AL,@(0x0005,Y)
 955                 		ld	AH,@(0,Y)
 956                 	.LVL148:
 586:octet_queue.c ****         MemCopy(out, in, data_to_be_fetched);
 957                 	OQDecrementSize
 958 00e5 04 13       	.LVL149:
 959 00e6 03 1B       	.L78:
 960 00e7 FD 09       	.LBE25:
 961                 	.LBE11:
 962                 		.loc 1 757 0
 963                 		ld	AL,@(0,Y)
 592:octet_queue.c ****     OQDecrementSize(handle, octets_fetched);
 964                 	:
 965 00e8 05 17       		leave	#0x0009
 966 00e9 00 13       	.LFE8:
 967                 		.size	OQPopData, .-OQPopData
 968 00ea 00 00 00 00 		.global	__size_of_OQPopData
 968      00 9C 
 969                 		.equ	__size_of_OQPopData,. - OQPopData
 970                 		.section	.text.queueData,"ax",@progbits
 971                 		.type	queueData, @function
 972                 	queueData:
 757:octet_queue.c **** } /* OQPopData */
 973                 	loc 1 100 0
 974 00ed 00 17       	.LVL151:
 975                 		enter	#0x0017
 976 00ee 09 0F       	.LCFI16:
 977                 		st	AL,@(0x0013,Y)
 978                 		st	AH,@(0x0014,Y)
 979                 		.loc 1 103 0
 980                 		bsr	OQSpace
 981                 	.LVL152:
 982                 		.loc 1 106 0
 983                 		ld	X,@(0x0017,Y)
 984                 		st	X,@(0x0011,Y)
 100:octet_queue.c **** {
 985                 	p	X,@$XAP_AL
 986                 	.LVL154:
 987 0000 17 0B       		bcz	.L96
 988                 	.LVL155:
 989 0001 13 27       		st	AL,@(0x0011,Y)
 990 0002 14 23       	.LVL156:
 103:octet_queue.c ****     const uint16 space = OQSpace(handle);
 991                 		.loc 1 112 0
 992 0003 00 00 00 00 		tst	@(0x0011,Y)
 992      00 9C 
 993                 		beq	.L97
 106:octet_queue.c ****     const uint16 octets_queued = MIN(space, data_size_in_octets);
 994                 	oc 1 115 0
 995 0006 17 1B       		ld	X,@(0x0013,Y)
 996 0007 11 2B       		ld	AL,@(0x0005,X)
 997                 	.LVL157:
 998 0008 00 00 00 89 		cmp	AL,#0x0001
 999                 		bne	.L98
 1000 000a 00 00 00 00 		ld	AL,@(0x0019,Y)
 1000      00 2C 
 1001                 		cmp	AL,#0x0001
 1002 000d 11 27       		bne	.L124
 1003                 	.LVL158:
 1004                 	.LBB26:
 112:octet_queue.c ****     if (data_to_be_queued == 0)
 1005                 	 0
 1006 000e 11 9B       		ld	X,@(0x0014,Y)
 1007 000f 00 00 00 00 		st	X,@(0x000f,Y)
 1007      00 F4 
 115:octet_queue.c ****     if ((handle->mode == OQDataMode_packed) &&
 1008                 	L159:
 1009 0012 13 1B       		.loc 1 121 0
 1010 0013 05 16       		ld	X,@(0x0013,Y)
 1011                 		ld	X,@(0x0003,X)
 1012 0014 01 84       		st	X,@0xfff8
 1013 0015 00 00 00 00 		ld	AH,@$XAP_UXL
 1013      00 F0 
 1014 0018 19 17       		lsr	#0x0001
 1015 0019 01 84       		st	AH,@(0x000e,Y)
 1016 001a 00 00 00 00 	.LVL160:
 1016      00 F0 
 1017                 		ld	X,@(0x0013,Y)
 1018                 		ld	AL,@(0,X)
 119:octet_queue.c ****         const uint16 *in = (const uint16 *)p_data;
 1019                 	AP_AH
 1020 001d 14 1B       		st	AL,@(0x000e,Y)
 1021 001e 0F 2B       	.LVL161:
 1022                 		.loc 1 125 0
 121:octet_queue.c ****         uint16 *out = (uint16 *)handle->p_buffer + handle->boundary/2;
 1023                 	AL,@0xfff8
 1024 001f 13 1B       		and	AL,#0x0001
 1025 0020 03 1A       		st	AL,@(0x000c,Y)
 1026 0021 F8 29       	.LVL162:
 1027 0022 00 00 00 11 		.loc 1 128 0
 1028 0024 00 09 01 A4 		ld	X,@(0x0018,Y)
 1029 0026 0E 23       		cmp	X,@$XAP_AL
 1030                 		beq	.L99
 1031 0027 13 1B       	.LVL163:
 1032 0028 00 16       		ld	AL,@(0x0011,Y)
 1033 0029 00 00 00 35 		st	AL,@(0x0010,Y)
 1034 002b 0E 27       	.LVL164:
 1035                 		st	X,@(0x000d,Y)
 125:octet_queue.c ****         bool out_msb = handle->boundary & 0x1;
 1036                 	8:
 1037 002c F8 15       	.LBB27:
 1038 002d 01 C4       		.loc 1 136 0
 1039 002e 0C 27       		tst	@(0x000d,Y)
 1040                 		beq	.L100
 128:octet_queue.c ****         if (in_msb != out_msb)
 1041                 	 1 138 0
 1042 002f 18 1B       		ld	X,@(0x000f,Y)
 1043 0030 00 00 00 89 		ld	AH,@(0,X)
 1044 0032 00 00 00 00 		lsr	#0x0008
 1044      00 F4 
 1045                 		.loc 1 139 0
 1046 0035 11 17       		add	X,#0x0001
 1047 0036 10 27       		st	X,@(0x000f,Y)
 1048                 	.LVL166:
 1049 0037 0D 2B       		bra	.L101
 1050                 	.L100:
 1051                 		.loc 1 143 0
 1052                 		ld	X,@(0x000f,Y)
 136:octet_queue.c ****                 if (in_msb)
 1053                 	)
 1054 0038 0D 9B       	.LVL167:
 1055 0039 00 00 00 00 		and	AH,#0x00ff
 1055      00 F4 
 138:octet_queue.c ****                     src_octet = (*in & 0xff00) >> 8;
 1056                 	01:
 1057 003c 0F 1B       		.loc 1 147 0
 1058 003d 00 12       		tst	@(0x000c,Y)
 1059 003e 00 09 08 A4 		beq	.L102
 139:octet_queue.c ****                     in++;   /* Move the input pointer to the next word */
 1060                 	c 1 149 0
 1061 0040 01 38       		ld	AL,@$XAP_AH
 1062 0041 0F 2B       		asl	#0x0008
 1063                 	.LVL168:
 1064 0042 00 00 00 00 		ld	X,@(0x000e,Y)
 1064      00 E0 
 1065                 		ld	AH,@(0,X)
 143:octet_queue.c ****                     src_octet = *in & 0x00ff;
 1066                 	H,#0x00ff
 1067 0045 0F 1B       		or	AL,@$XAP_AH
 1068 0046 00 12       		st	AL,@(0,X)
 1069                 		.loc 1 150 0
 1070 0047 01 00 FF C0 		add	X,#0x0001
 1071                 		st	X,@(0x000e,Y)
 147:octet_queue.c ****                 if (out_msb)
 1072                 	9:
 1073 0049 0C 9B       		bra	.L103
 1074 004a 00 00 00 00 	.LVL170:
 1074      00 F4 
 149:octet_queue.c ****                     *out = (*out & 0x00ff) | (src_octet << 8);
 1075                 	02:
 1076 004d 00 00 00 15 		.loc 1 154 0
 1077 004f 08 A0       		ld	X,@(0x000e,Y)
 1078                 		ld	AL,@(0,X)
 1079 0050 0E 1B       		and	AL,#0xff00
 1080 0051 00 12       		or	AH,@$XAP_AL
 1081 0052 01 00 FF C0 		st	AH,@(0,X)
 1082 0054 00 00 00 B5 	.L103:
 1083 0056 00 26       		.loc 1 168 0
 150:octet_queue.c ****                     out++;  /* Move the output pointer to the next word */
 1084                 	0x0010,Y)
 1085 0057 01 38       		add	AL,#0xffff
 1086 0058 0E 2B       		st	AL,@(0x0010,Y)
 1087                 	.LVL171:
 1088 0059 00 00 00 00 		.loc 1 173 0
 1088      00 E0 
 1089                 		ld	X,@(0x0013,Y)
 1090                 		ld	X,@(0x0003,X)
 154:octet_queue.c ****                     *out = (*out & 0xff00) | src_octet;
 1091                 	#0x0001
 1092 005c 0E 1B       		st	X,@(0x0012,Y)
 1093 005d 00 16       		ld	AL,@$XAP_UXL
 1094 005e FF 00 00 C4 		ld	X,@(0x0013,Y)
 1095 0060 00 00 00 B1 		st	AL,@(0x0003,X)
 1096 0062 00 22       		ld	AL,@$XAP_UXL
 1097                 		bsr	OQCapacity
 168:octet_queue.c ****                 data_to_be_queued--;
 1098                 	:
 1099 0063 10 17       		ld	X,@(0x0012,Y)
 1100 0064 FF 34       		cmp	X,@$XAP_AL
 1101 0065 10 27       		bne	.L104
 1102                 		.loc 1 175 0
 173:octet_queue.c ****                 if (++handle->boundary == OQCapacity(handle))
 1103                 	,@(0x0013,Y)
 1104 0066 13 1B       		ld	X,@(0,X)
 1105 0067 03 1A       		st	X,@(0x000e,Y)
 1106 0068 01 38       	.LVL173:
 1107 0069 12 2B       		.loc 1 176 0
 1108 006a 00 00 00 15 		ld	AL,#0x0000
 1109 006c 13 1B       		ld	X,@(0x0013,Y)
 1110 006d 03 26       		st	AL,@(0x0003,X)
 1111 006e 00 00 00 15 	.L104:
 1112 0070 00 00 00 00 	.LBE27:
 1112      00 9C 
 1113                 		.loc 1 178 0
 1114 0073 12 1B       		tst	@(0x0010,Y)
 1115 0074 00 00 00 89 		beq	.L105
 1116 0076 00 00 00 00 	.LBB28:
 1116      00 F0 
 175:octet_queue.c ****                     out = (uint16 *)handle->p_buffer;
 1117                 		ld	AL,#0x0000
 1118 0079 13 1B       		tst	@(0x000d,Y)
 1119 007a 00 1A       		bne	.L106
 1120 007b 0E 2B       		ld	AL,#0x0001
 1121                 	.L106:
 176:octet_queue.c ****                     handle->boundary = 0;
 1122                 	L,@(0x000d,Y)
 1123 007c 00 14       	.LVL174:
 1124 007d 13 1B       		.loc 1 159 0
 1125 007e 03 26       		ld	AL,#0x0000
 1126                 		tst	@(0x000c,Y)
 1127                 		bne	.L107
 178:octet_queue.c ****             } while (data_to_be_queued > 0);
 1128                 	,#0x0001
 1129 007f 10 9B       	.L107:
 1130 0080 00 00 00 00 		st	AL,@(0x000c,Y)
 1130      00 F4 
 1131                 	.LVL175:
 158:octet_queue.c ****                 in_msb = !in_msb;
 1132                 		.L108
 1133 0083 00 14       	.LVL176:
 1134 0084 0D 9B       	.L99:
 1135 0085 00 00 00 00 	.LBE28:
 1135      00 F0 
 1136 0088 01 14       	.LBB29:
 1137                 		.loc 1 188 0
 1138 0089 0D 27       		tst	@(0x0018,Y)
 1139                 		bne	.L109
 159:octet_queue.c ****                 out_msb = !out_msb;
 1140                 	0x0011,Y)
 1141 008a 00 14       		st	X,@(0x0003,Y)
 1142 008b 0C 9B       	.LVL177:
 1143 008c 00 00 00 00 		bra	.L110
 1143      00 F0 
 1144 008f 01 14       	.LVL178:
 1145                 	.L109:
 1146 0090 0C 27       		.loc 1 191 0
 1147                 		ld	X,@(0x0014,Y)
 1148 0091 00 00 00 00 		ld	AL,@(0,X)
 1148      00 E0 
 1149                 		and	AL,#0xff00
 1150                 		ld	X,@(0x000e,Y)
 1151                 		ld	AH,@(0,X)
 1152                 		and	AH,#0x00ff
 188:octet_queue.c ****             if (in_msb)
 1153                 	AH
 1154 0094 18 9B       		st	AL,@(0,X)
 1155 0095 00 00 00 00 		.loc 1 194 0
 1155      00 F0 
 1156 0098 11 1B       		ld	AL,@(0x0011,Y)
 1157 0099 03 2B       		add	AL,#0xffff
 1158                 		st	AL,@(0x0003,Y)
 1159 009a 00 00 00 00 	.LVL179:
 1159      00 E0 
 1160                 		.loc 1 197 0
 1161                 		ld	X,@(0x000f,Y)
 191:octet_queue.c ****                 *out = (*out & 0x00ff) | (*in & 0xff00);
 1162                 	x0001
 1163 009d 14 1B       		st	X,@(0x000f,Y)
 1164 009e 00 16       	.LVL180:
 1165 009f FF 00 00 C4 		.loc 1 198 0
 1166 00a1 0E 1B       		ld	AL,@(0x000e,Y)
 1167 00a2 00 12       		add	AL,#0x0001
 1168 00a3 01 00 FF C0 		st	AL,@(0x000e,Y)
 1169 00a5 00 00 00 B5 	.LVL181:
 1170 00a7 00 26       		.loc 1 201 0
 194:octet_queue.c ****                 data_to_be_queued--;
 1171                 	x0013,Y)
 1172 00a8 11 17       		ld	AL,@(0x0003,X)
 1173 00a9 FF 34       		add	AL,#0x0001
 1174 00aa 03 27       		st	AL,@(0x0003,X)
 1175                 	.L110:
 197:octet_queue.c ****                 in++;
 1176                 	 1 205 0
 1177 00ab 0F 1B       		ld	AL,@(0x0013,Y)
 1178 00ac 01 38       		bsr	OQCapacity
 1179 00ad 0F 2B       		ld	X,@(0x0013,Y)
 1180                 		sub	AL,@(0x0003,X)
 198:octet_queue.c ****                 out++;
 1181                 	L,@0xfff9
 1182 00ae 0E 17       	.LVL182:
 1183 00af 01 34       		.loc 1 206 0
 1184 00b0 0E 27       		ld	X,@(0x0003,Y)
 1185                 		cmp	X,@$XAP_AL
 201:octet_queue.c ****                 handle->boundary++;
 1186                 	.L111
 1187 00b1 13 1B       	.LVL183:
 1188 00b2 03 16       		.loc 1 209 0
 1189 00b3 01 34       		ld	AH,@$XAP_AL
 1190 00b4 03 26       		lsr	#0x0001
 1191                 	.LVL184:
 205:octet_queue.c ****             remaining = OQCapacity(handle) - handle->boundary;
 1192                 	,@0xfff8
 1193 00b5 13 17       		ld	AL,@$XAP_AH
 1194 00b6 00 00 00 00 		ld	AH,@(0x000e,Y)
 1194      00 9C 
 1195 00b9 13 1B       		ld	X,@(0x000f,Y)
 1196 00ba 03 56       		bc2
 1197 00bb F9 25       		.loc 1 212 0
 1198                 		ld	AL,@(0x0003,Y)
 206:octet_queue.c ****             if (data_to_be_queued >= remaining)
 1199                 	,@0xfff9
 1200 00bc 03 1B       		st	AL,@(0x0003,Y)
 1201 00bd 00 00 00 89 	.LVL185:
 1202 00bf 00 00 00 00 		.loc 1 215 0
 1202      00 FC 
 1203                 		ld	X,@(0x000f,Y)
 209:octet_queue.c ****                 MemCopy(out, in, remaining/2);
 1204                 	X,@0xfff8
 1205 00c2 00 00 00 11 		st	X,@(0x000f,Y)
 1206 00c4 00 09 01 A4 	.LVL186:
 1207                 		.loc 1 218 0
 1208 00c6 F8 21       		ld	X,@(0x0013,Y)
 1209 00c7 00 00 00 15 		ld	X,@(0,X)
 1210 00c9 0E 13       		st	X,@(0x000e,Y)
 1211 00ca 0F 1B       	.LVL187:
 1212 00cb FD 09       		.loc 1 221 0
 212:octet_queue.c ****                 data_to_be_queued -= remaining;
 1213                 	x0000
 1214 00cc 03 17       		ld	X,@(0x0013,Y)
 1215 00cd F9 55       		st	AL,@(0x0003,X)
 1216 00ce 03 27       	.LVL188:
 1217                 	.L111:
 215:octet_queue.c ****                 in += remaining/2;
 1218                 	 1 225 0
 1219 00cf 0F 1B       		ld	AH,@(0x0003,Y)
 1220 00d0 F8 39       		lsr	#0x0001
 1221 00d1 0F 2B       		st	AH,@0xfff8
 1222                 		ld	AL,@$XAP_AH
 218:octet_queue.c ****                 out = (uint16 *)handle->p_buffer;
 1223                 	H,@(0x000e,Y)
 1224 00d2 13 1B       		ld	X,@(0x000f,Y)
 1225 00d3 00 1A       		bc2
 1226 00d4 0E 2B       		.loc 1 228 0
 1227                 		ld	AL,@(0x0003,Y)
 221:octet_queue.c ****                 handle->boundary = 0;
 1228                 	AL,#0x0001
 1229 00d5 00 14       		beq	.L112
 1230 00d6 13 1B       		.loc 1 232 0
 1231 00d7 03 26       		ld	X,@(0x000e,Y)
 1232                 		add	X,@0xfff8
 1233                 		st	X,@0xfff9
 225:octet_queue.c ****             MemCopy(out, in, data_to_be_queued/2);
 1234                 	9:
 1235 00d8 03 13       		.loc 1 235 0
 1236 00d9 00 09 01 A4 		ld	AL,@(0x000f,Y)
 1237 00db F8 21       		add	AL,@0xfff8
 1238 00dc 00 00 00 15 		ld	X,@$XAP_AL
 1239 00de 0E 13       		ld	AH,@(0,X)
 1240 00df 0F 1B       		and	AH,#0x00ff
 1241 00e0 FD 09       		ld	X,@0xfff9
 228:octet_queue.c ****             if (data_to_be_queued & 0x1)
 1242                 	(0,X)
 1243 00e1 03 17       		and	AL,#0xff00
 1244 00e2 01 C4       		or	AH,@$XAP_AL
 1245 00e3 00 00 00 00 		st	AH,@(0,X)
 1245      00 F4 
 232:octet_queue.c ****                 out += data_to_be_queued/2;
 1246                 	190:
 1247 00e6 0E 1B       	.L112:
 1248 00e7 F8 39       		.loc 1 239 0
 1249 00e8 F9 29       		ld	X,@(0x0013,Y)
 1250                 		ld	AL,@(0x0003,X)
 235:octet_queue.c ****                 *out = (*out & 0xff00) | (*in & 0x00ff);
 1251                 	AL,@(0x0003,Y)
 1252 00e9 0F 17       		bra	.L125
 1253 00ea F8 35       	.LVL191:
 1254 00eb 00 00 00 19 	.L98:
 1255 00ed 00 12       	.LBE29:
 1256 00ee 01 00 FF C0 	.LBE26:
 1257 00f0 F9 19       		.loc 1 242 0
 1258 00f1 00 16       		tst	@$XAP_AL
 1259 00f2 FF 00 00 C4 		bne	.L113
 1260 00f4 00 00 00 B1 		tst	@(0x0019,Y)
 1261 00f6 00 22       		bne	.L114
 1262                 	.LVL192:
 1263                 	.LBB30:
 239:octet_queue.c ****             handle->boundary += data_to_be_queued;
 1264                 	
 1265 00f7 13 1B       		ld	AL,@(0x0014,Y)
 1266 00f8 03 16       		st	AL,@(0x000b,Y)
 1267 00f9 03 37       	.LVL193:
 1268 00fa 00 00 00 00 		.loc 1 248 0
 1268      00 E0 
 1269                 		ld	X,@(0x0013,Y)
 1270                 		ld	X,@(0x0003,X)
 1271                 		st	X,@(0x0015,Y)
 1272                 		ld	X,@(0x0013,Y)
 242:octet_queue.c ****     else if ((handle->mode == OQDataMode_unpacked) &&
 1273                 	0,X)
 1274 00fd 00 00 00 99 		add	X,@(0x0015,Y)
 1275 00ff 00 00 00 00 		st	X,@(0x000a,Y)
 1275      00 F0 
 1276 0102 19 9B       	.LVL194:
 1277 0103 00 00 00 00 		.loc 1 250 0
 1277      00 F0 
 1278                 		ld	AL,@(0x0013,Y)
 1279                 		bsr	OQCapacity
 246:octet_queue.c ****         const uint8 *in = (const uint8 *)p_data;
 1280                 	,@(0x0015,Y)
 1281 0106 14 17       		st	AL,@0xfff8
 1282 0107 0B 27       	.LVL195:
 1283                 		.loc 1 253 0
 248:octet_queue.c ****         uint8 *out = (uint8 *)handle->p_buffer + handle->boundary;
 1284                 	X,@(0x0011,Y)
 1285 0108 13 1B       		cmp	X,@$XAP_AL
 1286 0109 03 1A       		bcc	.L115
 1287 010a 15 2B       	.LVL196:
 1288 010b 13 1B       		st	X,@0xfff9
 1289 010c 00 1A       	.LVL197:
 1290 010d 15 3B       		bra	.L116
 1291 010e 0A 2B       	.LVL198:
 1292                 	.L115:
 250:octet_queue.c ****         const uint16 remaining = OQCapacity(handle) - handle->boundary;
 1293                 	56 0
 1294 010f 13 17       		ld	AH,@(0x000a,Y)
 1295 0110 00 00 00 00 		ld	X,@(0x000b,Y)
 1295      00 9C 
 1296 0113 15 57       		bc2
 1297 0114 F8 25       	.LVL199:
 1298                 		.loc 1 259 0
 253:octet_queue.c ****         if (data_to_be_queued >= remaining)
 1299                 	,@(0x0011,Y)
 1300 0115 11 1B       		sub	AL,@0xfff8
 1301 0116 00 00 00 89 		st	AL,@0xfff9
 1302 0118 00 00 00 00 	.LVL200:
 1302      00 F8 
 1303                 		.loc 1 262 0
 1304 011b F9 29       		ld	X,@(0x000b,Y)
 1305                 		add	X,@0xfff8
 1306 011c 00 00 00 00 		st	X,@(0x000b,Y)
 1306      00 E0 
 1307                 	.LVL201:
 1308                 		.loc 1 265 0
 256:octet_queue.c ****             MemCopy(out, in, remaining);
 1309                 	0013,Y)
 1310 011f 0A 13       		ld	X,@(0,X)
 1311 0120 0B 1B       		st	X,@(0x000a,Y)
 1312 0121 FD 09       	.LVL202:
 1313                 		.loc 1 268 0
 259:octet_queue.c ****             data_to_be_queued -= remaining;
 1314                 	L,#0x0000
 1315 0122 11 17       		ld	X,@(0x0013,Y)
 1316 0123 F8 55       		st	AL,@(0x0003,X)
 1317 0124 F9 25       	.LVL203:
 1318                 	.L116:
 262:octet_queue.c ****             in += remaining;
 1319                 	 1 272 0
 1320 0125 0B 1B       		ld	AL,@0xfff9
 1321 0126 F8 39       		ld	AH,@(0x000a,Y)
 1322 0127 0B 2B       		ld	X,@(0x000b,Y)
 1323                 		bc2
 265:octet_queue.c ****             out = (uint8 *)handle->p_buffer;
 1324                 	 1 275 0
 1325 0128 13 1B       		ld	X,@(0x0013,Y)
 1326 0129 00 1A       		ld	AL,@(0x0003,X)
 1327 012a 0A 2B       		add	AL,@0xfff9
 1328                 		bra	.L125
 268:octet_queue.c ****             handle->boundary = 0;
 1329                 	04:
 1330 012b 00 14       	.L113:
 1331 012c 13 1B       	.LBE30:
 1332 012d 03 26       		.loc 1 277 0
 1333                 		cmp	AL,#0x0001
 1334                 		bne	.L114
 272:octet_queue.c ****         MemCopy(out, in, data_to_be_queued);
 1335                 	5:
 1336 012e F9 15       	.L124:
 1337 012f 0A 13       		tst	@(0x0019,Y)
 1338 0130 0B 1B       		bne	.L114
 1339 0131 FD 09       	.LVL206:
 275:octet_queue.c ****         handle->boundary += data_to_be_queued;
 1340                 	1:
 1341 0132 13 1B       		.loc 1 281 0
 1342 0133 03 16       		ld	AL,@(0x0014,Y)
 1343 0134 F9 35       		st	AL,@(0x0009,Y)
 1344 0135 00 00 00 00 	.LVL207:
 1344      00 E0 
 1345                 		.loc 1 283 0
 1346                 		ld	X,@(0x0013,Y)
 1347                 		ld	X,@(0x0003,X)
 277:octet_queue.c ****     else if ((handle->mode == OQDataMode_packed) &&
 1348                 	xfff8
 1349 0138 01 84       		ld	AH,@$XAP_UXL
 1350 0139 00 00 00 00 		lsr	#0x0001
 1350      00 F0 
 1351                 		ld	X,@(0x0013,Y)
 1352                 		ld	X,@(0,X)
 1353 013c 19 9B       		add	AH,@$XAP_UXL
 1354 013d 00 00 00 00 		st	AH,@(0x0008,Y)
 1354      00 F0 
 1355                 	.LVL208:
 1356                 		.loc 1 288 0
 281:octet_queue.c ****         const uint8 *in = (const uint8 *)p_data;
 1357                 	xfff8
 1358 0140 14 17       		and	AL,#0x0001
 1359 0141 09 27       		bne	.L117
 1360                 		ld	X,@(0x0011,Y)
 283:octet_queue.c ****         uint16 *out = (uint16 *)handle->p_buffer + handle->boundary/2;
 1361                 	X,@(0x0002,Y)
 1362 0142 13 1B       	.LVL209:
 1363 0143 03 1A       		bra	.L118
 1364 0144 F8 29       	.LVL210:
 1365 0145 00 00 00 11 	.L117:
 1366 0147 00 09 01 A4 		.loc 1 293 0
 1367 0149 13 1B       		ld	X,@(0x0014,Y)
 1368 014a 00 1A       		ld	AL,@(0,X)
 1369 014b 00 00 00 31 		asl	#0x0008
 1370 014d 08 23       		ld	X,@(0x0008,Y)
 1371                 		ld	AH,@(0,X)
 288:octet_queue.c ****         if (handle->boundary & 0x1)
 1372                 	00ff
 1373 014e F8 15       		or	AL,@$XAP_AH
 1374 014f 01 C4       		st	AL,@(0,X)
 1375 0150 00 00 00 00 		.loc 1 296 0
 1375      00 F0 
 1376 0153 11 1B       		ld	AL,@(0x0011,Y)
 1377 0154 02 2B       		add	AL,#0xffff
 1378                 		st	AL,@(0x0002,Y)
 1379 0155 00 00 00 00 	.LVL211:
 1379      00 E0 
 1380                 		.loc 1 299 0
 1381                 		add	X,#0x0001
 293:octet_queue.c ****             *out = (*out & 0x00ff) | ((*in & 0x00ff) << 8);
 1382                 	0008,Y)
 1383 0158 14 1B       	.LVL212:
 1384 0159 00 16       		.loc 1 300 0
 1385 015a 08 A0       		ld	X,@(0x0009,Y)
 1386 015b 08 1B       		add	X,#0x0001
 1387 015c 00 12       		st	X,@(0x0009,Y)
 1388 015d 01 00 FF C0 	.LVL213:
 1389 015f 00 00 00 B5 		.loc 1 303 0
 1390 0161 00 26       		ld	X,@(0x0013,Y)
 296:octet_queue.c ****             data_to_be_queued--;
 1391                 	0x0003,X)
 1392 0162 11 17       		add	AL,#0x0001
 1393 0163 FF 34       		st	AL,@(0x0003,X)
 1394 0164 02 27       	.L118:
 1395                 		.loc 1 307 0
 299:octet_queue.c ****             out++;
 1396                 	L,@(0x0013,Y)
 1397 0165 01 38       		bsr	OQCapacity
 1398 0166 08 2B       		ld	X,@(0x0013,Y)
 1399                 		sub	AL,@(0x0003,X)
 300:octet_queue.c ****             in++;
 1400                 	AL,@(0x0007,Y)
 1401 0167 09 1B       	.LVL214:
 1402 0168 01 38       		.loc 1 308 0
 1403 0169 09 2B       		ld	X,@(0x0002,Y)
 1404                 		cmp	X,@$XAP_AL
 303:octet_queue.c ****             handle->boundary++;
 1405                 	.L119
 1406 016a 13 1B       		.loc 1 311 0
 1407 016b 03 16       		st	AL,@(0,Y)
 1408 016c 01 34       		ld	AL,@(0x0008,Y)
 1409 016d 03 26       		ld	AH,@(0x0009,Y)
 1410                 		bsr	MemCopyPack
 307:octet_queue.c ****         remaining = OQCapacity(handle) - handle->boundary;
 1411                 	1 314 0
 1412 016e 13 17       		ld	AL,@(0x0002,Y)
 1413 016f 00 00 00 00 		sub	AL,@(0x0007,Y)
 1413      00 9C 
 1414 0172 13 1B       		st	AL,@(0x0002,Y)
 1415 0173 03 56       	.LVL215:
 1416 0174 07 27       		.loc 1 317 0
 1417                 		ld	X,@(0x0009,Y)
 308:octet_queue.c ****         if (data_to_be_queued >= remaining)
 1418                 	@(0x0007,Y)
 1419 0175 02 1B       		st	X,@(0x0009,Y)
 1420 0176 00 00 00 89 	.LVL216:
 1421 0178 00 00 00 00 		.loc 1 320 0
 1421      00 FC 
 311:octet_queue.c ****             MemCopyPack(out, in, remaining);
 1422                 	X,@(0x0013,Y)
 1423 017b 00 27       		ld	X,@(0,X)
 1424 017c 08 17       		st	X,@(0x0008,Y)
 1425 017d 09 13       	.LVL217:
 1426 017e 00 00 00 00 		.loc 1 323 0
 1426      00 9C 
 314:octet_queue.c ****             data_to_be_queued -= remaining;
 1427                 	L,#0x0000
 1428 0181 02 17       		ld	X,@(0x0013,Y)
 1429 0182 07 57       		st	AL,@(0x0003,X)
 1430 0183 02 27       	.L119:
 1431                 		.loc 1 330 0
 317:octet_queue.c ****             in += remaining;
 1432                 	,@(0x0002,Y)
 1433 0184 09 1B       		st	X,@(0,Y)
 1434 0185 07 3B       		ld	AL,@(0x0008,Y)
 1435 0186 09 2B       		ld	AH,@(0x0009,Y)
 1436                 		bsr	MemCopyPack
 320:octet_queue.c ****             out = (uint16 *)handle->p_buffer;
 1437                 	 1 333 0
 1438 0187 13 1B       		ld	X,@(0x0013,Y)
 1439 0188 00 1A       		ld	AL,@(0x0003,X)
 1440 0189 08 2B       		add	AL,@(0x0002,Y)
 1441                 		bra	.L125
 323:octet_queue.c ****             handle->boundary = 0;
 1442                 	18:
 1443 018a 00 14       	.L114:
 1444 018b 13 1B       	.LBE31:
 1445 018c 03 26       	.LBB32:
 1446                 		.loc 1 339 0
 330:octet_queue.c ****         MemCopyPack(out, in, data_to_be_queued);
 1447                 	L,@(0x0014,Y)
 1448 018d 02 1B       		st	AL,@(0x0006,Y)
 1449 018e 00 2B       	.LVL219:
 1450 018f 08 17       		.loc 1 341 0
 1451 0190 09 13       		ld	X,@(0x0013,Y)
 1452 0191 00 00 00 00 		ld	X,@(0,X)
 1452      00 9C 
 333:octet_queue.c ****         handle->boundary += data_to_be_queued;
 1453                 	,@$XAP_UXL
 1454 0194 13 1B       		ld	X,@(0x0013,Y)
 1455 0195 03 16       		add	AL,@(0x0003,X)
 1456 0196 02 37       		st	AL,@(0x0005,Y)
 1457 0197 00 00 00 00 	.LVL220:
 1457      00 E0 
 1458                 		.loc 1 346 0
 1459                 		tst	@(0x0018,Y)
 1460                 		bne	.L120
 1461                 	.LVL221:
 339:octet_queue.c ****         const uint16 *in = (const uint16 *)p_data;
 1462                 	x0011,Y)
 1463 019a 14 17       		st	X,@(0x0001,Y)
 1464 019b 06 27       	.LVL222:
 1465                 		bra	.L121
 341:octet_queue.c ****         uint8 *out = (uint8 *)handle->p_buffer + handle->boundary;
 1466                 	223:
 1467 019c 13 1B       	.L120:
 1468 019d 00 1A       		.loc 1 351 0
 1469 019e 00 00 00 15 		ld	X,@(0x0014,Y)
 1470 01a0 13 1B       		ld	AH,@(0,X)
 1471 01a1 03 36       		lsr	#0x0008
 1472 01a2 05 27       		ld	X,@(0x0005,Y)
 1473                 		st	AH,@(0,X)
 346:octet_queue.c ****         if (src_starts_at_odd_octet)
 1474                 	354 0
 1475 01a3 18 9B       		ld	AL,@(0x0011,Y)
 1476 01a4 00 00 00 00 		add	AL,#0xffff
 1476      00 F0 
 1477                 		st	AL,@(0x0001,Y)
 1478 01a7 11 1B       	.LVL224:
 1479 01a8 01 2B       		.loc 1 357 0
 1480                 		add	X,#0x0001
 1481 01a9 00 00 00 00 		st	X,@(0x0005,Y)
 1481      00 E0 
 1482                 	.LVL225:
 1483                 		.loc 1 358 0
 351:octet_queue.c ****             *out = (*in & 0xff00) >> 8;
 1484                 	0006,Y)
 1485 01ac 14 1B       		add	X,#0x0001
 1486 01ad 00 12       		st	X,@(0x0006,Y)
 1487 01ae 00 09 08 A4 	.LVL226:
 1488 01b0 05 1B       		.loc 1 361 0
 1489 01b1 00 22       		ld	X,@(0x0013,Y)
 354:octet_queue.c ****             data_to_be_queued--;
 1490                 	,@(0x0003,X)
 1491 01b2 11 17       		add	AL,#0x0001
 1492 01b3 FF 34       		st	AL,@(0x0003,X)
 1493 01b4 01 27       	.L121:
 1494                 		.loc 1 365 0
 357:octet_queue.c ****             out++;
 1495                 	L,@(0x0013,Y)
 1496 01b5 01 38       		bsr	OQCapacity
 1497 01b6 05 2B       		ld	X,@(0x0013,Y)
 1498                 		sub	AL,@(0x0003,X)
 358:octet_queue.c ****             in++;
 1499                 	AL,@(0x0004,Y)
 1500 01b7 06 1B       	.LVL227:
 1501 01b8 01 38       		.loc 1 366 0
 1502 01b9 06 2B       		ld	X,@(0x0001,Y)
 1503                 		cmp	X,@$XAP_AL
 361:octet_queue.c ****             handle->boundary++;
 1504                 	.L122
 1505 01ba 13 1B       		.loc 1 369 0
 1506 01bb 03 16       		st	AL,@(0,Y)
 1507 01bc 01 34       		ld	AL,@(0x0005,Y)
 1508 01bd 03 26       		ld	AH,@(0x0006,Y)
 1509                 		bsr	MemCopyUnPack
 365:octet_queue.c ****         remaining = OQCapacity(handle) - handle->boundary;
 1510                 	1 372 0
 1511 01be 13 17       		ld	AL,@(0x0001,Y)
 1512 01bf 00 00 00 00 		sub	AL,@(0x0004,Y)
 1512      00 9C 
 1513 01c2 13 1B       		st	AL,@(0x0001,Y)
 1514 01c3 03 56       	.LVL228:
 1515 01c4 04 27       		.loc 1 375 0
 1516                 		ld	AH,@(0x0004,Y)
 366:octet_queue.c ****         if (data_to_be_queued >= remaining)
 1517                 	x0001
 1518 01c5 01 1B       		add	AH,@(0x0006,Y)
 1519 01c6 00 00 00 89 		st	AH,@(0x0006,Y)
 1520 01c8 00 00 00 00 	.LVL229:
 1520      00 FC 
 369:octet_queue.c ****             MemCopyUnPack(out, in, remaining);
 1521                 	c 1 378 0
 1522 01cb 00 27       		ld	X,@(0x0013,Y)
 1523 01cc 05 17       		ld	X,@(0,X)
 1524 01cd 06 13       		st	X,@(0x0005,Y)
 1525 01ce 00 00 00 00 	.LVL230:
 1525      00 9C 
 372:octet_queue.c ****             data_to_be_queued -= remaining;
 1526                 	 1 381 0
 1527 01d1 01 17       		ld	AL,#0x0000
 1528 01d2 04 57       		ld	X,@(0x0013,Y)
 1529 01d3 01 27       		st	AL,@(0x0003,X)
 1530                 		.loc 1 384 0
 375:octet_queue.c ****             in += remaining/2;
 1531                 	@(0x0001,Y)
 1532 01d4 04 13       		beq	.L122
 1533 01d5 00 09 01 A4 		ld	X,@(0x0004,Y)
 1534 01d7 06 33       		and	X,#0x0001
 1535 01d8 06 23       		beq	.L122
 1536                 		.loc 1 389 0
 378:octet_queue.c ****             out = (uint8 *)handle->p_buffer;
 1537                 	@(0x0006,Y)
 1538 01d9 13 1B       		ld	AH,@(0,X)
 1539 01da 00 1A       		lsr	#0x0008
 1540 01db 05 2B       		ld	X,@(0x0005,Y)
 1541                 		st	AH,@(0,X)
 381:octet_queue.c ****             handle->boundary = 0;
 1542                 	 1 392 0
 1543 01dc 00 14       		ld	AL,@(0x0001,Y)
 1544 01dd 13 1B       		add	AL,#0xffff
 1545 01de 03 26       		st	AL,@(0x0001,Y)
 384:octet_queue.c ****             if ((data_to_be_queued > 0) && (remaining & 0x1))
 1546                 	231:
 1547 01df 01 9B       		.loc 1 395 0
 1548 01e0 00 00 00 00 		add	X,#0x0001
 1548      00 F4 
 1549 01e3 04 1B       		st	X,@(0x0005,Y)
 1550 01e4 01 C8       	.LVL232:
 1551 01e5 00 00 00 00 		.loc 1 396 0
 1551      00 F4 
 389:octet_queue.c ****                 *out = (*in & 0xff00) >> 8;
 1552                 	@(0x0006,Y)
 1553 01e8 06 1B       		add	X,#0x0001
 1554 01e9 00 12       		st	X,@(0x0006,Y)
 1555 01ea 00 09 08 A4 	.LVL233:
 1556 01ec 05 1B       		.loc 1 399 0
 1557 01ed 00 22       		ld	X,@(0x0013,Y)
 392:octet_queue.c ****                 data_to_be_queued--;
 1558                 	,@(0x0003,X)
 1559 01ee 01 17       		add	AL,#0x0001
 1560 01ef FF 34       		st	AL,@(0x0003,X)
 1561 01f0 01 27       	.L122:
 1562                 		.loc 1 404 0
 395:octet_queue.c ****                 out++;
 1563                 	L,@(0x0001,Y)
 1564 01f1 01 38       		st	AL,@(0,Y)
 1565 01f2 05 2B       		ld	AL,@(0x0005,Y)
 1566                 		ld	AH,@(0x0006,Y)
 396:octet_queue.c ****                 in++;
 1567                 		MemCopyUnPack
 1568 01f3 06 1B       		.loc 1 407 0
 1569 01f4 01 38       		ld	X,@(0x0013,Y)
 1570 01f5 06 2B       		ld	AL,@(0x0003,X)
 1571                 		add	AL,@(0x0001,Y)
 399:octet_queue.c ****                 handle->boundary++;                    
 1572                 	34:
 1573 01f6 13 1B       	.L125:
 1574 01f7 03 16       		st	AL,@(0x0003,X)
 1575 01f8 01 34       	.LVL235:
 1576 01f9 03 26       	.L105:
 1577                 	.LBE32:
 404:octet_queue.c ****         MemCopyUnPack(out, in, data_to_be_queued);
 1578                 	1 411 0
 1579 01fa 01 17       		ld	AL,#0x0000
 1580 01fb 00 27       		ld	X,@(0x0013,Y)
 1581 01fc 05 17       		st	AL,@(0x0004,X)
 1582 01fd 06 13       	.LVL236:
 1583 01fe 00 00 00 00 	.L97:
 1583      00 9C 
 407:octet_queue.c ****         handle->boundary += data_to_be_queued;
 1584                 	1 414 0
 1585 0201 13 1B       		ld	AL,@(0x0011,Y)
 1586 0202 03 16       	.LVL237:
 1587 0203 01 37       		leave	#0x0017
 1588                 	.LFE2:
 1589                 		.size	queueData, .-queueData
 1590 0204 03 26       		.equ	__size_of_queueData,. - queueData
 1591                 		.section	.text.OQTransferData,"ax",@progbits
 1592                 		.global	OQTransferData
 1593                 		.type	OQTransferData, @function
 411:octet_queue.c ****     handle->empty = FALSE;
 1594                 	Data:
 1595 0205 00 14       	.LFB9:
 1596 0206 13 1B       		.loc 1 788 0
 1597 0207 04 26       	.LVL238:
 1598                 		enter	#0x0009
 1599                 	.LCFI17:
 414:octet_queue.c **** } /* queueData */
 1600                 	,@(0x0006,Y)
 1601 0208 11 17       		st	AH,@(0x0007,Y)
 1602                 		.loc 1 791 0
 1603 0209 17 0F       		ld	AL,@$XAP_AH
 1604                 	.LVL239:
 1605                 		bsr	OQSpace
 1606                 	.LVL240:
 1607                 		st	AL,@(0x0005,Y)
 1608                 	.LVL241:
 1609                 		.loc 1 795 0
 1610                 		ld	AL,@(0x0006,Y)
 1611                 		bsr	OQSize
 788:octet_queue.c **** {
 1612                 	004,Y)
 1613                 	.LVL242:
 1614 0000 09 0B       		.loc 1 798 0
 1615                 		cmp	AL,@(0x0005,Y)
 1616 0001 06 27       		bcz	.L127
 1617 0002 07 23       		ld	AL,@(0x0005,Y)
 791:octet_queue.c ****     const uint16 avlbl_space = OQSpace(to);
 1618                 	,@(0x0004,Y)
 1619 0003 00 00 00 15 	.LVL243:
 1620                 	.L127:
 1621 0005 00 00 00 00 		ld	X,@(0x0004,Y)
 1621      00 9C 
 1622                 		cmp	X,@(0x0009,Y)
 1623 0008 05 27       		bcz	.L128
 1624                 	.LVL244:
 795:octet_queue.c ****     const uint16 avlbl_data = OQSize(from);
 1625                 	@(0x0009,Y)
 1626 0009 06 17       		st	AL,@(0x0004,Y)
 1627 000a 00 00 00 00 	.LVL245:
 1627      00 9C 
 1628 000d 04 27       	.L128:
 1629                 		.loc 1 804 0
 798:octet_queue.c ****     const uint16 octets_moved = MIN(MIN(avlbl_data, avlbl_space), octet_count);
 1630                 	L,@(0x0006,Y)
 1631 000e 05 87       		bsr	OQCapacity
 1632 000f 00 00 00 00 		st	AL,@0xfffb
 1632      00 2C 
 1633 0012 05 17       		ld	X,@(0x0006,Y)
 1634 0013 04 27       		ld	X,@(0x0002,X)
 1635                 		st	X,@(-1,Y)
 1636                 		.loc 1 813 0
 1637 0014 04 1B       		tst	@(0x0004,Y)
 1638 0015 09 8B       		beq	.L129
 1639 0016 00 00 00 00 		.loc 1 817 0
 1639      00 2C 
 1640                 		ld	X,@(0x0006,Y)
 1641 0019 09 17       		ld	X,@(0x0005,X)
 1642 001a 04 27       		st	X,@0xfffa
 1643                 		ld	X,@(0x0006,Y)
 1644                 		ld	X,@(0,X)
 804:octet_queue.c ****     const uint16 remaining = OQCapacity(from) - from->start;
 1645                 		cmp	AL,#0x0001
 1646 001b 06 17       		bne	.L130
 1647 001c 00 00 00 00 		.loc 1 819 0
 1647      00 9C 
 1648 001f FB 25       		ld	AH,@(-1,Y)
 1649 0020 06 1B       		lsr	#0x0001
 1650 0021 02 1A       		add	X,@$XAP_AH
 1651 0022 FF 2B       	.LVL246:
 813:octet_queue.c ****     if (data_to_be_moved == 0)
 1652                 	0xfff8
 1653 0023 04 9B       	.LVL247:
 1654 0024 00 00 00 00 		bra	.L131
 1654      00 F4 
 817:octet_queue.c ****     if (from->mode == OQDataMode_packed)
 1655                 	L248:
 1656 0027 06 1B       	.L130:
 1657 0028 05 1A       		.loc 1 823 0
 1658 0029 FA 29       		ld	AL,@$XAP_UXL
 1659 002a 06 1B       		add	AL,@(-1,Y)
 1660 002b 00 1A       		st	AL,@0xfff8
 1661 002c FA 15       	.LVL249:
 1662 002d 01 84       	.L131:
 1663 002e 00 00 00 00 		.loc 1 804 0
 1663      00 F0 
 819:octet_queue.c ****         src = (const uint16 *)from->p_buffer + from->start/2;
 1664                 	fffb
 1665 0031 FF 13       		sub	X,@(-1,Y)
 1666 0032 00 09 01 A4 		st	X,@(0x0003,Y)
 1667 0034 00 00 00 39 	.LVL250:
 1668                 		.loc 1 807 0
 1669 0036 F8 29       		ld	AH,@(-1,Y)
 1670                 	.LVL251:
 1671 0037 00 00 00 00 		and	AH,#0x0001
 1671      00 E0 
 1672                 		.loc 1 827 0
 1673                 		ld	AL,@(0x0004,Y)
 823:octet_queue.c ****         src = (const uint8 *)from->p_buffer + from->start;
 1674                 	XAP_UXL
 1675 003a 00 00 00 15 		bcz	.L136
 1676 003c FF 37       		bra	.L138
 1677 003d F8 25       	.L136:
 1678                 		ld	AL,@(0x0004,Y)
 1679                 	.LVL252:
 804:octet_queue.c ****     const uint16 remaining = OQCapacity(from) - from->start;
 1680                 	L134
 1681 003e FB 19       	.LVL253:
 1682 003f FF 5B       	.L138:
 1683 0040 03 2B       		.loc 1 830 0
 1684                 		ld	X,@(0x0003,Y)
 807:octet_queue.c ****     bool first_msb = from->start & 0x1;
 1685                 	,@(0,Y)
 1686 0041 FF 13       		st	AH,@(0x0001,Y)
 1687                 		ld	AL,@0xfffa
 1688 0042 01 C0       		st	AL,@(0x0002,Y)
 827:octet_queue.c ****     if (data_to_be_moved > remaining)
 1689                 	AL,@(0x0007,Y)
 1690 0043 04 17       		ld	AH,@0xfff8
 1691 0044 00 00 00 85 	.LVL254:
 1692 0046 00 00 00 00 		bsr	queueData
 1692      00 2C 
 1693 0049 00 00 00 00 	.LVL255:
 1693      00 E0 
 1694                 		.loc 1 833 0
 1695 004c 04 17       		ld	AL,@(0x0004,Y)
 1696                 	.LVL256:
 1697 004d 00 00 00 00 		sub	AL,@(0x0003,Y)
 1697      00 E0 
 1698                 		.loc 1 836 0
 1699                 		ld	X,@(0x0006,Y)
 830:octet_queue.c ****         queueData(to, src, remaining, first_msb, from->mode);
 1700                 	)
 1701 0050 03 1B       		st	X,@0xfff8
 1702 0051 00 2B       	.LVL257:
 1703 0052 01 23       		ld	AH,#0x0000
 1704 0053 FA 15       	.LVL258:
 1705 0054 02 27       	.L134:
 1706 0055 07 17       		.loc 1 843 0
 1707 0056 F8 11       		st	AL,@(0,Y)
 1708                 		st	AH,@(0x0001,Y)
 1709 0057 00 00 00 00 		ld	X,@(0x0006,Y)
 1709      00 9C 
 1710                 		ld	X,@(0x0005,X)
 833:octet_queue.c ****         data_to_be_moved -= remaining;
 1711                 	002,Y)
 1712 005a 04 17       		ld	AL,@(0x0007,Y)
 1713                 	.LVL259:
 1714 005b 03 57       		ld	AH,@0xfff8
 836:octet_queue.c ****         src = from->p_buffer;
 1715                 	260:
 1716 005c 06 1B       		bsr	queueData
 1717 005d 00 1A       	.LVL261:
 1718 005e F8 29       		.loc 1 847 0
 1719                 		ld	AL,@(0x0006,Y)
 1720 005f 00 10       		ld	AH,@(0x0004,Y)
 1721                 		bsr	OQDecrementSize
 1722                 	.L129:
 843:octet_queue.c ****     queueData(to, src, data_to_be_moved, first_msb, from->mode);
 1723                 	850 0
 1724 0060 00 27       		ld	AL,@(0x0004,Y)
 1725 0061 01 23       		leave	#0x0009
 1726 0062 06 1B       	.LFE9:
 1727 0063 05 1A       		.size	OQTransferData, .-OQTransferData
 1728 0064 02 2B       		.global	__size_of_OQTransferData
 1729 0065 07 17       		.equ	__size_of_OQTransferData,. - OQTransferData
 1730                 		.section	.text.OQQueueData,"ax",@progbits
 1731 0066 F8 11       		.global	OQQueueData
 1732                 		.type	OQQueueData, @function
 1733 0067 00 00 00 00 	OQQueueData:
 1733      00 9C 
 1734                 	.LFB7:
 847:octet_queue.c ****     OQDecrementSize(from, octets_moved);
 1735                 	0
 1736 006a 06 17       	.LVL262:
 1737 006b 04 13       		enter	#0x0004
 1738 006c 00 00 00 00 	.LCFI18:
 1738      00 9C 
 1739                 		ld	X,@$XAP_AL
 850:octet_queue.c **** } /* OQTransferData */
 1740                 	 1 728 0
 1741 006f 04 17       		ld	AL,@(0x0004,Y)
 1742 0070 09 0F       	.LVL263:
 1743                 		st	AL,@(0,Y)
 1744                 		ld	AL,#0x0000
 1745                 		st	AL,@(0x0001,Y)
 1746                 		ld	AL,@(0x0005,X)
 1747                 		st	AL,@(0x0002,Y)
 1748                 		ld	AL,@$XAP_UXL
 1749                 		bsr	queueData
 1750                 	.LVL264:
 1751                 		.loc 1 729 0
 727:octet_queue.c **** {
 1752                 	04
 1753                 	.LFE7:
 1754 0000 04 0B       		.size	OQQueueData, .-OQQueueData
 1755                 		.global	__size_of_OQQueueData
 1756 0001 00 00 00 19 		.equ	__size_of_OQQueueData,. - OQQueueData
 728:octet_queue.c ****     return queueData(handle, p_data, octet_count, FALSE, handle->mode);
 1757                 	tion	.debug_frame,"",@progbits
 1758 0003 04 17       	.Lframe0:
 1759                 		.4byte	.LECIE0-.LSCIE0
 1760 0004 00 27       	.LSCIE0:
 1761 0005 00 14       		.4byte	0xffffffff
 1762 0006 01 27       		.1byte	0x1
 1763 0007 05 16       		.ascii "\000"
 1764 0008 02 27       		.1byte	0x1
 1765 0009 00 00 00 15 		.1byte	0x7f
 1766 000b 00 00 00 00 		.1byte	0x3
 1766      00 9C 
 1767                 		.1byte	0xc
 729:octet_queue.c **** } /* OQQueueData */
 1768                 	
 1769 000e 04 0F       		.1byte	0x0
 1770                 		.p2align	2
 1771                 	.LECIE0:
 1772                 	.LSFDE0:
 1773                 		.4byte	.LEFDE0-.LASFDE0
 1774                 	.LASFDE0:
 1775                 		.4byte	.Lframe0
 1776 0000 00 00 00 00 		.4byte	.LFB4
 1777                 		.4byte	.LFE4-.LFB4
 1778 0002 FF FF FF FF 		.1byte	0x4
 1779 0004 01          		.4byte	.LCFI0-.LFB4
 1780 0004 00          		.1byte	0xe
 1781 0005 01          		.1byte	0x1
 1782 0005 7F          		.1byte	0x83
 1783 0006 03          		.1byte	0x1
 1784 0006 0C          		.p2align	2
 1785 0007 05          	.LEFDE0:
 1786 0007 00          	.LSFDE2:
 1787                 		.4byte	.LEFDE2-.LASFDE2
 1788                 	.LASFDE2:
 1789                 		.4byte	.Lframe0
 1790 0008 00 00 00 00 		.4byte	.LFB5
 1791                 		.4byte	.LFE5-.LFB5
 1792 000a 00 00 00 00 		.1byte	0x4
 1793 000c 00 00 00 00 		.4byte	.LCFI1-.LFB5
 1794 000e 00 00 00 00 		.1byte	0xe
 1795 0010 41          		.1byte	0x1
 1796                 		.1byte	0x83
 1797 0010 0E          		.1byte	0x1
 1798 0011 01          		.p2align	2
 1799 0011 83          	.LEFDE2:
 1800 0012 01          	.LSFDE4:
 1801 0012 00 00 00    		.4byte	.LEFDE4-.LASFDE4
 1802                 	.LASFDE4:
 1803                 		.4byte	.Lframe0
 1804 0014 00 00 00 00 		.4byte	.LFB6
 1805                 		.4byte	.LFE6-.LFB6
 1806 0016 00 00 00 00 		.1byte	0x4
 1807 0018 00 00 00 00 		.4byte	.LCFI2-.LFB6
 1808 001a 00 00 00 00 		.1byte	0xe
 1809 001c 41          		.1byte	0x1
 1810                 		.1byte	0x83
 1811 001c 0E          		.1byte	0x1
 1812 001d 01          		.p2align	2
 1813 001d 83          	.LEFDE4:
 1814 001e 01          	.LSFDE6:
 1815 001e 00 00 00    		.4byte	.LEFDE6-.LASFDE6
 1816                 	.LASFDE6:
 1817                 		.4byte	.Lframe0
 1818 0020 00 00 00 00 		.4byte	.LFB11
 1819                 		.4byte	.LFE11-.LFB11
 1820 0022 00 00 00 00 		.1byte	0x4
 1821 0024 00 00 00 00 		.4byte	.LCFI3-.LFB11
 1822 0026 00 00 00 00 		.1byte	0xe
 1823 0028 41          		.1byte	0x1
 1824                 		.1byte	0x83
 1825 0028 0E          		.1byte	0x1
 1826 0029 01          		.p2align	2
 1827 0029 83          	.LEFDE6:
 1828 002a 01          	.LSFDE8:
 1829 002a 00 00 00    		.4byte	.LEFDE8-.LASFDE8
 1830                 	.LASFDE8:
 1831                 		.4byte	.Lframe0
 1832 002c 00 00 00 00 		.4byte	.LFB12
 1833                 		.4byte	.LFE12-.LFB12
 1834 002e 00 00 00 00 		.1byte	0x4
 1835 0030 00 00 00 00 		.4byte	.LCFI4-.LFB12
 1836 0032 00 00 00 00 		.1byte	0xe
 1837 0034 41          		.1byte	0x1
 1838                 		.1byte	0x83
 1839 0034 0E          		.1byte	0x1
 1840 0035 01          		.p2align	2
 1841 0035 83          	.LEFDE8:
 1842 0036 01          	.LSFDE10:
 1843 0036 00 00 00    		.4byte	.LEFDE10-.LASFDE10
 1844                 	.LASFDE10:
 1845                 		.4byte	.Lframe0
 1846 0038 00 00 00 00 		.4byte	.LFB13
 1847                 		.4byte	.LFE13-.LFB13
 1848 003a 00 00 00 00 		.1byte	0x4
 1849 003c 00 00 00 00 		.4byte	.LCFI5-.LFB13
 1850 003e 00 00 00 00 		.1byte	0xe
 1851 0040 41          		.1byte	0x1
 1852                 		.1byte	0x83
 1853 0040 0E          		.1byte	0x1
 1854 0041 01          		.p2align	2
 1855 0041 83          	.LEFDE10:
 1856 0042 01          	.LSFDE12:
 1857 0042 00 00 00    		.4byte	.LEFDE12-.LASFDE12
 1858                 	.LASFDE12:
 1859                 		.4byte	.Lframe0
 1860 0044 00 00 00 00 		.4byte	.LFB10
 1861                 		.4byte	.LFE10-.LFB10
 1862 0046 00 00 00 00 		.1byte	0x4
 1863 0048 00 00 00 00 		.4byte	.LCFI6-.LFB10
 1864 004a 00 00 00 00 		.1byte	0xe
 1865 004c 41          		.1byte	0x3
 1866                 		.1byte	0x83
 1867 004c 0E          		.1byte	0x1
 1868 004d 01          		.p2align	2
 1869 004d 83          	.LEFDE12:
 1870 004e 01          	.LSFDE14:
 1871 004e 00 00 00    		.4byte	.LEFDE14-.LASFDE14
 1872                 	.LASFDE14:
 1873                 		.4byte	.Lframe0
 1874 0050 00 00 00 00 		.4byte	.LFB14
 1875                 		.4byte	.LFE14-.LFB14
 1876 0052 00 00 00 00 		.1byte	0x4
 1877 0054 00 00 00 00 		.4byte	.LCFI7-.LFB14
 1878 0056 00 00 00 00 		.1byte	0xe
 1879 0058 41          		.1byte	0x3
 1880                 		.1byte	0x83
 1881 0058 0E          		.1byte	0x1
 1882 0059 03          		.p2align	2
 1883 0059 83          	.LEFDE14:
 1884 005a 01          	.LSFDE16:
 1885 005a 00 00 00    		.4byte	.LEFDE16-.LASFDE16
 1886                 	.LASFDE16:
 1887                 		.4byte	.Lframe0
 1888 005c 00 00 00 00 		.4byte	.LFB15
 1889                 		.4byte	.LFE15-.LFB15
 1890 005e 00 00 00 00 		.1byte	0x4
 1891 0060 00 00 00 00 		.4byte	.LCFI8-.LFB15
 1892 0062 00 00 00 00 		.1byte	0xe
 1893 0064 41          		.1byte	0x1
 1894                 		.1byte	0x83
 1895 0064 0E          		.1byte	0x1
 1896 0065 03          		.p2align	2
 1897 0065 83          	.LEFDE16:
 1898 0066 01          	.LSFDE18:
 1899 0066 00 00 00    		.4byte	.LEFDE18-.LASFDE18
 1900                 	.LASFDE18:
 1901                 		.4byte	.Lframe0
 1902 0068 00 00 00 00 		.4byte	.LFB16
 1903                 		.4byte	.LFE16-.LFB16
 1904 006a 00 00 00 00 		.p2align	2
 1905 006c 00 00 00 00 	.LEFDE18:
 1906 006e 00 00 00 00 	.LSFDE20:
 1907 0070 41          		.4byte	.LEFDE20-.LASFDE20
 1908                 	.LASFDE20:
 1909 0070 0E          		.4byte	.Lframe0
 1910 0071 01          		.4byte	.LFB17
 1911 0071 83          		.4byte	.LFE17-.LFB17
 1912 0072 01          		.1byte	0x4
 1913 0072 00 00 00    		.4byte	.LCFI9-.LFB17
 1914                 		.1byte	0xe
 1915                 		.1byte	0x1
 1916 0074 00 00 00 00 		.1byte	0x83
 1917                 		.1byte	0x1
 1918 0076 00 00 00 00 		.p2align	2
 1919 0078 00 00 00 00 	.LEFDE20:
 1920 007a 00 00 00 01 	.LSFDE22:
 1921                 		.4byte	.LEFDE22-.LASFDE22
 1922                 	.LASFDE22:
 1923                 		.4byte	.Lframe0
 1924 007c 00 00 00 00 		.4byte	.LFB19
 1925                 		.4byte	.LFE19-.LFB19
 1926 007e 00 00 00 00 		.1byte	0x4
 1927 0080 00 00 00 00 		.4byte	.LCFI10-.LFB19
 1928 0082 00 00 00 00 		.1byte	0xe
 1929 0084 41          		.1byte	0x4
 1930                 		.1byte	0x83
 1931 0084 0E          		.1byte	0x1
 1932 0085 01          		.p2align	2
 1933 0085 83          	.LEFDE22:
 1934 0086 01          	.LSFDE24:
 1935 0086 00 00 00    		.4byte	.LEFDE24-.LASFDE24
 1936                 	.LASFDE24:
 1937                 		.4byte	.Lframe0
 1938 0088 00 00 00 00 		.4byte	.LFB20
 1939                 		.4byte	.LFE20-.LFB20
 1940 008a 00 00 00 00 		.1byte	0x4
 1941 008c 00 00 00 00 		.4byte	.LCFI11-.LFB20
 1942 008e 00 00 00 00 		.1byte	0xe
 1943 0090 41          		.1byte	0x4
 1944                 		.1byte	0x83
 1945 0090 0E          		.1byte	0x1
 1946 0091 04          		.p2align	2
 1947 0091 83          	.LEFDE24:
 1948 0092 01          	.LSFDE26:
 1949 0092 00 00 00    		.4byte	.LEFDE26-.LASFDE26
 1950                 	.LASFDE26:
 1951                 		.4byte	.Lframe0
 1952 0094 00 00 00 00 		.4byte	.LFB18
 1953                 		.4byte	.LFE18-.LFB18
 1954 0096 00 00 00 00 		.1byte	0x4
 1955 0098 00 00 00 00 		.4byte	.LCFI12-.LFB18
 1956 009a 00 00 00 00 		.1byte	0xe
 1957 009c 41          		.1byte	0x3
 1958                 		.1byte	0x83
 1959 009c 0E          		.1byte	0x1
 1960 009d 04          		.p2align	2
 1961 009d 83          	.LEFDE26:
 1962 009e 01          	.LSFDE28:
 1963 009e 00 00 00    		.4byte	.LEFDE28-.LASFDE28
 1964                 	.LASFDE28:
 1965                 		.4byte	.Lframe0
 1966 00a0 00 00 00 00 		.4byte	.LFB21
 1967                 		.4byte	.LFE21-.LFB21
 1968 00a2 00 00 00 00 		.1byte	0x4
 1969 00a4 00 00 00 00 		.4byte	.LCFI13-.LFB21
 1970 00a6 00 00 00 00 		.1byte	0xe
 1971 00a8 41          		.1byte	0x1
 1972                 		.1byte	0x83
 1973 00a8 0E          		.1byte	0x1
 1974 00a9 03          		.p2align	2
 1975 00a9 83          	.LEFDE28:
 1976 00aa 01          	.LSFDE30:
 1977 00aa 00 00 00    		.4byte	.LEFDE30-.LASFDE30
 1978                 	.LASFDE30:
 1979                 		.4byte	.Lframe0
 1980 00ac 00 00 00 00 		.4byte	.LFB22
 1981                 		.4byte	.LFE22-.LFB22
 1982 00ae 00 00 00 00 		.1byte	0x4
 1983 00b0 00 00 00 00 		.4byte	.LCFI14-.LFB22
 1984 00b2 00 00 00 00 		.1byte	0xe
 1985 00b4 41          		.1byte	0x1
 1986                 		.1byte	0x83
 1987 00b4 0E          		.1byte	0x1
 1988 00b5 01          		.p2align	2
 1989 00b5 83          	.LEFDE30:
 1990 00b6 01          	.LSFDE32:
 1991 00b6 00 00 00    		.4byte	.LEFDE32-.LASFDE32
 1992                 	.LASFDE32:
 1993                 		.4byte	.Lframe0
 1994 00b8 00 00 00 00 		.4byte	.LFB8
 1995                 		.4byte	.LFE8-.LFB8
 1996 00ba 00 00 00 00 		.1byte	0x4
 1997 00bc 00 00 00 00 		.4byte	.LCFI15-.LFB8
 1998 00be 00 00 00 00 		.1byte	0xe
 1999 00c0 41          		.1byte	0x9
 2000                 		.1byte	0x83
 2001 00c0 0E          		.1byte	0x1
 2002 00c1 01          		.p2align	2
 2003 00c1 83          	.LEFDE32:
 2004 00c2 01          	.LSFDE34:
 2005 00c2 00 00 00    		.4byte	.LEFDE34-.LASFDE34
 2006                 	.LASFDE34:
 2007                 		.4byte	.Lframe0
 2008 00c4 00 00 00 00 		.4byte	.LFB2
 2009                 		.4byte	.LFE2-.LFB2
 2010 00c6 00 00 00 00 		.1byte	0x4
 2011 00c8 00 00 00 00 		.4byte	.LCFI16-.LFB2
 2012 00ca 00 00 00 00 		.1byte	0xe
 2013 00cc 41          		.1byte	0x17
 2014                 		.1byte	0x83
 2015 00cc 0E          		.1byte	0x1
 2016 00cd 09          		.p2align	2
 2017 00cd 83          	.LEFDE34:
 2018 00ce 01          	.LSFDE36:
 2019 00ce 00 00 00    		.4byte	.LEFDE36-.LASFDE36
 2020                 	.LASFDE36:
 2021                 		.4byte	.Lframe0
 2022 00d0 00 00 00 00 		.4byte	.LFB9
 2023                 		.4byte	.LFE9-.LFB9
 2024 00d2 00 00 00 00 		.1byte	0x4
 2025 00d4 00 00 00 00 		.4byte	.LCFI17-.LFB9
 2026 00d6 00 00 00 00 		.1byte	0xe
 2027 00d8 41          		.1byte	0x9
 2028                 		.1byte	0x83
 2029 00d8 0E          		.1byte	0x1
 2030 00d9 17          		.p2align	2
 2031 00d9 83          	.LEFDE36:
 2032 00da 01          	.LSFDE38:
 2033 00da 00 00 00    		.4byte	.LEFDE38-.LASFDE38
 2034                 	.LASFDE38:
 2035                 		.4byte	.Lframe0
 2036 00dc 00 00 00 00 		.4byte	.LFB7
 2037                 		.4byte	.LFE7-.LFB7
 2038 00de 00 00 00 00 		.1byte	0x4
 2039 00e0 00 00 00 00 		.4byte	.LCFI18-.LFB7
 2040 00e2 00 00 00 00 		.1byte	0xe
 2041 00e4 41          		.1byte	0x4
 2042                 		.1byte	0x83
 2043 00e4 0E          		.1byte	0x1
 2044 00e5 09          		.p2align	2
 2045 00e5 83          	.LEFDE38:
 2046 00e6 01          		.text
 2047 00e6 00 00 00    	.Letext0:
 2048                 		.section	.debug_loc,"",@progbits
 2049                 	.Ldebug_loc0:
 2050 00e8 00 00 00 00 	.LLST0:
 2051                 		.4byte	.LFB4
 2052 00ea 00 00 00 00 		.4byte	.LCFI0
 2053 00ec 00 00 00 00 		.2byte	0x1
 2054 00ee 00 00 00 00 		.1byte	0x55
 2055 00f0 41          		.4byte	.LCFI0
 2056                 		.4byte	.LFE4
 2057 00f0 0E          		.2byte	0x2
 2058 00f1 04          		.1byte	0x75
 2059 00f1 83          		.1byte	0x1
 2060 00f2 01          		.4byte	0x0
 2061 00f2 00 00 00    		.4byte	0x0
 2062                 	.LLST1:
 2063                 		.4byte	.LVL0
 2064                 		.4byte	.LVL1
 2065                 		.2byte	0x1
 2066                 		.1byte	0x51
 2067                 		.4byte	.LVL1
 2068 0000 00 00 00 00 		.4byte	.LVL2
 2069 0002 00 00 00 00 		.2byte	0x1
 2070 0004 00 01       		.1byte	0x57
 2071 0005 55          		.4byte	.LVL2
 2072 0005 00 00 00 00 		.4byte	.LVL3
 2073 0007 00 00 00 00 		.2byte	0x1
 2074 0009 00 02       		.1byte	0x51
 2075 000a 75          		.4byte	.LVL3
 2076 000b 01          		.4byte	.LVL5
 2077 000b 00 00 00 00 		.2byte	0x1
 2078 000d 00 00 00 00 		.1byte	0x57
 2079                 		.4byte	.LVL5
 2080 000f 00 00 00 00 		.4byte	.LVL6
 2081 0011 00 00 00 00 		.2byte	0x1
 2082 0013 00 01       		.1byte	0x51
 2083 0014 51          		.4byte	.LVL6
 2084 0015 00 00 00 00 		.4byte	.LFE4
 2085 0017 00 00 00 00 		.2byte	0x1
 2086 0019 00 01       		.1byte	0x57
 2087 001a 57          		.4byte	0x0
 2088 001a 00 00 00 00 		.4byte	0x0
 2089 001c 00 00 00 00 	.LLST2:
 2090 001e 00 01       		.4byte	.LVL0
 2091 001f 51          		.4byte	.LVL4
 2092 0020 00 00 00 00 		.2byte	0x2
 2093 0022 00 00 00 00 		.1byte	0x91
 2094 0024 00 01       		.1byte	0x0
 2095 0025 57          		.4byte	.LVL4
 2096 0025 00 00 00 00 		.4byte	.LVL5
 2097 0027 00 00 00 00 		.2byte	0x2
 2098 0029 00 01       		.1byte	0x76
 2099 002a 51          		.1byte	0x1
 2100 002b 00 00 00 00 		.4byte	.LVL5
 2101 002d 00 00 00 00 		.4byte	.LFE4
 2102 002f 00 01       		.2byte	0x2
 2103 0030 57          		.1byte	0x91
 2104 0030 00 00 00 00 		.1byte	0x0
 2105 0032 00 00 00 00 		.4byte	0x0
 2106                 		.4byte	0x0
 2107 0034 00 00 00 00 	.LLST3:
 2108 0036 00 00 00 00 		.4byte	.LVL0
 2109 0038 00 02       		.4byte	.LVL1
 2110 0039 91          		.2byte	0x2
 2111 003a 00          		.1byte	0x91
 2112 003a 00 00 00 00 		.1byte	0x1
 2113 003c 00 00 00 00 		.4byte	.LVL1
 2114 003e 00 02       		.4byte	.LVL8
 2115 003f 76          		.2byte	0x1
 2116 0040 01          		.1byte	0x53
 2117 0040 00 00 00 00 		.4byte	.LVL8
 2118 0042 00 00 00 00 		.4byte	.LFE4
 2119 0044 00 02       		.2byte	0x2
 2120 0045 91          		.1byte	0x76
 2121 0046 00          		.1byte	0x2
 2122 0046 00 00 00 00 		.4byte	0x0
 2123 0048 00 00 00 00 		.4byte	0x0
 2124                 	.LLST4:
 2125 004a 00 00 00 00 		.4byte	.LFB5
 2126 004c 00 00 00 00 		.4byte	.LCFI1
 2127 004e 00 02       		.2byte	0x1
 2128 004f 91          		.1byte	0x55
 2129 0050 01          		.4byte	.LCFI1
 2130 0050 00 00 00 00 		.4byte	.LFE5
 2131 0052 00 00 00 00 		.2byte	0x2
 2132 0054 00 01       		.1byte	0x75
 2133 0055 53          		.1byte	0x1
 2134 0056 00 00 00 00 		.4byte	0x0
 2135 0058 00 00 00 00 		.4byte	0x0
 2136 005a 00 02       	.LLST5:
 2137 005b 76          		.4byte	.LVL9
 2138 005b 02          		.4byte	.LVL10
 2139 005c 00 00 00 00 		.2byte	0x1
 2140 005e 00 00 00 00 		.1byte	0x51
 2141                 		.4byte	.LVL10
 2142 0060 00 00 00 00 		.4byte	.LVL12
 2143 0062 00 00 00 00 		.2byte	0x1
 2144 0064 00 01       		.1byte	0x53
 2145 0065 55          		.4byte	.LVL12
 2146 0065 00 00 00 00 		.4byte	.LFE5
 2147 0067 00 00 00 00 		.2byte	0x1
 2148 0069 00 02       		.1byte	0x51
 2149 006a 75          		.4byte	0x0
 2150 006b 01          		.4byte	0x0
 2151 006b 00 00 00 00 	.LLST6:
 2152 006d 00 00 00 00 		.4byte	.LFB6
 2153                 		.4byte	.LCFI2
 2154 006f 00 00 00 00 		.2byte	0x1
 2155 0071 00 00 00 00 		.1byte	0x55
 2156 0073 00 01       		.4byte	.LCFI2
 2157 0074 51          		.4byte	.LFE6
 2158 0075 00 00 00 00 		.2byte	0x2
 2159 0077 00 00 00 00 		.1byte	0x75
 2160 0079 00 01       		.1byte	0x1
 2161 007a 53          		.4byte	0x0
 2162 007a 00 00 00 00 		.4byte	0x0
 2163 007c 00 00 00 00 	.LLST7:
 2164 007e 00 01       		.4byte	.LVL13
 2165 007f 51          		.4byte	.LVL14
 2166 0080 00 00 00 00 		.2byte	0x1
 2167 0082 00 00 00 00 		.1byte	0x51
 2168                 		.4byte	.LVL14
 2169 0084 00 00 00 00 		.4byte	.LVL15
 2170 0086 00 00 00 00 		.2byte	0x1
 2171 0088 00 01       		.1byte	0x53
 2172 0089 55          		.4byte	.LVL15
 2173 0089 00 00 00 00 		.4byte	.LVL16
 2174 008b 00 00 00 00 		.2byte	0x1
 2175 008d 00 02       		.1byte	0x51
 2176 008e 75          		.4byte	.LVL16
 2177 008f 01          		.4byte	.LVL17
 2178 008f 00 00 00 00 		.2byte	0x1
 2179 0091 00 00 00 00 		.1byte	0x53
 2180                 		.4byte	0x0
 2181 0093 00 00 00 00 		.4byte	0x0
 2182 0095 00 00 00 00 	.LLST8:
 2183 0097 00 01       		.4byte	.LFB11
 2184 0098 51          		.4byte	.LCFI3
 2185 0099 00 00 00 00 		.2byte	0x1
 2186 009b 00 00 00 00 		.1byte	0x55
 2187 009d 00 01       		.4byte	.LCFI3
 2188 009e 53          		.4byte	.LFE11
 2189 009e 00 00 00 00 		.2byte	0x2
 2190 00a0 00 00 00 00 		.1byte	0x75
 2191 00a2 00 01       		.1byte	0x1
 2192 00a3 51          		.4byte	0x0
 2193 00a4 00 00 00 00 		.4byte	0x0
 2194 00a6 00 00 00 00 	.LLST9:
 2195 00a8 00 01       		.4byte	.LVL18
 2196 00a9 53          		.4byte	.LVL19
 2197 00a9 00 00 00 00 		.2byte	0x1
 2198 00ab 00 00 00 00 		.1byte	0x51
 2199                 		.4byte	.LVL19
 2200 00ad 00 00 00 00 		.4byte	.LVL20
 2201 00af 00 00 00 00 		.2byte	0x1
 2202 00b1 00 01       		.1byte	0x53
 2203 00b2 55          		.4byte	.LVL20
 2204 00b3 00 00 00 00 		.4byte	.LVL21
 2205 00b5 00 00 00 00 		.2byte	0x1
 2206 00b7 00 02       		.1byte	0x51
 2207 00b8 75          		.4byte	.LVL21
 2208 00b8 01          		.4byte	.LVL22
 2209 00b9 00 00 00 00 		.2byte	0x1
 2210 00bb 00 00 00 00 		.1byte	0x53
 2211                 		.4byte	0x0
 2212 00bd 00 00 00 00 		.4byte	0x0
 2213 00bf 00 00 00 00 	.LLST10:
 2214 00c1 00 01       		.4byte	.LFB12
 2215 00c2 51          		.4byte	.LCFI4
 2216 00c2 00 00 00 00 		.2byte	0x1
 2217 00c4 00 00 00 00 		.1byte	0x55
 2218 00c6 00 01       		.4byte	.LCFI4
 2219 00c7 53          		.4byte	.LFE12
 2220 00c8 00 00 00 00 		.2byte	0x2
 2221 00ca 00 00 00 00 		.1byte	0x75
 2222 00cc 00 01       		.1byte	0x1
 2223 00cd 51          		.4byte	0x0
 2224 00cd 00 00 00 00 		.4byte	0x0
 2225 00cf 00 00 00 00 	.LLST11:
 2226 00d1 00 01       		.4byte	.LVL23
 2227 00d2 53          		.4byte	.LVL24
 2228 00d3 00 00 00 00 		.2byte	0x1
 2229 00d5 00 00 00 00 		.1byte	0x51
 2230                 		.4byte	.LVL24
 2231 00d7 00 00 00 00 		.4byte	.LVL26
 2232 00d9 00 00 00 00 		.2byte	0x1
 2233 00db 00 01       		.1byte	0x53
 2234 00dc 55          		.4byte	0x0
 2235 00dc 00 00 00 00 		.4byte	0x0
 2236 00de 00 00 00 00 	.LLST12:
 2237 00e0 00 02       		.4byte	.LFB13
 2238 00e1 75          		.4byte	.LCFI5
 2239 00e2 01          		.2byte	0x1
 2240 00e2 00 00 00 00 		.1byte	0x55
 2241 00e4 00 00 00 00 		.4byte	.LCFI5
 2242                 		.4byte	.LFE13
 2243 00e6 00 00 00 00 		.2byte	0x2
 2244 00e8 00 00 00 00 		.1byte	0x75
 2245 00ea 00 01       		.1byte	0x1
 2246 00eb 51          		.4byte	0x0
 2247 00ec 00 00 00 00 		.4byte	0x0
 2248 00ee 00 00 00 00 	.LLST13:
 2249 00f0 00 01       		.4byte	.LVL27
 2250 00f1 53          		.4byte	.LVL31
 2251 00f1 00 00 00 00 		.2byte	0x1
 2252 00f3 00 00 00 00 		.1byte	0x51
 2253                 		.4byte	.LVL31
 2254 00f5 00 00 00 00 		.4byte	.LVL34
 2255 00f7 00 00 00 00 		.2byte	0x1
 2256 00f9 00 01       		.1byte	0x53
 2257 00fa 55          		.4byte	0x0
 2258 00fb 00 00 00 00 		.4byte	0x0
 2259 00fd 00 00 00 00 	.LLST14:
 2260 00ff 00 02       		.4byte	.LVL28
 2261 0100 75          		.4byte	.LVL29
 2262 0100 01          		.2byte	0x1
 2263 0101 00 00 00 00 		.1byte	0x50
 2264 0103 00 00 00 00 		.4byte	.LVL30
 2265                 		.4byte	.LVL32
 2266 0105 00 00 00 00 		.2byte	0x1
 2267 0107 00 00 00 00 		.1byte	0x50
 2268 0109 00 01       		.4byte	.LVL33
 2269 010a 51          		.4byte	.LFE13
 2270 010a 00 00 00 00 		.2byte	0x1
 2271 010c 00 00 00 00 		.1byte	0x50
 2272 010e 00 01       		.4byte	0x0
 2273 010f 53          		.4byte	0x0
 2274 0110 00 00 00 00 	.LLST15:
 2275 0112 00 00 00 00 		.4byte	.LFB10
 2276                 		.4byte	.LCFI6
 2277 0114 00 00 00 00 		.2byte	0x1
 2278 0116 00 00 00 00 		.1byte	0x55
 2279 0118 00 01       		.4byte	.LCFI6
 2280 0119 50          		.4byte	.LFE10
 2281 0119 00 00 00 00 		.2byte	0x2
 2282 011b 00 00 00 00 		.1byte	0x75
 2283 011d 00 01       		.1byte	0x3
 2284 011e 50          		.4byte	0x0
 2285 011f 00 00 00 00 		.4byte	0x0
 2286 0121 00 00 00 00 	.LLST16:
 2287 0123 00 01       		.4byte	.LVL35
 2288 0124 50          		.4byte	.LVL36
 2289 0124 00 00 00 00 		.2byte	0x1
 2290 0126 00 00 00 00 		.1byte	0x51
 2291                 		.4byte	.LVL36
 2292 0128 00 00 00 00 		.4byte	.LVL37
 2293 012a 00 00 00 00 		.2byte	0x1
 2294 012c 00 01       		.1byte	0x53
 2295 012d 55          		.4byte	.LVL39
 2296 012e 00 00 00 00 		.4byte	.LVL41
 2297 0130 00 00 00 00 		.2byte	0x1
 2298 0132 00 02       		.1byte	0x53
 2299 0133 75          		.4byte	.LVL41
 2300 0133 03          		.4byte	.LVL42
 2301 0134 00 00 00 00 		.2byte	0x1
 2302 0136 00 00 00 00 		.1byte	0x51
 2303                 		.4byte	.LVL42
 2304 0138 00 00 00 00 		.4byte	.LVL44
 2305 013a 00 00 00 00 		.2byte	0x1
 2306 013c 00 01       		.1byte	0x53
 2307 013d 51          		.4byte	0x0
 2308 013d 00 00 00 00 		.4byte	0x0
 2309 013f 00 00 00 00 	.LLST17:
 2310 0141 00 01       		.4byte	.LVL38
 2311 0142 53          		.4byte	.LVL39
 2312 0143 00 00 00 00 		.2byte	0x1
 2313 0145 00 00 00 00 		.1byte	0x51
 2314 0147 00 01       		.4byte	.LVL40
 2315 0148 53          		.4byte	.LVL41
 2316 0148 00 00 00 00 		.2byte	0x1
 2317 014a 00 00 00 00 		.1byte	0x51
 2318 014c 00 01       		.4byte	.LVL42
 2319 014d 51          		.4byte	.LVL43
 2320 014e 00 00 00 00 		.2byte	0x1
 2321 0150 00 00 00 00 		.1byte	0x51
 2322 0152 00 01       		.4byte	0x0
 2323 0153 53          		.4byte	0x0
 2324 0153 00 00 00 00 	.LLST18:
 2325 0155 00 00 00 00 		.4byte	.LFB14
 2326                 		.4byte	.LCFI7
 2327 0157 00 00 00 00 		.2byte	0x1
 2328 0159 00 00 00 00 		.1byte	0x55
 2329 015b 00 01       		.4byte	.LCFI7
 2330 015c 51          		.4byte	.LFE14
 2331 015d 00 00 00 00 		.2byte	0x2
 2332 015f 00 00 00 00 		.1byte	0x75
 2333 0161 00 01       		.1byte	0x3
 2334 0162 51          		.4byte	0x0
 2335 0162 00 00 00 00 		.4byte	0x0
 2336 0164 00 00 00 00 	.LLST19:
 2337 0166 00 01       		.4byte	.LVL45
 2338 0167 51          		.4byte	.LVL46
 2339 0168 00 00 00 00 		.2byte	0x1
 2340 016a 00 00 00 00 		.1byte	0x51
 2341                 		.4byte	.LVL46
 2342 016c 00 00 00 00 		.4byte	.LFE14
 2343 016e 00 00 00 00 		.2byte	0x2
 2344 0170 00 01       		.1byte	0x76
 2345 0171 55          		.1byte	0x1
 2346 0171 00 00 00 00 		.4byte	0x0
 2347 0173 00 00 00 00 		.4byte	0x0
 2348 0175 00 02       	.LLST20:
 2349 0176 75          		.4byte	.LFB15
 2350 0177 03          		.4byte	.LCFI8
 2351 0177 00 00 00 00 		.2byte	0x1
 2352 0179 00 00 00 00 		.1byte	0x55
 2353                 		.4byte	.LCFI8
 2354 017b 00 00 00 00 		.4byte	.LFE15
 2355 017d 00 00 00 00 		.2byte	0x2
 2356 017f 00 01       		.1byte	0x75
 2357 0180 51          		.1byte	0x1
 2358 0181 00 00 00 00 		.4byte	0x0
 2359 0183 00 00 00 00 		.4byte	0x0
 2360 0185 00 02       	.LLST21:
 2361 0186 76          		.4byte	.LVL47
 2362 0186 01          		.4byte	.LVL48
 2363 0187 00 00 00 00 		.2byte	0x1
 2364 0189 00 00 00 00 		.1byte	0x51
 2365                 		.4byte	.LVL48
 2366 018b 00 00 00 00 		.4byte	.LVL50
 2367 018d 00 00 00 00 		.2byte	0x1
 2368 018f 00 01       		.1byte	0x53
 2369 0190 55          		.4byte	.LVL50
 2370 0190 00 00 00 00 		.4byte	.LFE15
 2371 0192 00 00 00 00 		.2byte	0x1
 2372 0194 00 02       		.1byte	0x51
 2373 0195 75          		.4byte	0x0
 2374 0196 01          		.4byte	0x0
 2375 0196 00 00 00 00 	.LLST23:
 2376 0198 00 00 00 00 		.4byte	.LFB17
 2377                 		.4byte	.LCFI9
 2378 019a 00 00 00 00 		.2byte	0x1
 2379 019c 00 00 00 00 		.1byte	0x55
 2380 019e 00 01       		.4byte	.LCFI9
 2381 019f 51          		.4byte	.LFE17
 2382 01a0 00 00 00 00 		.2byte	0x2
 2383 01a2 00 00 00 00 		.1byte	0x75
 2384 01a4 00 01       		.1byte	0x1
 2385 01a5 53          		.4byte	0x0
 2386 01a5 00 00 00 00 		.4byte	0x0
 2387 01a7 00 00 00 00 	.LLST24:
 2388 01a9 00 01       		.4byte	.LVL52
 2389 01aa 51          		.4byte	.LVL53
 2390 01ab 00 00 00 00 		.2byte	0x1
 2391 01ad 00 00 00 00 		.1byte	0x51
 2392                 		.4byte	.LVL53
 2393 01af 00 00 00 00 		.4byte	.LVL55
 2394 01b1 00 00 00 00 		.2byte	0x1
 2395 01b3 00 01       		.1byte	0x53
 2396 01b4 55          		.4byte	.LVL55
 2397 01b4 00 00 00 00 		.4byte	.LFE17
 2398 01b6 00 00 00 00 		.2byte	0x1
 2399 01b8 00 02       		.1byte	0x51
 2400 01b9 75          		.4byte	0x0
 2401 01ba 01          		.4byte	0x0
 2402 01ba 00 00 00 00 	.LLST25:
 2403 01bc 00 00 00 00 		.4byte	.LFB19
 2404                 		.4byte	.LCFI10
 2405 01be 00 00 00 00 		.2byte	0x1
 2406 01c0 00 00 00 00 		.1byte	0x55
 2407 01c2 00 01       		.4byte	.LCFI10
 2408 01c3 51          		.4byte	.LFE19
 2409 01c4 00 00 00 00 		.2byte	0x2
 2410 01c6 00 00 00 00 		.1byte	0x75
 2411 01c8 00 01       		.1byte	0x4
 2412 01c9 53          		.4byte	0x0
 2413 01c9 00 00 00 00 		.4byte	0x0
 2414 01cb 00 00 00 00 	.LLST26:
 2415 01cd 00 01       		.4byte	.LVL56
 2416 01ce 51          		.4byte	.LVL57
 2417 01cf 00 00 00 00 		.2byte	0x1
 2418 01d1 00 00 00 00 		.1byte	0x51
 2419                 		.4byte	.LVL57
 2420 01d3 00 00 00 00 		.4byte	.LFE19
 2421 01d5 00 00 00 00 		.2byte	0x2
 2422 01d7 00 01       		.1byte	0x76
 2423 01d8 55          		.1byte	0x1
 2424 01d8 00 00 00 00 		.4byte	0x0
 2425 01da 00 00 00 00 		.4byte	0x0
 2426 01dc 00 02       	.LLST27:
 2427 01dd 75          		.4byte	.LVL56
 2428 01de 04          		.4byte	.LVL57
 2429 01de 00 00 00 00 		.2byte	0x1
 2430 01e0 00 00 00 00 		.1byte	0x50
 2431                 		.4byte	.LVL57
 2432 01e2 00 00 00 00 		.4byte	.LVL58
 2433 01e4 00 00 00 00 		.2byte	0x2
 2434 01e6 00 01       		.1byte	0x76
 2435 01e7 51          		.1byte	0x2
 2436 01e8 00 00 00 00 		.4byte	.LVL58
 2437 01ea 00 00 00 00 		.4byte	.LFE19
 2438 01ec 00 02       		.2byte	0x2
 2439 01ed 76          		.1byte	0x76
 2440 01ed 01          		.1byte	0x0
 2441 01ee 00 00 00 00 		.4byte	0x0
 2442 01f0 00 00 00 00 		.4byte	0x0
 2443                 	.LLST28:
 2444 01f2 00 00 00 00 		.4byte	.LVL59
 2445 01f4 00 00 00 00 		.4byte	.LVL61
 2446 01f6 00 01       		.2byte	0x1
 2447 01f7 50          		.1byte	0x51
 2448 01f7 00 00 00 00 		.4byte	.LVL63
 2449 01f9 00 00 00 00 		.4byte	.LVL64
 2450 01fb 00 02       		.2byte	0x1
 2451 01fc 76          		.1byte	0x51
 2452 01fd 02          		.4byte	0x0
 2453 01fd 00 00 00 00 		.4byte	0x0
 2454 01ff 00 00 00 00 	.LLST29:
 2455 0201 00 02       		.4byte	.LVL62
 2456 0202 76          		.4byte	.LVL64
 2457 0203 00          		.2byte	0x1
 2458 0203 00 00 00 00 		.1byte	0x51
 2459 0205 00 00 00 00 		.4byte	0x0
 2460                 		.4byte	0x0
 2461 0207 00 00 00 00 	.LLST30:
 2462 0209 00 00 00 00 		.4byte	.LFB20
 2463 020b 00 01       		.4byte	.LCFI11
 2464 020c 51          		.2byte	0x1
 2465 020d 00 00 00 00 		.1byte	0x55
 2466 020f 00 00 00 00 		.4byte	.LCFI11
 2467 0211 00 01       		.4byte	.LFE20
 2468 0212 51          		.2byte	0x2
 2469 0212 00 00 00 00 		.1byte	0x75
 2470 0214 00 00 00 00 		.1byte	0x4
 2471                 		.4byte	0x0
 2472 0216 00 00 00 00 		.4byte	0x0
 2473 0218 00 00 00 00 	.LLST31:
 2474 021a 00 01       		.4byte	.LVL65
 2475 021b 51          		.4byte	.LVL66
 2476 021c 00 00 00 00 		.2byte	0x1
 2477 021e 00 00 00 00 		.1byte	0x51
 2478                 		.4byte	.LVL66
 2479 0220 00 00 00 00 		.4byte	.LFE20
 2480 0222 00 00 00 00 		.2byte	0x2
 2481 0224 00 01       		.1byte	0x76
 2482 0225 55          		.1byte	0x1
 2483 0225 00 00 00 00 		.4byte	0x0
 2484 0227 00 00 00 00 		.4byte	0x0
 2485 0229 00 02       	.LLST32:
 2486 022a 75          		.4byte	.LVL65
 2487 022b 04          		.4byte	.LVL66
 2488 022b 00 00 00 00 		.2byte	0x1
 2489 022d 00 00 00 00 		.1byte	0x50
 2490                 		.4byte	.LVL66
 2491 022f 00 00 00 00 		.4byte	.LFE20
 2492 0231 00 00 00 00 		.2byte	0x2
 2493 0233 00 01       		.1byte	0x76
 2494 0234 51          		.1byte	0x2
 2495 0235 00 00 00 00 		.4byte	0x0
 2496 0237 00 00 00 00 		.4byte	0x0
 2497 0239 00 02       	.LLST33:
 2498 023a 76          		.4byte	.LVL68
 2499 023a 01          		.4byte	.LVL70
 2500 023b 00 00 00 00 		.2byte	0x1
 2501 023d 00 00 00 00 		.1byte	0x51
 2502                 		.4byte	.LVL73
 2503 023f 00 00 00 00 		.4byte	.LVL74
 2504 0241 00 00 00 00 		.2byte	0x1
 2505 0243 00 01       		.1byte	0x51
 2506 0244 50          		.4byte	0x0
 2507 0244 00 00 00 00 		.4byte	0x0
 2508 0246 00 00 00 00 	.LLST34:
 2509 0248 00 02       		.4byte	.LVL71
 2510 0249 76          		.4byte	.LVL72
 2511 024a 02          		.2byte	0x1
 2512 024a 00 00 00 00 		.1byte	0x51
 2513 024c 00 00 00 00 		.4byte	0x0
 2514                 		.4byte	0x0
 2515 024e 00 00 00 00 	.LLST35:
 2516 0250 00 00 00 00 		.4byte	.LFB18
 2517 0252 00 01       		.4byte	.LCFI12
 2518 0253 51          		.2byte	0x1
 2519 0254 00 00 00 00 		.1byte	0x55
 2520 0256 00 00 00 00 		.4byte	.LCFI12
 2521 0258 00 01       		.4byte	.LFE18
 2522 0259 51          		.2byte	0x2
 2523 0259 00 00 00 00 		.1byte	0x75
 2524 025b 00 00 00 00 		.1byte	0x3
 2525                 		.4byte	0x0
 2526 025d 00 00 00 00 		.4byte	0x0
 2527 025f 00 00 00 00 	.LLST36:
 2528 0261 00 01       		.4byte	.LVL75
 2529 0262 51          		.4byte	.LVL76
 2530 0263 00 00 00 00 		.2byte	0x1
 2531 0265 00 00 00 00 		.1byte	0x51
 2532                 		.4byte	.LVL76
 2533 0267 00 00 00 00 		.4byte	.LFE18
 2534 0269 00 00 00 00 		.2byte	0x2
 2535 026b 00 01       		.1byte	0x76
 2536 026c 55          		.1byte	0x0
 2537 026c 00 00 00 00 		.4byte	0x0
 2538 026e 00 00 00 00 		.4byte	0x0
 2539 0270 00 02       	.LLST37:
 2540 0271 75          		.4byte	.LVL75
 2541 0272 03          		.4byte	.LVL76
 2542 0272 00 00 00 00 		.2byte	0x1
 2543 0274 00 00 00 00 		.1byte	0x50
 2544                 		.4byte	.LVL76
 2545 0276 00 00 00 00 		.4byte	.LFE18
 2546 0278 00 00 00 00 		.2byte	0x2
 2547 027a 00 01       		.1byte	0x76
 2548 027b 51          		.1byte	0x1
 2549 027c 00 00 00 00 		.4byte	0x0
 2550 027e 00 00 00 00 		.4byte	0x0
 2551 0280 00 02       	.LLST38:
 2552 0281 76          		.4byte	.LVL77
 2553 0281 00          		.4byte	.LVL78
 2554 0282 00 00 00 00 		.2byte	0x1
 2555 0284 00 00 00 00 		.1byte	0x51
 2556                 		.4byte	.LVL88
 2557 0286 00 00 00 00 		.4byte	.LVL89
 2558 0288 00 00 00 00 		.2byte	0x1
 2559 028a 00 01       		.1byte	0x51
 2560 028b 50          		.4byte	0x0
 2561 028b 00 00 00 00 		.4byte	0x0
 2562 028d 00 00 00 00 	.LLST39:
 2563 028f 00 02       		.4byte	.LVL79
 2564 0290 76          		.4byte	.LVL80
 2565 0291 01          		.2byte	0x1
 2566 0291 00 00 00 00 		.1byte	0x50
 2567 0293 00 00 00 00 		.4byte	.LVL80
 2568                 		.4byte	.LVL81
 2569 0295 00 00 00 00 		.2byte	0x1
 2570 0297 00 00 00 00 		.1byte	0x51
 2571 0299 00 01       		.4byte	.LVL81
 2572 029a 51          		.4byte	.LVL82
 2573 029b 00 00 00 00 		.2byte	0x1
 2574 029d 00 00 00 00 		.1byte	0x50
 2575 029f 00 01       		.4byte	.LVL83
 2576 02a0 51          		.4byte	.LVL84
 2577 02a0 00 00 00 00 		.2byte	0x1
 2578 02a2 00 00 00 00 		.1byte	0x51
 2579                 		.4byte	.LVL84
 2580 02a4 00 00 00 00 		.4byte	.LVL86
 2581 02a6 00 00 00 00 		.2byte	0x1
 2582 02a8 00 01       		.1byte	0x50
 2583 02a9 50          		.4byte	.LVL87
 2584 02aa 00 00 00 00 		.4byte	.LVL88
 2585 02ac 00 00 00 00 		.2byte	0x1
 2586 02ae 00 01       		.1byte	0x51
 2587 02af 51          		.4byte	.LVL88
 2588 02af 00 00 00 00 		.4byte	.LFE18
 2589 02b1 00 00 00 00 		.2byte	0x1
 2590 02b3 00 01       		.1byte	0x50
 2591 02b4 50          		.4byte	0x0
 2592 02b5 00 00 00 00 		.4byte	0x0
 2593 02b7 00 00 00 00 	.LLST40:
 2594 02b9 00 01       		.4byte	.LFB21
 2595 02ba 51          		.4byte	.LCFI13
 2596 02ba 00 00 00 00 		.2byte	0x1
 2597 02bc 00 00 00 00 		.1byte	0x55
 2598 02be 00 01       		.4byte	.LCFI13
 2599 02bf 50          		.4byte	.LFE21
 2600 02c0 00 00 00 00 		.2byte	0x2
 2601 02c2 00 00 00 00 		.1byte	0x75
 2602 02c4 00 01       		.1byte	0x1
 2603 02c5 51          		.4byte	0x0
 2604 02c5 00 00 00 00 		.4byte	0x0
 2605 02c7 00 00 00 00 	.LLST41:
 2606 02c9 00 01       		.4byte	.LVL90
 2607 02ca 50          		.4byte	.LVL91
 2608 02cb 00 00 00 00 		.2byte	0x1
 2609 02cd 00 00 00 00 		.1byte	0x51
 2610                 		.4byte	.LVL91
 2611 02cf 00 00 00 00 		.4byte	.LVL92
 2612 02d1 00 00 00 00 		.2byte	0x1
 2613 02d3 00 01       		.1byte	0x53
 2614 02d4 55          		.4byte	.LVL92
 2615 02d4 00 00 00 00 		.4byte	.LVL93
 2616 02d6 00 00 00 00 		.2byte	0x1
 2617 02d8 00 02       		.1byte	0x51
 2618 02d9 75          		.4byte	.LVL93
 2619 02da 01          		.4byte	.LVL94
 2620 02da 00 00 00 00 		.2byte	0x1
 2621 02dc 00 00 00 00 		.1byte	0x53
 2622                 		.4byte	0x0
 2623 02de 00 00 00 00 		.4byte	0x0
 2624 02e0 00 00 00 00 	.LLST42:
 2625 02e2 00 01       		.4byte	.LFB22
 2626 02e3 51          		.4byte	.LCFI14
 2627 02e4 00 00 00 00 		.2byte	0x1
 2628 02e6 00 00 00 00 		.1byte	0x55
 2629 02e8 00 01       		.4byte	.LCFI14
 2630 02e9 53          		.4byte	.LFE22
 2631 02e9 00 00 00 00 		.2byte	0x2
 2632 02eb 00 00 00 00 		.1byte	0x75
 2633 02ed 00 01       		.1byte	0x1
 2634 02ee 51          		.4byte	0x0
 2635 02ef 00 00 00 00 		.4byte	0x0
 2636 02f1 00 00 00 00 	.LLST43:
 2637 02f3 00 01       		.4byte	.LVL95
 2638 02f4 53          		.4byte	.LVL96
 2639 02f4 00 00 00 00 		.2byte	0x1
 2640 02f6 00 00 00 00 		.1byte	0x51
 2641                 		.4byte	.LVL96
 2642 02f8 00 00 00 00 		.4byte	.LVL97
 2643 02fa 00 00 00 00 		.2byte	0x1
 2644 02fc 00 01       		.1byte	0x53
 2645 02fd 55          		.4byte	.LVL97
 2646 02fe 00 00 00 00 		.4byte	.LVL98
 2647 0300 00 00 00 00 		.2byte	0x1
 2648 0302 00 02       		.1byte	0x51
 2649 0303 75          		.4byte	.LVL98
 2650 0303 01          		.4byte	.LVL100
 2651 0304 00 00 00 00 		.2byte	0x1
 2652 0306 00 00 00 00 		.1byte	0x53
 2653                 		.4byte	.LVL100
 2654 0308 00 00 00 00 		.4byte	.LVL103
 2655 030a 00 00 00 00 		.2byte	0x1
 2656 030c 00 01       		.1byte	0x53
 2657 030d 51          		.4byte	0x0
 2658 030d 00 00 00 00 		.4byte	0x0
 2659 030f 00 00 00 00 	.LLST44:
 2660 0311 00 01       		.4byte	.LVL96
 2661 0312 53          		.4byte	.LVL97
 2662 0313 00 00 00 00 		.2byte	0x1
 2663 0315 00 00 00 00 		.1byte	0x51
 2664 0317 00 01       		.4byte	.LVL98
 2665 0318 51          		.4byte	.LVL99
 2666 0318 00 00 00 00 		.2byte	0x1
 2667 031a 00 00 00 00 		.1byte	0x51
 2668 031c 00 01       		.4byte	.LVL100
 2669 031d 53          		.4byte	.LVL102
 2670 031e 00 00 00 00 		.2byte	0x1
 2671 0320 00 00 00 00 		.1byte	0x51
 2672 0322 00 01       		.4byte	0x0
 2673 0323 53          		.4byte	0x0
 2674 0323 00 00 00 00 	.LLST45:
 2675 0325 00 00 00 00 		.4byte	.LFB8
 2676                 		.4byte	.LCFI15
 2677 0327 00 00 00 00 		.2byte	0x1
 2678 0329 00 00 00 00 		.1byte	0x55
 2679 032b 00 01       		.4byte	.LCFI15
 2680 032c 51          		.4byte	.LFE8
 2681 032d 00 00 00 00 		.2byte	0x2
 2682 032f 00 00 00 00 		.1byte	0x75
 2683 0331 00 01       		.1byte	0x9
 2684 0332 51          		.4byte	0x0
 2685 0332 00 00 00 00 		.4byte	0x0
 2686 0334 00 00 00 00 	.LLST46:
 2687 0336 00 01       		.4byte	.LVL104
 2688 0337 51          		.4byte	.LVL105
 2689 0338 00 00 00 00 		.2byte	0x1
 2690 033a 00 00 00 00 		.1byte	0x51
 2691                 		.4byte	.LVL105
 2692 033c 00 00 00 00 		.4byte	.LFE8
 2693 033e 00 00 00 00 		.2byte	0x2
 2694 0340 00 01       		.1byte	0x76
 2695 0341 55          		.1byte	0x5
 2696 0341 00 00 00 00 		.4byte	0x0
 2697 0343 00 00 00 00 		.4byte	0x0
 2698 0345 00 02       	.LLST47:
 2699 0346 75          		.4byte	.LVL104
 2700 0347 09          		.4byte	.LVL105
 2701 0347 00 00 00 00 		.2byte	0x1
 2702 0349 00 00 00 00 		.1byte	0x50
 2703                 		.4byte	.LVL105
 2704 034b 00 00 00 00 		.4byte	.LFE8
 2705 034d 00 00 00 00 		.2byte	0x2
 2706 034f 00 01       		.1byte	0x76
 2707 0350 51          		.1byte	0x6
 2708 0351 00 00 00 00 		.4byte	0x0
 2709 0353 00 00 00 00 		.4byte	0x0
 2710 0355 00 02       	.LLST48:
 2711 0356 76          		.4byte	.LVL104
 2712 0356 05          		.4byte	.LVL108
 2713 0357 00 00 00 00 		.2byte	0x2
 2714 0359 00 00 00 00 		.1byte	0x91
 2715                 		.1byte	0x0
 2716 035b 00 00 00 00 		.4byte	.LVL108
 2717 035d 00 00 00 00 		.4byte	.LFE8
 2718 035f 00 01       		.2byte	0x2
 2719 0360 50          		.1byte	0x76
 2720 0360 00 00 00 00 		.1byte	0x9
 2721 0362 00 00 00 00 		.4byte	0x0
 2722 0364 00 02       		.4byte	0x0
 2723 0365 76          	.LLST49:
 2724 0366 06          		.4byte	.LVL107
 2725 0366 00 00 00 00 		.4byte	.LVL110
 2726 0368 00 00 00 00 		.2byte	0x1
 2727                 		.1byte	0x51
 2728 036a 00 00 00 00 		.4byte	.LVL149
 2729 036c 00 00 00 00 		.4byte	.LVL150
 2730 036e 00 02       		.2byte	0x1
 2731 036f 91          		.1byte	0x51
 2732 0370 00          		.4byte	0x0
 2733 0370 00 00 00 00 		.4byte	0x0
 2734 0372 00 00 00 00 	.LLST50:
 2735 0374 00 02       		.4byte	.LVL106
 2736 0375 76          		.4byte	.LVL114
 2737 0376 09          		.2byte	0x2
 2738 0376 00 00 00 00 		.1byte	0x76
 2739 0378 00 00 00 00 		.1byte	0x0
 2740                 		.4byte	.LVL114
 2741 037a 00 00 00 00 		.4byte	.LVL124
 2742 037c 00 00 00 00 		.2byte	0x1
 2743 037e 00 01       		.1byte	0x58
 2744 037f 51          		.4byte	.LVL124
 2745 0380 00 00 00 00 		.4byte	.LVL127
 2746 0382 00 00 00 00 		.2byte	0x2
 2747 0384 00 01       		.1byte	0x76
 2748 0385 51          		.1byte	0x0
 2749 0385 00 00 00 00 		.4byte	.LVL127
 2750 0387 00 00 00 00 		.4byte	.LVL128
 2751                 		.2byte	0x1
 2752 0389 00 00 00 00 		.1byte	0x58
 2753 038b 00 00 00 00 		.4byte	.LVL128
 2754 038d 00 02       		.4byte	.LVL130
 2755 038e 76          		.2byte	0x2
 2756 038f 00          		.1byte	0x76
 2757 038f 00 00 00 00 		.1byte	0x0
 2758 0391 00 00 00 00 		.4byte	.LVL130
 2759 0393 00 01       		.4byte	.LVL134
 2760 0394 58          		.2byte	0x1
 2761 0395 00 00 00 00 		.1byte	0x58
 2762 0397 00 00 00 00 		.4byte	.LVL134
 2763 0399 00 02       		.4byte	.LVL135
 2764 039a 76          		.2byte	0x1
 2765 039a 00          		.1byte	0x53
 2766 039b 00 00 00 00 		.4byte	.LVL135
 2767 039d 00 00 00 00 		.4byte	.LVL136
 2768 039f 00 01       		.2byte	0x1
 2769 03a0 58          		.1byte	0x58
 2770 03a0 00 00 00 00 		.4byte	.LVL136
 2771 03a2 00 00 00 00 		.4byte	.LVL141
 2772 03a4 00 02       		.2byte	0x2
 2773 03a5 76          		.1byte	0x76
 2774 03a6 00          		.1byte	0x0
 2775 03a6 00 00 00 00 		.4byte	.LVL141
 2776 03a8 00 00 00 00 		.4byte	.LVL142
 2777 03aa 00 01       		.2byte	0x1
 2778 03ab 58          		.1byte	0x51
 2779 03ac 00 00 00 00 		.4byte	.LVL142
 2780 03ae 00 00 00 00 		.4byte	.LVL144
 2781 03b0 00 01       		.2byte	0x2
 2782 03b1 53          		.1byte	0x76
 2783 03b1 00 00 00 00 		.1byte	0x0
 2784 03b3 00 00 00 00 		.4byte	.LVL144
 2785 03b5 00 01       		.4byte	.LVL147
 2786 03b6 58          		.2byte	0x1
 2787 03b7 00 00 00 00 		.1byte	0x51
 2788 03b9 00 00 00 00 		.4byte	.LVL147
 2789 03bb 00 02       		.4byte	.LVL149
 2790 03bc 76          		.2byte	0x1
 2791 03bc 00          		.1byte	0x58
 2792 03bd 00 00 00 00 		.4byte	.LVL149
 2793 03bf 00 00 00 00 		.4byte	.LFE8
 2794 03c1 00 01       		.2byte	0x2
 2795 03c2 51          		.1byte	0x76
 2796 03c2 00 00 00 00 		.1byte	0x0
 2797 03c4 00 00 00 00 		.4byte	0x0
 2798 03c6 00 02       		.4byte	0x0
 2799 03c7 76          	.LLST51:
 2800 03c8 00          		.4byte	.LVL139
 2801 03c8 00 00 00 00 		.4byte	.LVL140
 2802 03ca 00 00 00 00 		.2byte	0x1
 2803 03cc 00 01       		.1byte	0x57
 2804 03cd 51          		.4byte	.LVL140
 2805 03ce 00 00 00 00 		.4byte	.LVL141
 2806 03d0 00 00 00 00 		.2byte	0x1
 2807 03d2 00 01       		.1byte	0x51
 2808 03d3 58          		.4byte	.LVL141
 2809 03d3 00 00 00 00 		.4byte	.LVL142
 2810 03d5 00 00 00 00 		.2byte	0x1
 2811 03d7 00 02       		.1byte	0x57
 2812 03d8 76          		.4byte	.LVL142
 2813 03d9 00          		.4byte	.LVL143
 2814 03d9 00 00 00 00 		.2byte	0x1
 2815 03db 00 00 00 00 		.1byte	0x51
 2816                 		.4byte	.LVL143
 2817 03dd 00 00 00 00 		.4byte	.LVL149
 2818 03df 00 00 00 00 		.2byte	0x1
 2819 03e1 00 01       		.1byte	0x57
 2820 03e2 57          		.4byte	0x0
 2821 03e3 00 00 00 00 		.4byte	0x0
 2822 03e5 00 00 00 00 	.LLST52:
 2823 03e7 00 01       		.4byte	.LVL111
 2824 03e8 51          		.4byte	.LVL136
 2825 03e8 00 00 00 00 		.2byte	0x2
 2826 03ea 00 00 00 00 		.1byte	0x76
 2827 03ec 00 01       		.1byte	0x1
 2828 03ed 57          		.4byte	.LVL147
 2829 03ee 00 00 00 00 		.4byte	.LFE8
 2830 03f0 00 00 00 00 		.2byte	0x2
 2831 03f2 00 01       		.1byte	0x76
 2832 03f3 51          		.1byte	0x1
 2833 03f3 00 00 00 00 		.4byte	0x0
 2834 03f5 00 00 00 00 		.4byte	0x0
 2835 03f7 00 01       	.LLST53:
 2836 03f8 57          		.4byte	.LVL112
 2837 03f9 00 00 00 00 		.4byte	.LVL136
 2838 03fb 00 00 00 00 		.2byte	0x2
 2839                 		.1byte	0x76
 2840 03fd 00 00 00 00 		.1byte	0x2
 2841 03ff 00 00 00 00 		.4byte	.LVL147
 2842 0401 00 02       		.4byte	.LFE8
 2843 0402 76          		.2byte	0x2
 2844 0402 01          		.1byte	0x76
 2845 0403 00 00 00 00 		.1byte	0x2
 2846 0405 00 00 00 00 		.4byte	0x0
 2847 0407 00 02       		.4byte	0x0
 2848 0408 76          	.LLST54:
 2849 0408 01          		.4byte	.LVL116
 2850 0409 00 00 00 00 		.4byte	.LVL124
 2851 040b 00 00 00 00 		.2byte	0x1
 2852                 		.1byte	0x5a
 2853 040d 00 00 00 00 		.4byte	.LVL147
 2854 040f 00 00 00 00 		.4byte	.LVL149
 2855 0411 00 02       		.2byte	0x1
 2856 0412 76          		.1byte	0x5a
 2857 0412 02          		.4byte	0x0
 2858 0413 00 00 00 00 		.4byte	0x0
 2859 0415 00 00 00 00 	.LLST55:
 2860 0417 00 02       		.4byte	.LVL125
 2861 0418 76          		.4byte	.LVL126
 2862 0418 02          		.2byte	0x1
 2863 0419 00 00 00 00 		.1byte	0x58
 2864 041b 00 00 00 00 		.4byte	.LVL126
 2865                 		.4byte	.LVL129
 2866 041d 00 00 00 00 		.2byte	0x1
 2867 041f 00 00 00 00 		.1byte	0x51
 2868 0421 00 01       		.4byte	.LVL129
 2869 0422 5A          		.4byte	.LVL130
 2870 0422 00 00 00 00 		.2byte	0x1
 2871 0424 00 00 00 00 		.1byte	0x58
 2872 0426 00 01       		.4byte	.LVL132
 2873 0427 5A          		.4byte	.LVL133
 2874 0428 00 00 00 00 		.2byte	0x1
 2875 042a 00 00 00 00 		.1byte	0x51
 2876                 		.4byte	0x0
 2877 042c 00 00 00 00 		.4byte	0x0
 2878 042e 00 00 00 00 	.LLST56:
 2879 0430 00 01       		.4byte	.LVL113
 2880 0431 58          		.4byte	.LVL124
 2881 0431 00 00 00 00 		.2byte	0x1
 2882 0433 00 00 00 00 		.1byte	0x59
 2883 0435 00 01       		.4byte	.LVL147
 2884 0436 51          		.4byte	.LVL149
 2885 0437 00 00 00 00 		.2byte	0x1
 2886 0439 00 00 00 00 		.1byte	0x59
 2887 043b 00 01       		.4byte	0x0
 2888 043c 58          		.4byte	0x0
 2889 043c 00 00 00 00 	.LLST57:
 2890 043e 00 00 00 00 		.4byte	.LVL115
 2891 0440 00 01       		.4byte	.LVL124
 2892 0441 51          		.2byte	0x1
 2893 0442 00 00 00 00 		.1byte	0x57
 2894 0444 00 00 00 00 		.4byte	.LVL147
 2895                 		.4byte	.LVL149
 2896 0446 00 00 00 00 		.2byte	0x1
 2897 0448 00 00 00 00 		.1byte	0x57
 2898 044a 00 01       		.4byte	0x0
 2899 044b 59          		.4byte	0x0
 2900 044b 00 00 00 00 	.LLST58:
 2901 044d 00 00 00 00 		.4byte	.LVL116
 2902 044f 00 01       		.4byte	.LVL117
 2903 0450 59          		.2byte	0x1
 2904 0451 00 00 00 00 		.1byte	0x50
 2905 0453 00 00 00 00 		.4byte	.LVL119
 2906                 		.4byte	.LVL120
 2907 0455 00 00 00 00 		.2byte	0x1
 2908 0457 00 00 00 00 		.1byte	0x50
 2909 0459 00 01       		.4byte	.LVL122
 2910 045a 57          		.4byte	.LVL124
 2911 045a 00 00 00 00 		.2byte	0x1
 2912 045c 00 00 00 00 		.1byte	0x50
 2913 045e 00 01       		.4byte	.LVL147
 2914 045f 57          		.4byte	.LVL148
 2915 0460 00 00 00 00 		.2byte	0x1
 2916 0462 00 00 00 00 		.1byte	0x50
 2917                 		.4byte	0x0
 2918 0464 00 00 00 00 		.4byte	0x0
 2919 0466 00 00 00 00 	.LLST59:
 2920 0468 00 01       		.4byte	.LFB2
 2921 0469 50          		.4byte	.LCFI16
 2922 0469 00 00 00 00 		.2byte	0x1
 2923 046b 00 00 00 00 		.1byte	0x55
 2924 046d 00 01       		.4byte	.LCFI16
 2925 046e 50          		.4byte	.LFE2
 2926 046f 00 00 00 00 		.2byte	0x2
 2927 0471 00 00 00 00 		.1byte	0x75
 2928 0473 00 01       		.1byte	0x17
 2929 0474 50          		.4byte	0x0
 2930 0474 00 00 00 00 		.4byte	0x0
 2931 0476 00 00 00 00 	.LLST60:
 2932 0478 00 01       		.4byte	.LVL151
 2933 0479 50          		.4byte	.LVL152
 2934 047a 00 00 00 00 		.2byte	0x1
 2935 047c 00 00 00 00 		.1byte	0x51
 2936                 		.4byte	.LVL152
 2937 047e 00 00 00 00 		.4byte	.LFE2
 2938 0480 00 00 00 00 		.2byte	0x2
 2939 0482 00 01       		.1byte	0x76
 2940 0483 55          		.1byte	0x13
 2941 0483 00 00 00 00 		.4byte	0x0
 2942 0485 00 00 00 00 		.4byte	0x0
 2943 0487 00 02       	.LLST61:
 2944 0488 75          		.4byte	.LVL151
 2945 0489 17          		.4byte	.LVL152
 2946 0489 00 00 00 00 		.2byte	0x1
 2947 048b 00 00 00 00 		.1byte	0x50
 2948                 		.4byte	.LVL152
 2949 048d 00 00 00 00 		.4byte	.LFE2
 2950 048f 00 00 00 00 		.2byte	0x2
 2951 0491 00 01       		.1byte	0x76
 2952 0492 51          		.1byte	0x14
 2953 0493 00 00 00 00 		.4byte	0x0
 2954 0495 00 00 00 00 		.4byte	0x0
 2955 0497 00 02       	.LLST62:
 2956 0498 76          		.4byte	.LVL151
 2957 0498 13          		.4byte	.LVL155
 2958 0499 00 00 00 00 		.2byte	0x2
 2959 049b 00 00 00 00 		.1byte	0x91
 2960                 		.1byte	0x0
 2961 049d 00 00 00 00 		.4byte	.LVL155
 2962 049f 00 00 00 00 		.4byte	.LFE2
 2963 04a1 00 01       		.2byte	0x2
 2964 04a2 50          		.1byte	0x76
 2965 04a2 00 00 00 00 		.1byte	0x17
 2966 04a4 00 00 00 00 		.4byte	0x0
 2967 04a6 00 02       		.4byte	0x0
 2968 04a7 76          	.LLST63:
 2969 04a8 14          		.4byte	.LVL151
 2970 04a8 00 00 00 00 		.4byte	.LVL163
 2971 04aa 00 00 00 00 		.2byte	0x2
 2972                 		.1byte	0x91
 2973 04ac 00 00 00 00 		.1byte	0x1
 2974 04ae 00 00 00 00 		.4byte	.LVL163
 2975 04b0 00 02       		.4byte	.LVL191
 2976 04b1 91          		.2byte	0x2
 2977 04b2 00          		.1byte	0x76
 2978 04b2 00 00 00 00 		.1byte	0x18
 2979 04b4 00 00 00 00 		.4byte	.LVL191
 2980 04b6 00 02       		.4byte	.LVL221
 2981 04b7 76          		.2byte	0x2
 2982 04b8 17          		.1byte	0x91
 2983 04b8 00 00 00 00 		.1byte	0x1
 2984 04ba 00 00 00 00 		.4byte	.LVL221
 2985                 		.4byte	.LVL234
 2986 04bc 00 00 00 00 		.2byte	0x2
 2987 04be 00 00 00 00 		.1byte	0x76
 2988 04c0 00 02       		.1byte	0x18
 2989 04c1 91          		.4byte	.LVL234
 2990 04c2 01          		.4byte	.LVL235
 2991 04c2 00 00 00 00 		.2byte	0x2
 2992 04c4 00 00 00 00 		.1byte	0x91
 2993 04c6 00 02       		.1byte	0x1
 2994 04c7 76          		.4byte	.LVL235
 2995 04c8 18          		.4byte	.LVL236
 2996 04c8 00 00 00 00 		.2byte	0x2
 2997 04ca 00 00 00 00 		.1byte	0x76
 2998 04cc 00 02       		.1byte	0x18
 2999 04cd 91          		.4byte	.LVL236
 3000 04ce 01          		.4byte	.LFE2
 3001 04ce 00 00 00 00 		.2byte	0x2
 3002 04d0 00 00 00 00 		.1byte	0x91
 3003 04d2 00 02       		.1byte	0x1
 3004 04d3 76          		.4byte	0x0
 3005 04d4 18          		.4byte	0x0
 3006 04d4 00 00 00 00 	.LLST64:
 3007 04d6 00 00 00 00 		.4byte	.LVL151
 3008 04d8 00 02       		.4byte	.LVL158
 3009 04d9 91          		.2byte	0x2
 3010 04da 01          		.1byte	0x91
 3011 04da 00 00 00 00 		.1byte	0x2
 3012 04dc 00 00 00 00 		.4byte	.LVL158
 3013 04de 00 02       		.4byte	.LVL191
 3014 04df 76          		.2byte	0x2
 3015 04e0 18          		.1byte	0x76
 3016 04e0 00 00 00 00 		.1byte	0x19
 3017 04e2 00 00 00 00 		.4byte	.LVL191
 3018 04e4 00 02       		.4byte	.LVL192
 3019 04e5 91          		.2byte	0x2
 3020 04e6 01          		.1byte	0x91
 3021 04e6 00 00 00 00 		.1byte	0x2
 3022 04e8 00 00 00 00 		.4byte	.LVL192
 3023                 		.4byte	.LVL204
 3024 04ea 00 00 00 00 		.2byte	0x2
 3025 04ec 00 00 00 00 		.1byte	0x76
 3026 04ee 00 02       		.1byte	0x19
 3027 04ef 91          		.4byte	.LVL204
 3028 04f0 02          		.4byte	.LVL206
 3029 04f0 00 00 00 00 		.2byte	0x2
 3030 04f2 00 00 00 00 		.1byte	0x91
 3031 04f4 00 02       		.1byte	0x2
 3032 04f5 76          		.4byte	.LVL206
 3033 04f6 19          		.4byte	.LVL218
 3034 04f6 00 00 00 00 		.2byte	0x2
 3035 04f8 00 00 00 00 		.1byte	0x76
 3036 04fa 00 02       		.1byte	0x19
 3037 04fb 91          		.4byte	.LVL218
 3038 04fc 02          		.4byte	.LVL235
 3039 04fc 00 00 00 00 		.2byte	0x2
 3040 04fe 00 00 00 00 		.1byte	0x91
 3041 0500 00 02       		.1byte	0x2
 3042 0501 76          		.4byte	.LVL235
 3043 0502 19          		.4byte	.LVL236
 3044 0502 00 00 00 00 		.2byte	0x2
 3045 0504 00 00 00 00 		.1byte	0x76
 3046 0506 00 02       		.1byte	0x19
 3047 0507 91          		.4byte	.LVL236
 3048 0508 02          		.4byte	.LFE2
 3049 0508 00 00 00 00 		.2byte	0x2
 3050 050a 00 00 00 00 		.1byte	0x91
 3051 050c 00 02       		.1byte	0x2
 3052 050d 76          		.4byte	0x0
 3053 050e 19          		.4byte	0x0
 3054 050e 00 00 00 00 	.LLST65:
 3055 0510 00 00 00 00 		.4byte	.LVL154
 3056 0512 00 02       		.4byte	.LVL157
 3057 0513 91          		.2byte	0x1
 3058 0514 02          		.1byte	0x51
 3059 0514 00 00 00 00 		.4byte	.LVL236
 3060 0516 00 00 00 00 		.4byte	.LVL237
 3061 0518 00 02       		.2byte	0x1
 3062 0519 76          		.1byte	0x51
 3063 051a 19          		.4byte	0x0
 3064 051a 00 00 00 00 		.4byte	0x0
 3065 051c 00 00 00 00 	.LLST66:
 3066 051e 00 02       		.4byte	.LVL164
 3067 051f 91          		.4byte	.LVL176
 3068 0520 02          		.2byte	0x2
 3069 0520 00 00 00 00 		.1byte	0x76
 3070 0522 00 00 00 00 		.1byte	0x10
 3071                 		.4byte	.LVL177
 3072 0524 00 00 00 00 		.4byte	.LVL178
 3073 0526 00 00 00 00 		.2byte	0x2
 3074 0528 00 01       		.1byte	0x76
 3075 0529 51          		.1byte	0x3
 3076 052a 00 00 00 00 		.4byte	.LVL179
 3077 052c 00 00 00 00 		.4byte	.LVL191
 3078 052e 00 01       		.2byte	0x2
 3079 052f 51          		.1byte	0x76
 3080 052f 00 00 00 00 		.1byte	0x3
 3081 0531 00 00 00 00 		.4byte	.LVL197
 3082                 		.4byte	.LVL198
 3083 0533 00 00 00 00 		.2byte	0x1
 3084 0535 00 00 00 00 		.1byte	0x58
 3085 0537 00 02       		.4byte	.LVL200
 3086 0538 76          		.4byte	.LVL204
 3087 0539 10          		.2byte	0x1
 3088 0539 00 00 00 00 		.1byte	0x58
 3089 053b 00 00 00 00 		.4byte	.LVL209
 3090 053d 00 02       		.4byte	.LVL210
 3091 053e 76          		.2byte	0x2
 3092 053f 03          		.1byte	0x76
 3093 053f 00 00 00 00 		.1byte	0x2
 3094 0541 00 00 00 00 		.4byte	.LVL211
 3095 0543 00 02       		.4byte	.LVL218
 3096 0544 76          		.2byte	0x2
 3097 0545 03          		.1byte	0x76
 3098 0545 00 00 00 00 		.1byte	0x2
 3099 0547 00 00 00 00 		.4byte	.LVL222
 3100 0549 00 01       		.4byte	.LVL223
 3101 054a 58          		.2byte	0x2
 3102 054b 00 00 00 00 		.1byte	0x76
 3103 054d 00 00 00 00 		.1byte	0x1
 3104 054f 00 01       		.4byte	.LVL224
 3105 0550 58          		.4byte	.LVL235
 3106 0550 00 00 00 00 		.2byte	0x2
 3107 0552 00 00 00 00 		.1byte	0x76
 3108 0554 00 02       		.1byte	0x1
 3109 0555 76          		.4byte	.LVL235
 3110 0556 02          		.4byte	.LFE2
 3111 0556 00 00 00 00 		.2byte	0x2
 3112 0558 00 00 00 00 		.1byte	0x76
 3113 055a 00 02       		.1byte	0x10
 3114 055b 76          		.4byte	0x0
 3115 055c 02          		.4byte	0x0
 3116 055c 00 00 00 00 	.LLST67:
 3117 055e 00 00 00 00 		.4byte	.LVL159
 3118 0560 00 02       		.4byte	.LVL191
 3119 0561 76          		.2byte	0x2
 3120 0562 01          		.1byte	0x76
 3121 0562 00 00 00 00 		.1byte	0xf
 3122 0564 00 00 00 00 		.4byte	.LVL234
 3123 0566 00 02       		.4byte	.LFE2
 3124 0567 76          		.2byte	0x2
 3125 0568 01          		.1byte	0x76
 3126 0568 00 00 00 00 		.1byte	0xf
 3127 056a 00 00 00 00 		.4byte	0x0
 3128 056c 00 02       		.4byte	0x0
 3129 056d 76          	.LLST68:
 3130 056e 10          		.4byte	.LVL160
 3131 056e 00 00 00 00 		.4byte	.LVL189
 3132 0570 00 00 00 00 		.2byte	0x2
 3133                 		.1byte	0x76
 3134 0572 00 00 00 00 		.1byte	0xe
 3135 0574 00 00 00 00 		.4byte	.LVL189
 3136 0576 00 02       		.4byte	.LVL190
 3137 0577 76          		.2byte	0x1
 3138 0578 0F          		.1byte	0x58
 3139 0578 00 00 00 00 		.4byte	.LVL190
 3140 057a 00 00 00 00 		.4byte	.LVL191
 3141 057c 00 02       		.2byte	0x2
 3142 057d 76          		.1byte	0x76
 3143 057e 0F          		.1byte	0xe
 3144 057e 00 00 00 00 		.4byte	.LVL234
 3145 0580 00 00 00 00 		.4byte	.LFE2
 3146                 		.2byte	0x2
 3147 0582 00 00 00 00 		.1byte	0x76
 3148 0584 00 00 00 00 		.1byte	0xe
 3149 0586 00 02       		.4byte	0x0
 3150 0587 76          		.4byte	0x0
 3151 0588 0E          	.LLST69:
 3152 0588 00 00 00 00 		.4byte	.LVL165
 3153 058a 00 00 00 00 		.4byte	.LVL176
 3154 058c 00 01       		.2byte	0x2
 3155 058d 58          		.1byte	0x76
 3156 058e 00 00 00 00 		.1byte	0xd
 3157 0590 00 00 00 00 		.4byte	.LVL235
 3158 0592 00 02       		.4byte	.LFE2
 3159 0593 76          		.2byte	0x2
 3160 0593 0E          		.1byte	0x76
 3161 0594 00 00 00 00 		.1byte	0xd
 3162 0596 00 00 00 00 		.4byte	0x0
 3163 0598 00 02       		.4byte	0x0
 3164 0599 76          	.LLST70:
 3165 0599 0E          		.4byte	.LVL162
 3166 059a 00 00 00 00 		.4byte	.LVL191
 3167 059c 00 00 00 00 		.2byte	0x2
 3168                 		.1byte	0x76
 3169 059e 00 00 00 00 		.1byte	0xc
 3170 05a0 00 00 00 00 		.4byte	.LVL234
 3171 05a2 00 02       		.4byte	.LFE2
 3172 05a3 76          		.2byte	0x2
 3173 05a3 0D          		.1byte	0x76
 3174 05a4 00 00 00 00 		.1byte	0xc
 3175 05a6 00 00 00 00 		.4byte	0x0
 3176 05a8 00 02       		.4byte	0x0
 3177 05a9 76          	.LLST71:
 3178 05a9 0D          		.4byte	.LVL167
 3179 05aa 00 00 00 00 		.4byte	.LVL168
 3180 05ac 00 00 00 00 		.2byte	0x1
 3181                 		.1byte	0x50
 3182 05ae 00 00 00 00 		.4byte	.LVL170
 3183 05b0 00 00 00 00 		.4byte	.LVL172
 3184 05b2 00 02       		.2byte	0x1
 3185 05b3 76          		.1byte	0x50
 3186 05b3 0C          		.4byte	0x0
 3187 05b4 00 00 00 00 		.4byte	0x0
 3188 05b6 00 00 00 00 	.LLST72:
 3189 05b8 00 02       		.4byte	.LVL182
 3190 05b9 76          		.4byte	.LVL183
 3191 05b9 0C          		.2byte	0x1
 3192 05ba 00 00 00 00 		.1byte	0x58
 3193 05bc 00 00 00 00 		.4byte	.LVL183
 3194                 		.4byte	.LVL184
 3195 05be 00 00 00 00 		.2byte	0x1
 3196 05c0 00 00 00 00 		.1byte	0x51
 3197 05c2 00 01       		.4byte	.LVL184
 3198 05c3 50          		.4byte	.LVL189
 3199 05c3 00 00 00 00 		.2byte	0x1
 3200 05c5 00 00 00 00 		.1byte	0x58
 3201 05c7 00 01       		.4byte	.LVL190
 3202 05c8 50          		.4byte	.LVL191
 3203 05c9 00 00 00 00 		.2byte	0x1
 3204 05cb 00 00 00 00 		.1byte	0x58
 3205                 		.4byte	.LVL234
 3206 05cd 00 00 00 00 		.4byte	.LFE2
 3207 05cf 00 00 00 00 		.2byte	0x1
 3208 05d1 00 01       		.1byte	0x58
 3209 05d2 58          		.4byte	0x0
 3210 05d2 00 00 00 00 		.4byte	0x0
 3211 05d4 00 00 00 00 	.LLST73:
 3212 05d6 00 01       		.4byte	.LVL193
 3213 05d7 51          		.4byte	.LVL204
 3214 05d8 00 00 00 00 		.2byte	0x2
 3215 05da 00 00 00 00 		.1byte	0x76
 3216 05dc 00 01       		.1byte	0xb
 3217 05dd 58          		.4byte	.LVL234
 3218 05dd 00 00 00 00 		.4byte	.LFE2
 3219 05df 00 00 00 00 		.2byte	0x2
 3220 05e1 00 01       		.1byte	0x76
 3221 05e2 58          		.1byte	0xb
 3222 05e3 00 00 00 00 		.4byte	0x0
 3223 05e5 00 00 00 00 		.4byte	0x0
 3224 05e7 00 01       	.LLST74:
 3225 05e8 58          		.4byte	.LVL194
 3226 05e8 00 00 00 00 		.4byte	.LVL204
 3227 05ea 00 00 00 00 		.2byte	0x2
 3228                 		.1byte	0x76
 3229 05ec 00 00 00 00 		.1byte	0xa
 3230 05ee 00 00 00 00 		.4byte	.LVL234
 3231 05f0 00 02       		.4byte	.LFE2
 3232 05f1 76          		.2byte	0x2
 3233 05f2 0B          		.1byte	0x76
 3234 05f2 00 00 00 00 		.1byte	0xa
 3235 05f4 00 00 00 00 		.4byte	0x0
 3236 05f6 00 02       		.4byte	0x0
 3237 05f7 76          	.LLST75:
 3238 05f8 0B          		.4byte	.LVL195
 3239 05f8 00 00 00 00 		.4byte	.LVL196
 3240 05fa 00 00 00 00 		.2byte	0x1
 3241                 		.1byte	0x57
 3242 05fc 00 00 00 00 		.4byte	.LVL196
 3243 05fe 00 00 00 00 		.4byte	.LVL199
 3244 0600 00 02       		.2byte	0x1
 3245 0601 76          		.1byte	0x51
 3246 0602 0A          		.4byte	.LVL199
 3247 0602 00 00 00 00 		.4byte	.LVL204
 3248 0604 00 00 00 00 		.2byte	0x1
 3249 0606 00 02       		.1byte	0x57
 3250 0607 76          		.4byte	.LVL234
 3251 0608 0A          		.4byte	.LFE2
 3252 0608 00 00 00 00 		.2byte	0x1
 3253 060a 00 00 00 00 		.1byte	0x57
 3254                 		.4byte	0x0
 3255 060c 00 00 00 00 		.4byte	0x0
 3256 060e 00 00 00 00 	.LLST76:
 3257 0610 00 01       		.4byte	.LVL207
 3258 0611 57          		.4byte	.LVL218
 3259 0612 00 00 00 00 		.2byte	0x2
 3260 0614 00 00 00 00 		.1byte	0x76
 3261 0616 00 01       		.1byte	0x9
 3262 0617 51          		.4byte	.LVL234
 3263 0617 00 00 00 00 		.4byte	.LFE2
 3264 0619 00 00 00 00 		.2byte	0x2
 3265 061b 00 01       		.1byte	0x76
 3266 061c 57          		.1byte	0x9
 3267 061d 00 00 00 00 		.4byte	0x0
 3268 061f 00 00 00 00 		.4byte	0x0
 3269 0621 00 01       	.LLST77:
 3270 0622 57          		.4byte	.LVL208
 3271 0622 00 00 00 00 		.4byte	.LVL218
 3272 0624 00 00 00 00 		.2byte	0x2
 3273                 		.1byte	0x76
 3274 0626 00 00 00 00 		.1byte	0x8
 3275 0628 00 00 00 00 		.4byte	.LVL234
 3276 062a 00 02       		.4byte	.LFE2
 3277 062b 76          		.2byte	0x2
 3278 062c 09          		.1byte	0x76
 3279 062c 00 00 00 00 		.1byte	0x8
 3280 062e 00 00 00 00 		.4byte	0x0
 3281 0630 00 02       		.4byte	0x0
 3282 0631 76          	.LLST78:
 3283 0632 09          		.4byte	.LVL214
 3284 0632 00 00 00 00 		.4byte	.LVL218
 3285 0634 00 00 00 00 		.2byte	0x2
 3286                 		.1byte	0x76
 3287 0636 00 00 00 00 		.1byte	0x7
 3288 0638 00 00 00 00 		.4byte	.LVL234
 3289 063a 00 02       		.4byte	.LFE2
 3290 063b 76          		.2byte	0x2
 3291 063c 08          		.1byte	0x76
 3292 063c 00 00 00 00 		.1byte	0x7
 3293 063e 00 00 00 00 		.4byte	0x0
 3294 0640 00 02       		.4byte	0x0
 3295 0641 76          	.LLST79:
 3296 0642 08          		.4byte	.LFB9
 3297 0642 00 00 00 00 		.4byte	.LCFI17
 3298 0644 00 00 00 00 		.2byte	0x1
 3299                 		.1byte	0x55
 3300 0646 00 00 00 00 		.4byte	.LCFI17
 3301 0648 00 00 00 00 		.4byte	.LFE9
 3302 064a 00 02       		.2byte	0x2
 3303 064b 76          		.1byte	0x75
 3304 064c 07          		.1byte	0x9
 3305 064c 00 00 00 00 		.4byte	0x0
 3306 064e 00 00 00 00 		.4byte	0x0
 3307 0650 00 02       	.LLST80:
 3308 0651 76          		.4byte	.LVL238
 3309 0652 07          		.4byte	.LVL239
 3310 0652 00 00 00 00 		.2byte	0x1
 3311 0654 00 00 00 00 		.1byte	0x51
 3312                 		.4byte	.LVL239
 3313 0656 00 00 00 00 		.4byte	.LFE9
 3314 0658 00 00 00 00 		.2byte	0x2
 3315 065a 00 01       		.1byte	0x76
 3316 065b 55          		.1byte	0x6
 3317 065c 00 00 00 00 		.4byte	0x0
 3318 065e 00 00 00 00 		.4byte	0x0
 3319 0660 00 02       	.LLST81:
 3320 0661 75          		.4byte	.LVL238
 3321 0661 09          		.4byte	.LVL240
 3322 0662 00 00 00 00 		.2byte	0x1
 3323 0664 00 00 00 00 		.1byte	0x50
 3324                 		.4byte	.LVL240
 3325 0666 00 00 00 00 		.4byte	.LFE9
 3326 0668 00 00 00 00 		.2byte	0x2
 3327 066a 00 01       		.1byte	0x76
 3328 066b 51          		.1byte	0x7
 3329 066b 00 00 00 00 		.4byte	0x0
 3330 066d 00 00 00 00 		.4byte	0x0
 3331 066f 00 02       	.LLST82:
 3332 0670 76          		.4byte	.LVL238
 3333 0671 06          		.4byte	.LVL244
 3334 0671 00 00 00 00 		.2byte	0x2
 3335 0673 00 00 00 00 		.1byte	0x91
 3336                 		.1byte	0x0
 3337 0675 00 00 00 00 		.4byte	.LVL244
 3338 0677 00 00 00 00 		.4byte	.LFE9
 3339 0679 00 01       		.2byte	0x2
 3340 067a 50          		.1byte	0x76
 3341 067b 00 00 00 00 		.1byte	0x9
 3342 067d 00 00 00 00 		.4byte	0x0
 3343 067f 00 02       		.4byte	0x0
 3344 0680 76          	.LLST83:
 3345 0680 07          		.4byte	.LVL252
 3346 0681 00 00 00 00 		.4byte	.LVL253
 3347 0683 00 00 00 00 		.2byte	0x1
 3348                 		.1byte	0x51
 3349 0685 00 00 00 00 		.4byte	.LVL256
 3350 0687 00 00 00 00 		.4byte	.LVL259
 3351 0689 00 02       		.2byte	0x1
 3352 068a 91          		.1byte	0x51
 3353 068a 00          		.4byte	0x0
 3354 068b 00 00 00 00 		.4byte	0x0
 3355 068d 00 00 00 00 	.LLST84:
 3356 068f 00 02       		.4byte	.LVL251
 3357 0690 76          		.4byte	.LVL254
 3358 0690 09          		.2byte	0x1
 3359 0691 00 00 00 00 		.1byte	0x50
 3360 0693 00 00 00 00 		.4byte	.LVL258
 3361                 		.4byte	.LVL260
 3362 0695 00 00 00 00 		.2byte	0x1
 3363 0697 00 00 00 00 		.1byte	0x50
 3364 0699 00 01       		.4byte	0x0
 3365 069a 51          		.4byte	0x0
 3366 069a 00 00 00 00 	.LLST85:
 3367 069c 00 00 00 00 		.4byte	.LVL246
 3368 069e 00 01       		.4byte	.LVL247
 3369 069f 51          		.2byte	0x1
 3370 06a0 00 00 00 00 		.1byte	0x50
 3371 06a2 00 00 00 00 		.4byte	.LVL247
 3372                 		.4byte	.LVL248
 3373 06a4 00 00 00 00 		.2byte	0x1
 3374 06a6 00 00 00 00 		.1byte	0x57
 3375 06a8 00 01       		.4byte	.LVL249
 3376 06a9 50          		.4byte	.LVL255
 3377 06a9 00 00 00 00 		.2byte	0x1
 3378 06ab 00 00 00 00 		.1byte	0x57
 3379 06ad 00 01       		.4byte	.LVL257
 3380 06ae 50          		.4byte	.LVL261
 3381 06af 00 00 00 00 		.2byte	0x1
 3382 06b1 00 00 00 00 		.1byte	0x57
 3383                 		.4byte	0x0
 3384 06b3 00 00 00 00 		.4byte	0x0
 3385 06b5 00 00 00 00 	.LLST86:
 3386 06b7 00 01       		.4byte	.LFB7
 3387 06b8 50          		.4byte	.LCFI18
 3388 06b8 00 00 00 00 		.2byte	0x1
 3389 06ba 00 00 00 00 		.1byte	0x55
 3390 06bc 00 01       		.4byte	.LCFI18
 3391 06bd 57          		.4byte	.LFE7
 3392 06be 00 00 00 00 		.2byte	0x2
 3393 06c0 00 00 00 00 		.1byte	0x75
 3394 06c2 00 01       		.1byte	0x4
 3395 06c3 57          		.4byte	0x0
 3396 06c3 00 00 00 00 		.4byte	0x0
 3397 06c5 00 00 00 00 	.LLST87:
 3398 06c7 00 01       		.4byte	.LVL262
 3399 06c8 57          		.4byte	.LVL263
 3400 06c9 00 00 00 00 		.2byte	0x1
 3401 06cb 00 00 00 00 		.1byte	0x51
 3402                 		.4byte	.LVL263
 3403 06cd 00 00 00 00 		.4byte	.LVL264
 3404 06cf 00 00 00 00 		.2byte	0x1
 3405 06d1 00 01       		.1byte	0x53
 3406 06d2 55          		.4byte	0x0
 3407 06d2 00 00 00 00 		.4byte	0x0
 3408 06d4 00 00 00 00 	.LLST88:
 3409 06d6 00 02       		.4byte	.LVL262
 3410 06d7 75          		.4byte	.LVL264
 3411 06d8 04          		.2byte	0x1
 3412 06d8 00 00 00 00 		.1byte	0x50
 3413 06da 00 00 00 00 		.4byte	0x0
 3414                 		.4byte	0x0
 3415 06dc 00 00 00 00 		.file 2 "C:/CSR_uEnergy_SDK-2.3.0.31/tools/include/CSR101x_A05/types.h"
 3416 06de 00 00 00 00 		.file 3 "octet_queue.h"
 3417 06e0 00 01       		.section	.debug_info
 3418 06e1 51          		.4byte	0xa19
 3419 06e2 00 00 00 00 		.2byte	0x2
 3420 06e4 00 00 00 00 		.4byte	.Ldebug_abbrev0
 3421 06e6 00 01       		.1byte	0x4
 3422 06e7 53          		.1byte	0x1
 3423 06e7 00 00 00 00 		.4byte	.LASF73
 3424 06e9 00 00 00 00 		.1byte	0x1
 3425                 		.4byte	.LASF74
 3426 06eb 00 00 00 00 		.4byte	.LASF75
 3427 06ed 00 00 00 00 		.4byte	0x0
 3428 06ef 00 01       		.4byte	0x0
 3429 06f0 50          		.4byte	.Ldebug_ranges0+0xa8
 3430 06f1 00 00 00 00 		.4byte	.Ldebug_line0
 3431 06f3 00 00 00 00 		.1byte	0x2
 3432                 		.4byte	.LASF0
 3433                 		.1byte	0x2
 3434                 		.1byte	0x1e
 3435 0000 00 00 0A 19 		.4byte	0x34
 3436 0002 00 02       		.1byte	0x3
 3437 0003 00 00 00 00 		.1byte	0x2
 3438 0005 04          		.1byte	0x8
 3439 0005 01          		.4byte	.LASF2
 3440 0006 00 00 00 00 		.1byte	0x2
 3441 0008 01          		.4byte	.LASF1
 3442 0008 00 00 00 00 		.1byte	0x2
 3443 000a 00 00 00 00 		.1byte	0x1f
 3444 000c 00 00 00 00 		.4byte	0x46
 3445 000e 00 00 00 00 		.1byte	0x3
 3446 0010 00 00 00 00 		.1byte	0x2
 3447 0012 00 00 00 00 		.1byte	0x7
 3448 0014 02          		.4byte	.LASF3
 3449 0015 00 00 00 00 		.1byte	0x3
 3450 0017 02          		.1byte	0x4
 3451 0017 1E          		.1byte	0x7
 3452 0018 00 00 00 34 		.4byte	.LASF4
 3453 001a 03          		.1byte	0x3
 3454 001a 02          		.1byte	0x2
 3455 001b 08          		.1byte	0x6
 3456 001b 00 00 00 00 		.4byte	.LASF5
 3457 001d 02          		.1byte	0x3
 3458 001e 00 00 00 00 		.1byte	0x2
 3459 0020 02          		.1byte	0x5
 3460 0020 1F          		.4byte	.LASF6
 3461 0021 00 00 00 46 		.1byte	0x3
 3462 0023 03          		.1byte	0x4
 3463 0023 02          		.1byte	0x5
 3464 0024 07          		.4byte	.LASF7
 3465 0024 00 00 00 00 		.1byte	0x2
 3466 0026 03          		.4byte	.LASF8
 3467 0027 04          		.1byte	0x2
 3468 0027 07          		.1byte	0x2a
 3469 0028 00 00 00 00 		.4byte	0x74
 3470 002a 03          		.1byte	0x3
 3471 002a 02          		.1byte	0x2
 3472 002b 06          		.1byte	0x7
 3473 002b 00 00 00 00 		.4byte	.LASF9
 3474 002d 03          		.1byte	0x4
 3475 002e 02          		.1byte	0x2
 3476 002e 05          		.1byte	0x3
 3477 002f 00 00 00 00 		.1byte	0x2b
 3478 0031 03          		.4byte	0x96
 3479 0031 04          		.1byte	0x5
 3480 0032 05          		.4byte	.LASF10
 3481 0032 00 00 00 00 		.1byte	0x0
 3482 0034 02          		.1byte	0x5
 3483 0035 00 00 00 00 		.4byte	.LASF11
 3484 0037 02          		.1byte	0x1
 3485 0037 2A          		.1byte	0x5
 3486 0038 00 00 00 74 		.4byte	.LASF12
 3487 003a 03          		.1byte	0x2
 3488 003a 02          		.1byte	0x0
 3489 003b 07          		.1byte	0x2
 3490 003b 00 00 00 00 		.4byte	.LASF13
 3491 003d 04          		.1byte	0x3
 3492 003e 02          		.1byte	0x3a
 3493 003e 03          		.4byte	0x7b
 3494 003f 2B          		.1byte	0x6
 3495 003f 00 00 00 96 		.4byte	.LASF76
 3496 0041 05          		.1byte	0xc
 3497 0042 00 00 00 00 		.1byte	0x3
 3498 0044 00          		.1byte	0x3e
 3499 0044 05          		.4byte	0x102
 3500 0045 00 00 00 00 		.1byte	0x7
 3501 0047 01          		.4byte	.LASF14
 3502 0047 05          		.1byte	0x3
 3503 0048 00 00 00 00 		.1byte	0x42
 3504 004a 02          		.4byte	0x102
 3505 004a 00          		.1byte	0x2
 3506 004b 02          		.1byte	0x23
 3507 004b 00 00 00 00 		.1byte	0x0
 3508 004d 03          		.1byte	0x7
 3509 004e 3A          		.4byte	.LASF15
 3510 004e 00 00 00 7B 		.1byte	0x3
 3511 0050 06          		.1byte	0x49
 3512 0051 00 00 00 00 		.4byte	0x3b
 3513 0053 0C          		.1byte	0x2
 3514 0053 03          		.1byte	0x23
 3515 0054 3E          		.1byte	0x1
 3516 0054 00 00 01 02 		.1byte	0x7
 3517 0056 07          		.4byte	.LASF16
 3518 0057 00 00 00 00 		.1byte	0x3
 3519 0059 03          		.1byte	0x52
 3520 0059 42          		.4byte	0x3b
 3521 005a 00 00 01 02 		.1byte	0x2
 3522 005c 02          		.1byte	0x23
 3523 005c 23          		.1byte	0x2
 3524 005d 00          		.1byte	0x7
 3525 005d 07          		.4byte	.LASF17
 3526 005e 00 00 00 00 		.1byte	0x3
 3527 0060 03          		.1byte	0x5b
 3528 0060 49          		.4byte	0x3b
 3529 0061 00 00 00 3B 		.1byte	0x2
 3530 0063 02          		.1byte	0x23
 3531 0063 23          		.1byte	0x3
 3532 0064 01          		.1byte	0x7
 3533 0064 07          		.4byte	.LASF18
 3534 0065 00 00 00 00 		.1byte	0x3
 3535 0067 03          		.1byte	0x61
 3536 0067 52          		.4byte	0x69
 3537 0068 00 00 00 3B 		.1byte	0x2
 3538 006a 02          		.1byte	0x23
 3539 006a 23          		.1byte	0x4
 3540 006b 02          		.1byte	0x7
 3541 006b 07          		.4byte	.LASF19
 3542 006c 00 00 00 00 		.1byte	0x3
 3543 006e 03          		.1byte	0x73
 3544 006e 5B          		.4byte	0x96
 3545 006f 00 00 00 3B 		.1byte	0x2
 3546 0071 02          		.1byte	0x23
 3547 0071 23          		.1byte	0x5
 3548 0072 03          		.1byte	0x0
 3549 0072 07          		.1byte	0x8
 3550 0073 00 00 00 00 		.1byte	0x2
 3551 0075 03          		.1byte	0x2
 3552 0075 61          		.4byte	.LASF20
 3553 0076 00 00 00 69 		.1byte	0x3
 3554 0078 02          		.1byte	0x74
 3555 0078 23          		.4byte	0xa1
 3556 0079 04          		.1byte	0x2
 3557 0079 07          		.4byte	.LASF21
 3558 007a 00 00 00 00 		.1byte	0x3
 3559 007c 03          		.1byte	0x77
 3560 007c 73          		.4byte	0x11a
 3561 007d 00 00 00 96 		.1byte	0x9
 3562 007f 02          		.1byte	0x2
 3563 007f 23          		.4byte	0x104
 3564 0080 05          		.1byte	0xa
 3565 0080 00          		.1byte	0x1
 3566 0081 08          		.4byte	.LASF25
 3567 0081 02          		.1byte	0x1
 3568 0082 02          		.2byte	0x277
 3569 0082 00 00 00 00 		.1byte	0x1
 3570 0084 03          		.4byte	0x69
 3571 0085 74          		.4byte	.LFB4
 3572 0085 00 00 00 A1 		.4byte	.LFE4
 3573 0087 02          		.4byte	.LLST0
 3574 0088 00 00 00 00 		.4byte	0x189
 3575 008a 03          		.1byte	0xb
 3576 008a 77          		.4byte	.LASF14
 3577 008b 00 00 01 1A 		.1byte	0x1
 3578 008d 09          		.2byte	0x273
 3579 008d 02          		.4byte	0x102
 3580 008e 00 00 01 04 		.4byte	.LLST1
 3581 0090 0A          		.1byte	0xc
 3582 0090 01          		.4byte	.LASF22
 3583 0091 00 00 00 00 		.1byte	0x1
 3584 0093 01          		.2byte	0x274
 3585 0093 02 77       		.4byte	0x3b
 3586 0094 01          		.1byte	0x1
 3587 0095 00 00 00 69 		.1byte	0x50
 3588 0097 00 00 00 00 		.1byte	0xb
 3589 0099 00 00 00 00 		.4byte	.LASF23
 3590 009b 00 00 00 00 		.1byte	0x1
 3591 009d 00 00 01 89 		.2byte	0x275
 3592 009f 0B          		.4byte	0x96
 3593 009f 00 00 00 00 		.4byte	.LLST2
 3594 00a1 01          		.1byte	0xb
 3595 00a2 02 73       		.4byte	.LASF24
 3596 00a3 00 00 01 02 		.1byte	0x1
 3597 00a5 00 00 00 00 		.2byte	0x276
 3598 00a7 0C          		.4byte	0x10f
 3599 00a7 00 00 00 00 		.4byte	.LLST3
 3600 00a9 01          		.1byte	0xd
 3601 00aa 02 74       		.4byte	.LASF48
 3602 00ab 00 00 00 3B 		.1byte	0x1
 3603 00ad 01          		.2byte	0x279
 3604 00ad 50          		.4byte	0x189
 3605 00ae 0B          		.1byte	0x0
 3606 00ae 00 00 00 00 		.1byte	0xe
 3607 00b0 01          		.4byte	0x69
 3608 00b1 02 75       		.1byte	0xf
 3609 00b2 00 00 00 96 		.1byte	0x1
 3610 00b4 00 00 00 00 		.4byte	.LASF34
 3611 00b6 0B          		.1byte	0x1
 3612 00b6 00 00 00 00 		.2byte	0x2a2
 3613 00b8 01          		.1byte	0x1
 3614 00b9 02 76       		.4byte	.LFB5
 3615 00ba 00 00 01 0F 		.4byte	.LFE5
 3616 00bc 00 00 00 00 		.4byte	.LLST4
 3617 00be 0D          		.4byte	0x1b9
 3618 00be 00 00 00 00 		.1byte	0xb
 3619 00c0 01          		.4byte	.LASF24
 3620 00c1 02 79       		.1byte	0x1
 3621 00c2 00 00 01 89 		.2byte	0x2a1
 3622 00c4 00          		.4byte	0x10f
 3623 00c4 0E          		.4byte	.LLST5
 3624 00c5 00 00 00 69 		.1byte	0x0
 3625 00c7 0F          		.1byte	0xa
 3626 00c7 01          		.1byte	0x1
 3627 00c8 00 00 00 00 		.4byte	.LASF26
 3628 00ca 01          		.1byte	0x1
 3629 00ca 02 A2       		.2byte	0x2b9
 3630 00cb 01          		.1byte	0x1
 3631 00cc 00 00 00 00 		.4byte	0x69
 3632 00ce 00 00 00 00 		.4byte	.LFB6
 3633 00d0 00 00 00 00 		.4byte	.LFE6
 3634 00d2 00 00 01 B9 		.4byte	.LLST6
 3635 00d4 0B          		.4byte	0x1e8
 3636 00d4 00 00 00 00 		.1byte	0xb
 3637 00d6 01          		.4byte	.LASF24
 3638 00d7 02 A1       		.1byte	0x1
 3639 00d8 00 00 01 0F 		.2byte	0x2b8
 3640 00da 00 00 00 00 		.4byte	0x1e8
 3641 00dc 00          		.4byte	.LLST7
 3642 00dc 0A          		.1byte	0x0
 3643 00dd 01          		.1byte	0xe
 3644 00dd 00 00 00 00 		.4byte	0x10f
 3645 00df 01          		.1byte	0xa
 3646 00e0 02 B9       		.1byte	0x1
 3647 00e1 01          		.4byte	.LASF27
 3648 00e1 00 00 00 69 		.1byte	0x1
 3649 00e3 00 00 00 00 		.2byte	0x384
 3650 00e5 00 00 00 00 		.1byte	0x1
 3651 00e7 00 00 00 00 		.4byte	0x69
 3652 00e9 00 00 01 E8 		.4byte	.LFB11
 3653 00eb 0B          		.4byte	.LFE11
 3654 00ec 00 00 00 00 		.4byte	.LLST8
 3655 00ee 01          		.4byte	0x21c
 3656 00ee 02 B8       		.1byte	0xb
 3657 00ef 00 00 01 E8 		.4byte	.LASF24
 3658 00f1 00 00 00 00 		.1byte	0x1
 3659 00f3 00          		.2byte	0x383
 3660 00f4 0E          		.4byte	0x1e8
 3661 00f4 00 00 01 0F 		.4byte	.LLST9
 3662 00f6 0A          		.1byte	0x0
 3663 00f7 01          		.1byte	0xa
 3664 00f7 00 00 00 00 		.1byte	0x1
 3665 00f9 01          		.4byte	.LASF28
 3666 00fa 03 84       		.1byte	0x1
 3667 00fb 01          		.2byte	0x396
 3668 00fb 00 00 00 69 		.1byte	0x1
 3669 00fd 00 00 00 00 		.4byte	0x69
 3670 00ff 00 00 00 00 		.4byte	.LFB12
 3671 0101 00 00 00 00 		.4byte	.LFE12
 3672 0103 00 00 02 1C 		.4byte	.LLST10
 3673 0105 0B          		.4byte	0x24b
 3674 0106 00 00 00 00 		.1byte	0xb
 3675 0108 01          		.4byte	.LASF24
 3676 0108 03 83       		.1byte	0x1
 3677 0109 00 00 01 E8 		.2byte	0x395
 3678 010b 00 00 00 00 		.4byte	0x1e8
 3679 010d 00          		.4byte	.LLST11
 3680 010e 0A          		.1byte	0x0
 3681 010e 01          		.1byte	0xa
 3682 010f 00 00 00 00 		.1byte	0x1
 3683 0111 01          		.4byte	.LASF29
 3684 0111 03 96       		.1byte	0x1
 3685 0112 01          		.2byte	0x3ab
 3686 0113 00 00 00 69 		.1byte	0x1
 3687 0115 00 00 00 00 		.4byte	0x3b
 3688 0117 00 00 00 00 		.4byte	.LFB13
 3689 0119 00 00 00 00 		.4byte	.LFE13
 3690 011b 00 00 02 4B 		.4byte	.LLST12
 3691 011d 0B          		.4byte	0x28a
 3692 011d 00 00 00 00 		.1byte	0xb
 3693 011f 01          		.4byte	.LASF24
 3694 0120 03 95       		.1byte	0x1
 3695 0121 00 00 01 E8 		.2byte	0x3aa
 3696 0123 00 00 00 00 		.4byte	0x1e8
 3697 0125 00          		.4byte	.LLST13
 3698 0125 0A          		.1byte	0x10
 3699 0126 01          		.4byte	.LASF31
 3700 0126 00 00 00 00 		.1byte	0x1
 3701 0128 01          		.2byte	0x3ac
 3702 0129 03 AB       		.4byte	0x3b
 3703 012a 01          		.4byte	.LLST14
 3704 012a 00 00 00 3B 		.1byte	0x0
 3705 012c 00 00 00 00 		.1byte	0xa
 3706 012e 00 00 00 00 		.1byte	0x1
 3707 0130 00 00 00 00 		.4byte	.LASF30
 3708 0132 00 00 02 8A 		.1byte	0x1
 3709 0134 0B          		.2byte	0x362
 3710 0135 00 00 00 00 		.1byte	0x1
 3711 0137 01          		.4byte	0x3b
 3712 0137 03 AA       		.4byte	.LFB10
 3713 0138 00 00 01 E8 		.4byte	.LFE10
 3714 013a 00 00 00 00 		.4byte	.LLST15
 3715 013c 10          		.4byte	0x2c9
 3716 013d 00 00 00 00 		.1byte	0xb
 3717 013f 01          		.4byte	.LASF24
 3718 013f 03 AC       		.1byte	0x1
 3719 0140 00 00 00 3B 		.2byte	0x361
 3720 0142 00 00 00 00 		.4byte	0x1e8
 3721 0144 00          		.4byte	.LLST16
 3722 0145 0A          		.1byte	0x10
 3723 0145 01          		.4byte	.LASF32
 3724 0146 00 00 00 00 		.1byte	0x1
 3725 0148 01          		.2byte	0x363
 3726 0148 03 62       		.4byte	0x3b
 3727 0149 01          		.4byte	.LLST17
 3728 014a 00 00 00 3B 		.1byte	0x0
 3729 014c 00 00 00 00 		.1byte	0xa
 3730 014e 00 00 00 00 		.1byte	0x1
 3731 0150 00 00 00 00 		.4byte	.LASF33
 3732 0152 00 00 02 C9 		.1byte	0x1
 3733 0154 0B          		.2byte	0x3cb
 3734 0154 00 00 00 00 		.1byte	0x1
 3735 0156 01          		.4byte	0x3b
 3736 0157 03 61       		.4byte	.LFB14
 3737 0158 00 00 01 E8 		.4byte	.LFE14
 3738 015a 00 00 00 00 		.4byte	.LLST18
 3739 015c 10          		.4byte	0x2f8
 3740 015c 00 00 00 00 		.1byte	0xb
 3741 015e 01          		.4byte	.LASF24
 3742 015f 03 63       		.1byte	0x1
 3743 0160 00 00 00 3B 		.2byte	0x3ca
 3744 0162 00 00 00 00 		.4byte	0x1e8
 3745 0164 00          		.4byte	.LLST19
 3746 0164 0A          		.1byte	0x0
 3747 0165 01          		.1byte	0xf
 3748 0165 00 00 00 00 		.1byte	0x1
 3749 0167 01          		.4byte	.LASF35
 3750 0168 03 CB       		.1byte	0x1
 3751 0169 01          		.2byte	0x3e1
 3752 0169 00 00 00 3B 		.1byte	0x1
 3753 016b 00 00 00 00 		.4byte	.LFB15
 3754 016d 00 00 00 00 		.4byte	.LFE15
 3755 016f 00 00 00 00 		.4byte	.LLST20
 3756 0171 00 00 02 F8 		.4byte	0x323
 3757 0173 0B          		.1byte	0xb
 3758 0174 00 00 00 00 		.4byte	.LASF24
 3759 0176 01          		.1byte	0x1
 3760 0176 03 CA       		.2byte	0x3e0
 3761 0177 00 00 01 E8 		.4byte	0x10f
 3762 0179 00 00 00 00 		.4byte	.LLST21
 3763 017b 00          		.1byte	0x0
 3764 017c 0F          		.1byte	0x11
 3765 017c 01          		.1byte	0x1
 3766 017d 00 00 00 00 		.4byte	.LASF36
 3767 017f 01          		.1byte	0x1
 3768 017f 03 E1       		.2byte	0x410
 3769 0180 01          		.1byte	0x1
 3770 0181 00 00 00 00 		.4byte	.LFB16
 3771 0183 00 00 00 00 		.4byte	.LFE16
 3772 0185 00 00 00 00 		.1byte	0x1
 3773 0187 00 00 03 23 		.1byte	0x55
 3774 0189 0B          		.4byte	0x367
 3775 0189 00 00 00 00 		.1byte	0xc
 3776 018b 01          		.4byte	.LASF24
 3777 018c 03 E0       		.1byte	0x1
 3778 018d 00 00 01 0F 		.2byte	0x40f
 3779 018f 00 00 00 00 		.4byte	0x10f
 3780 0191 00          		.1byte	0x1
 3781 0191 11          		.1byte	0x51
 3782 0192 01          		.1byte	0xc
 3783 0192 00 00 00 00 		.4byte	.LASF37
 3784 0194 01          		.1byte	0x1
 3785 0195 04 10       		.2byte	0x40f
 3786 0196 01          		.4byte	0x69
 3787 0196 00 00 00 00 		.1byte	0x1
 3788 0198 00 00 00 00 		.1byte	0x50
 3789 019a 01          		.1byte	0xc
 3790 019b 55          		.4byte	.LASF38
 3791 019b 00 00 03 67 		.1byte	0x1
 3792 019d 0C          		.2byte	0x40f
 3793 019e 00 00 00 00 		.4byte	0x29
 3794 01a0 01          		.1byte	0x2
 3795 01a0 04 0F       		.1byte	0x91
 3796 01a1 00 00 01 0F 		.1byte	0x0
 3797 01a3 01          		.1byte	0x0
 3798 01a4 51          		.1byte	0xf
 3799 01a4 0C          		.1byte	0x1
 3800 01a5 00 00 00 00 		.4byte	.LASF39
 3801 01a7 01          		.1byte	0x1
 3802 01a7 04 0F       		.2byte	0x42f
 3803 01a8 00 00 00 69 		.1byte	0x1
 3804 01aa 01          		.4byte	.LFB17
 3805 01ab 50          		.4byte	.LFE17
 3806 01ab 0C          		.4byte	.LLST23
 3807 01ac 00 00 00 00 		.4byte	0x392
 3808 01ae 01          		.1byte	0xb
 3809 01ae 04 0F       		.4byte	.LASF24
 3810 01af 00 00 00 29 		.1byte	0x1
 3811 01b1 02          		.2byte	0x42e
 3812 01b2 91          		.4byte	0x10f
 3813 01b2 00          		.4byte	.LLST24
 3814 01b3 00          		.1byte	0x0
 3815 01b3 0F          		.1byte	0xa
 3816 01b4 01          		.1byte	0x1
 3817 01b4 00 00 00 00 		.4byte	.LASF40
 3818 01b6 01          		.1byte	0x1
 3819 01b7 04 2F       		.2byte	0x485
 3820 01b8 01          		.1byte	0x1
 3821 01b8 00 00 00 00 		.4byte	0x3b
 3822 01ba 00 00 00 00 		.4byte	.LFB19
 3823 01bc 00 00 00 00 		.4byte	.LFE19
 3824 01be 00 00 03 92 		.4byte	.LLST25
 3825 01c0 0B          		.4byte	0x3fb
 3826 01c1 00 00 00 00 		.1byte	0xb
 3827 01c3 01          		.4byte	.LASF24
 3828 01c3 04 2E       		.1byte	0x1
 3829 01c4 00 00 01 0F 		.2byte	0x484
 3830 01c6 00 00 00 00 		.4byte	0x10f
 3831 01c8 00          		.4byte	.LLST26
 3832 01c9 0A          		.1byte	0xb
 3833 01c9 01          		.4byte	.LASF31
 3834 01ca 00 00 00 00 		.1byte	0x1
 3835 01cc 01          		.2byte	0x484
 3836 01cc 04 85       		.4byte	0x3b
 3837 01cd 01          		.4byte	.LLST27
 3838 01ce 00 00 00 3B 		.1byte	0x10
 3839 01d0 00 00 00 00 		.4byte	.LASF41
 3840 01d2 00 00 00 00 		.1byte	0x1
 3841 01d4 00 00 00 00 		.2byte	0x487
 3842 01d6 00 00 03 FB 		.4byte	0x3fb
 3843 01d8 0B          		.4byte	.LLST28
 3844 01d8 00 00 00 00 		.1byte	0x12
 3845 01da 01          		.4byte	.LBB2
 3846 01db 04 84       		.4byte	.LBE2
 3847 01dc 00 00 01 0F 		.1byte	0x10
 3848 01de 00 00 00 00 		.4byte	.LASF42
 3849 01e0 0B          		.1byte	0x1
 3850 01e0 00 00 00 00 		.2byte	0x490
 3851 01e2 01          		.4byte	0x3fb
 3852 01e3 04 84       		.4byte	.LLST29
 3853 01e4 00 00 00 3B 		.1byte	0x0
 3854 01e6 00 00 00 00 		.1byte	0x0
 3855 01e8 10          		.1byte	0xe
 3856 01e8 00 00 00 00 		.4byte	0x3b
 3857 01ea 01          		.1byte	0xa
 3858 01eb 04 87       		.1byte	0x1
 3859 01ec 00 00 03 FB 		.4byte	.LASF43
 3860 01ee 00 00 00 00 		.1byte	0x1
 3861 01f0 12          		.2byte	0x4b2
 3862 01f0 00 00 00 00 		.1byte	0x1
 3863 01f2 00 00 00 00 		.4byte	0x3b
 3864 01f4 10          		.4byte	.LFB20
 3865 01f5 00 00 00 00 		.4byte	.LFE20
 3866 01f7 01          		.4byte	.LLST30
 3867 01f7 04 90       		.4byte	0x46e
 3868 01f8 00 00 03 FB 		.1byte	0xb
 3869 01fa 00 00 00 00 		.4byte	.LASF24
 3870 01fc 00          		.1byte	0x1
 3871 01fd 00          		.2byte	0x4b1
 3872 01fd 0E          		.4byte	0x10f
 3873 01fe 00 00 00 3B 		.4byte	.LLST31
 3874 0200 0A          		.1byte	0xb
 3875 0200 01          		.4byte	.LASF31
 3876 0201 00 00 00 00 		.1byte	0x1
 3877 0203 01          		.2byte	0x4b1
 3878 0203 04 B2       		.4byte	0x3b
 3879 0204 01          		.4byte	.LLST32
 3880 0205 00 00 00 3B 		.1byte	0x10
 3881 0207 00 00 00 00 		.4byte	.LASF44
 3882 0209 00 00 00 00 		.1byte	0x1
 3883 020b 00 00 00 00 		.2byte	0x4b5
 3884 020d 00 00 04 6E 		.4byte	0x3fb
 3885 020f 0B          		.4byte	.LLST33
 3886 020f 00 00 00 00 		.1byte	0x13
 3887 0211 01          		.4byte	.LASF45
 3888 0212 04 B1       		.1byte	0x1
 3889 0213 00 00 01 0F 		.2byte	0x4b8
 3890 0215 00 00 00 00 		.4byte	0x3fb
 3891 0217 0B          		.1byte	0x2
 3892 0217 00 00 00 00 		.1byte	0x76
 3893 0219 01          		.1byte	0x0
 3894 021a 04 B1       		.1byte	0x10
 3895 021b 00 00 00 3B 		.4byte	.LASF46
 3896 021d 00 00 00 00 		.1byte	0x1
 3897 021f 10          		.2byte	0x4bb
 3898 021f 00 00 00 00 		.4byte	0x3b
 3899 0221 01          		.4byte	.LLST34
 3900 0222 04 B5       		.1byte	0x0
 3901 0223 00 00 03 FB 		.1byte	0xa
 3902 0225 00 00 00 00 		.1byte	0x1
 3903 0227 13          		.4byte	.LASF47
 3904 0227 00 00 00 00 		.1byte	0x1
 3905 0229 01          		.2byte	0x45b
 3906 022a 04 B8       		.1byte	0x1
 3907 022b 00 00 03 FB 		.4byte	0x69
 3908 022d 02          		.4byte	.LFB18
 3909 022d 76          		.4byte	.LFE18
 3910 022e 00          		.4byte	.LLST35
 3911 022e 10          		.4byte	0x4d7
 3912 022f 00 00 00 00 		.1byte	0xb
 3913 0231 01          		.4byte	.LASF24
 3914 0231 04 BB       		.1byte	0x1
 3915 0232 00 00 00 3B 		.2byte	0x45a
 3916 0234 00 00 00 00 		.4byte	0x10f
 3917 0236 00          		.4byte	.LLST36
 3918 0237 0A          		.1byte	0xb
 3919 0237 01          		.4byte	.LASF31
 3920 0238 00 00 00 00 		.1byte	0x1
 3921 023a 01          		.2byte	0x45a
 3922 023a 04 5B       		.4byte	0x3b
 3923 023b 01          		.4byte	.LLST37
 3924 023c 00 00 00 69 		.1byte	0x10
 3925 023e 00 00 00 00 		.4byte	.LASF48
 3926 0240 00 00 00 00 		.1byte	0x1
 3927 0242 00 00 00 00 		.2byte	0x45d
 3928 0244 00 00 04 D7 		.4byte	0x69
 3929 0246 0B          		.4byte	.LLST38
 3930 0246 00 00 00 00 		.1byte	0x12
 3931 0248 01          		.4byte	.LBB3
 3932 0249 04 5A       		.4byte	.LBE3
 3933 024a 00 00 01 0F 		.1byte	0x10
 3934 024c 00 00 00 00 		.4byte	.LASF49
 3935 024e 0B          		.1byte	0x1
 3936 024e 00 00 00 00 		.2byte	0x463
 3937 0250 01          		.4byte	0x3fb
 3938 0251 04 5A       		.4byte	.LLST39
 3939 0252 00 00 00 3B 		.1byte	0x0
 3940 0254 00 00 00 00 		.1byte	0x0
 3941 0256 10          		.1byte	0xa
 3942 0256 00 00 00 00 		.1byte	0x1
 3943 0258 01          		.4byte	.LASF50
 3944 0259 04 5D       		.1byte	0x1
 3945 025a 00 00 00 69 		.2byte	0x53a
 3946 025c 00 00 00 00 		.1byte	0x1
 3947 025e 12          		.4byte	0x3b
 3948 025e 00 00 00 00 		.4byte	.LFB21
 3949 0260 00 00 00 00 		.4byte	.LFE21
 3950 0262 10          		.4byte	.LLST40
 3951 0263 00 00 00 00 		.4byte	0x506
 3952 0265 01          		.1byte	0xb
 3953 0265 04 63       		.4byte	.LASF24
 3954 0266 00 00 03 FB 		.1byte	0x1
 3955 0268 00 00 00 00 		.2byte	0x539
 3956 026a 00          		.4byte	0x1e8
 3957 026b 00          		.4byte	.LLST41
 3958 026b 0A          		.1byte	0x0
 3959 026c 01          		.1byte	0xa
 3960 026c 00 00 00 00 		.1byte	0x1
 3961 026e 01          		.4byte	.LASF51
 3962 026f 05 3A       		.1byte	0x1
 3963 0270 01          		.2byte	0x54d
 3964 0270 00 00 00 3B 		.1byte	0x1
 3965 0272 00 00 00 00 		.4byte	0x3b
 3966 0274 00 00 00 00 		.4byte	.LFB22
 3967 0276 00 00 00 00 		.4byte	.LFE22
 3968 0278 00 00 05 06 		.4byte	.LLST42
 3969 027a 0B          		.4byte	0x545
 3970 027b 00 00 00 00 		.1byte	0xb
 3971 027d 01          		.4byte	.LASF24
 3972 027d 05 39       		.1byte	0x1
 3973 027e 00 00 01 E8 		.2byte	0x54c
 3974 0280 00 00 00 00 		.4byte	0x1e8
 3975 0282 00          		.4byte	.LLST43
 3976 0283 0A          		.1byte	0x10
 3977 0283 01          		.4byte	.LASF52
 3978 0284 00 00 00 00 		.1byte	0x1
 3979 0286 01          		.2byte	0x54f
 3980 0286 05 4D       		.4byte	0x3b
 3981 0287 01          		.4byte	.LLST44
 3982 0288 00 00 00 3B 		.1byte	0x0
 3983 028a 00 00 00 00 		.1byte	0x14
 3984 028c 00 00 00 00 		.4byte	.LASF77
 3985 028e 00 00 00 00 		.1byte	0x1
 3986 0290 00 00 05 45 		.2byte	0x1b6
 3987 0292 0B          		.1byte	0x1
 3988 0292 00 00 00 00 		.4byte	0x3b
 3989 0294 01          		.1byte	0x1
 3990 0295 05 4C       		.4byte	0x628
 3991 0296 00 00 01 E8 		.1byte	0x15
 3992 0298 00 00 00 00 		.4byte	.LASF24
 3993 029a 10          		.1byte	0x1
 3994 029a 00 00 00 00 		.2byte	0x1b3
 3995 029c 01          		.4byte	0x10f
 3996 029d 05 4F       		.1byte	0x15
 3997 029e 00 00 00 3B 		.4byte	.LASF53
 3998 02a0 00 00 00 00 		.1byte	0x1
 3999 02a2 00          		.2byte	0x1b4
 4000 02a2 14          		.4byte	0x102
 4001 02a3 00 00 00 00 		.1byte	0x15
 4002 02a5 01          		.4byte	.LASF54
 4003 02a5 01 B6       		.1byte	0x1
 4004 02a6 01          		.2byte	0x1b5
 4005 02a7 00 00 00 3B 		.4byte	0x3b
 4006 02a9 01          		.1byte	0xd
 4007 02a9 00 00 06 28 		.4byte	.LASF44
 4008 02ab 15          		.1byte	0x1
 4009 02ac 00 00 00 00 		.2byte	0x1b9
 4010 02ae 01          		.4byte	0x3fb
 4011 02ae 01 B3       		.1byte	0xd
 4012 02af 00 00 01 0F 		.4byte	.LASF55
 4013 02b1 15          		.1byte	0x1
 4014 02b2 00 00 00 00 		.2byte	0x1bc
 4015 02b4 01          		.4byte	0x3fb
 4016 02b4 01 B4       		.1byte	0xd
 4017 02b5 00 00 01 02 		.4byte	.LASF56
 4018 02b7 15          		.1byte	0x1
 4019 02b8 00 00 00 00 		.2byte	0x1bf
 4020 02ba 01          		.4byte	0x3b
 4021 02ba 01 B5       		.1byte	0x16
 4022 02bb 00 00 00 3B 		.4byte	0x602
 4023 02bd 0D          		.1byte	0x17
 4024 02be 00 00 00 00 		.ascii "in\000"
 4025 02c0 01          		.1byte	0x1
 4026 02c0 01 B9       		.2byte	0x1ca
 4027 02c1 00 00 03 FB 		.4byte	0x628
 4028 02c3 0D          		.1byte	0x17
 4029 02c4 00 00 00 00 		.ascii "out\000"
 4030 02c6 01          		.1byte	0x1
 4031 02c6 01 BC       		.2byte	0x1cc
 4032 02c7 00 00 03 FB 		.4byte	0x62e
 4033 02c9 0D          		.1byte	0xd
 4034 02ca 00 00 00 00 		.4byte	.LASF57
 4035 02cc 01          		.1byte	0x1
 4036 02cc 01 BF       		.2byte	0x1ce
 4037 02cd 00 00 00 3B 		.4byte	0x69
 4038 02cf 16          		.1byte	0x16
 4039 02d0 00 00 06 02 		.4byte	0x5f3
 4040 02d2 17          		.1byte	0xd
 4041 02d2 69 6E 00    		.4byte	.LASF58
 4042 02d4 01          		.1byte	0x1
 4043 02d4 01 CA       		.2byte	0x1d6
 4044 02d5 00 00 06 28 		.4byte	0x634
 4045 02d7 17          		.1byte	0xd
 4046 02d8 6F 75 74 00 		.4byte	.LASF59
 4047 02da 01          		.1byte	0x1
 4048 02da 01 CC       		.2byte	0x1d9
 4049 02db 00 00 06 2E 		.4byte	0x69
 4050 02dd 0D          		.1byte	0x18
 4051 02de 00 00 00 00 		.1byte	0xd
 4052 02e0 01          		.4byte	.LASF60
 4053 02e0 01 CE       		.1byte	0x1
 4054 02e1 00 00 00 69 		.2byte	0x1de
 4055 02e3 16          		.4byte	0x3b
 4056 02e4 00 00 05 F3 		.1byte	0x0
 4057 02e6 0D          		.1byte	0x0
 4058 02e6 00 00 00 00 		.1byte	0x18
 4059 02e8 01          		.1byte	0xd
 4060 02e9 01 D6       		.4byte	.LASF42
 4061 02ea 00 00 06 34 		.1byte	0x1
 4062 02ec 0D          		.2byte	0x20d
 4063 02ec 00 00 00 00 		.4byte	0x3fb
 4064 02ee 01          		.1byte	0x0
 4065 02ef 01 D9       		.1byte	0x0
 4066 02f0 00 00 00 69 		.1byte	0x18
 4067 02f2 18          		.1byte	0x17
 4068 02f2 0D          		.ascii "in\000"
 4069 02f3 00 00 00 00 		.1byte	0x1
 4070 02f5 01          		.2byte	0x233
 4071 02f5 01 DE       		.4byte	0x639
 4072 02f6 00 00 00 3B 		.1byte	0x17
 4073 02f8 00          		.ascii "out\000"
 4074 02f9 00          		.1byte	0x1
 4075 02f9 18          		.2byte	0x235
 4076 02fa 0D          		.4byte	0x644
 4077 02fa 00 00 00 00 		.1byte	0xd
 4078 02fc 01          		.4byte	.LASF42
 4079 02fd 02 0D       		.1byte	0x1
 4080 02fe 00 00 03 FB 		.2byte	0x237
 4081 0300 00          		.4byte	0x3fb
 4082 0300 00          		.1byte	0x0
 4083 0301 18          		.1byte	0x0
 4084 0301 17          		.1byte	0x9
 4085 0302 69 6E 00    		.1byte	0x2
 4086 0303 01          		.4byte	0x3fb
 4087 0304 02 33       		.1byte	0x9
 4088 0305 00 00 06 39 		.1byte	0x2
 4089 0307 17          		.4byte	0x3b
 4090 0307 6F 75 74 00 		.1byte	0xe
 4091 0309 01          		.4byte	0x628
 4092 030a 02 35       		.1byte	0x9
 4093 030b 00 00 06 44 		.1byte	0x2
 4094 030d 0D          		.4byte	0x63f
 4095 030d 00 00 00 00 		.1byte	0xe
 4096 030f 01          		.4byte	0x29
 4097 0310 02 37       		.1byte	0x9
 4098 0311 00 00 03 FB 		.1byte	0x2
 4099 0313 00          		.4byte	0x29
 4100 0313 00          		.1byte	0xa
 4101 0314 09          		.1byte	0x1
 4102 0314 02          		.4byte	.LASF61
 4103 0315 00 00 03 FB 		.1byte	0x1
 4104 0317 09          		.2byte	0x2f3
 4105 0317 02          		.1byte	0x1
 4106 0318 00 00 00 3B 		.4byte	0x3b
 4107 031a 0E          		.4byte	.LFB8
 4108 031a 00 00 06 28 		.4byte	.LFE8
 4109 031c 09          		.4byte	.LLST45
 4110 031d 02          		.4byte	0x758
 4111 031d 00 00 06 3F 		.1byte	0xb
 4112 031f 0E          		.4byte	.LASF24
 4113 0320 00 00 00 29 		.1byte	0x1
 4114 0322 09          		.2byte	0x2f2
 4115 0322 02          		.4byte	0x10f
 4116 0323 00 00 00 29 		.4byte	.LLST46
 4117 0325 0A          		.1byte	0xb
 4118 0325 01          		.4byte	.LASF53
 4119 0326 00 00 00 00 		.1byte	0x1
 4120 0328 01          		.2byte	0x2f2
 4121 0328 02 F3       		.4byte	0x102
 4122 0329 01          		.4byte	.LLST47
 4123 032a 00 00 00 3B 		.1byte	0xb
 4124 032c 00 00 00 00 		.4byte	.LASF31
 4125 032e 00 00 00 00 		.1byte	0x1
 4126 0330 00 00 00 00 		.2byte	0x2f2
 4127 0332 00 00 07 58 		.4byte	0x3b
 4128 0334 0B          		.4byte	.LLST48
 4129 0334 00 00 00 00 		.1byte	0x19
 4130 0336 01          		.4byte	0x545
 4131 0337 02 F2       		.4byte	.LBB11
 4132 0338 00 00 01 0F 		.4byte	.LBE11
 4133 033a 00 00 00 00 		.1byte	0x1
 4134 033c 0B          		.2byte	0x2f4
 4135 033c 00 00 00 00 		.1byte	0x1a
 4136 033e 01          		.4byte	0x56f
 4137 033f 02 F2       		.1byte	0x1a
 4138 0340 00 00 01 02 		.4byte	0x563
 4139 0342 00 00 00 00 		.1byte	0x1a
 4140 0344 0B          		.4byte	0x557
 4141 0344 00 00 00 00 		.1byte	0x1b
 4142 0346 01          		.4byte	.Ldebug_ranges0+0x0
 4143 0347 02 F2       		.1byte	0x1c
 4144 0348 00 00 00 3B 		.4byte	0x57b
 4145 034a 00 00 00 00 		.4byte	.LLST49
 4146 034c 19          		.1byte	0x1c
 4147 034c 00 00 05 45 		.4byte	0x587
 4148 034e 00 00 00 00 		.4byte	.LLST50
 4149 0350 00 00 00 00 		.1byte	0x1d
 4150 0352 01          		.4byte	0x593
 4151 0353 02 F4       		.1byte	0x1e
 4152 0354 1A          		.4byte	.Ldebug_ranges0+0x28
 4153 0354 00 00 05 6F 		.4byte	0x6f6
 4154 0356 1A          		.1byte	0x1f
 4155 0357 00 00 05 63 		.4byte	0x603
 4156 0359 1A          		.1byte	0x2
 4157 0359 00 00 05 57 		.1byte	0x76
 4158 035b 1B          		.1byte	0x3
 4159 035c 00 00 00 00 		.1byte	0x1f
 4160 035e 1C          		.4byte	0x60e
 4161 035e 00 00 05 7B 		.1byte	0x2
 4162 0360 00 00 00 00 		.1byte	0x76
 4163 0362 1C          		.1byte	0x4
 4164 0363 00 00 05 87 		.1byte	0x1c
 4165 0365 00 00 00 00 		.4byte	0x61a
 4166 0367 1D          		.4byte	.LLST51
 4167 0367 00 00 05 93 		.1byte	0x0
 4168 0369 1E          		.1byte	0x1b
 4169 036a 00 00 00 00 		.4byte	.Ldebug_ranges0+0x40
 4170 036c 00 00 06 F6 		.1byte	0x1c
 4171 036e 1F          		.4byte	0x5a4
 4172 036e 00 00 06 03 		.4byte	.LLST52
 4173 0370 02          		.1byte	0x1c
 4174 0371 76          		.4byte	0x5af
 4175 0371 03          		.4byte	.LLST53
 4176 0372 1F          		.1byte	0x1c
 4177 0372 00 00 06 0E 		.4byte	0x5bb
 4178 0374 02          		.4byte	.LLST54
 4179 0375 76          		.1byte	0x1e
 4180 0375 04          		.4byte	.Ldebug_ranges0+0x60
 4181 0376 1C          		.4byte	0x729
 4182 0376 00 00 06 1A 		.1byte	0x1c
 4183 0378 00 00 00 00 		.4byte	0x5f4
 4184 037a 00          		.4byte	.LLST55
 4185 037b 1B          		.1byte	0x0
 4186 037b 00 00 00 00 		.1byte	0x12
 4187 037d 1C          		.4byte	.LBB17
 4188 037e 00 00 05 A4 		.4byte	.LBE17
 4189 0380 00 00 00 00 		.1byte	0x1c
 4190 0382 1C          		.4byte	0x5cc
 4191 0382 00 00 05 AF 		.4byte	.LLST56
 4192 0384 00 00 00 00 		.1byte	0x1c
 4193 0386 1C          		.4byte	0x5d8
 4194 0387 00 00 05 BB 		.4byte	.LLST57
 4195 0389 00 00 00 00 		.1byte	0x1b
 4196 038b 1E          		.4byte	.Ldebug_ranges0+0x78
 4197 038b 00 00 00 00 		.1byte	0x1c
 4198 038d 00 00 07 29 		.4byte	0x5e5
 4199 038f 1C          		.4byte	.LLST58
 4200 0390 00 00 05 F4 		.1byte	0x0
 4201 0392 00 00 00 00 		.1byte	0x0
 4202 0394 00          		.1byte	0x0
 4203 0394 12          		.1byte	0x0
 4204 0395 00 00 00 00 		.1byte	0x0
 4205 0397 00 00 00 00 		.1byte	0x0
 4206 0399 1C          		.1byte	0x20
 4207 0399 00 00 05 CC 		.4byte	.LASF78
 4208 039b 00 00 00 00 		.1byte	0x1
 4209 039d 1C          		.1byte	0x64
 4210 039e 00 00 05 D8 		.1byte	0x1
 4211 03a0 00 00 00 00 		.4byte	0x3b
 4212 03a2 1B          		.4byte	.LFB2
 4213 03a2 00 00 00 00 		.4byte	.LFE2
 4214 03a4 1C          		.4byte	.LLST59
 4215 03a5 00 00 05 E5 		.4byte	0x914
 4216 03a7 00 00 00 00 		.1byte	0x21
 4217 03a9 00          		.4byte	.LASF24
 4218 03a9 00          		.1byte	0x1
 4219 03aa 00          		.1byte	0x5f
 4220 03aa 00          		.4byte	0x10f
 4221 03ab 00          		.4byte	.LLST60
 4222 03ab 00          		.1byte	0x21
 4223 03ac 20          		.4byte	.LASF53
 4224 03ac 00 00 00 00 		.1byte	0x1
 4225 03ae 01          		.1byte	0x60
 4226 03af 64          		.4byte	0x914
 4227 03af 01          		.4byte	.LLST61
 4228 03b0 00 00 00 3B 		.1byte	0x21
 4229 03b2 00 00 00 00 		.4byte	.LASF54
 4230 03b4 00 00 00 00 		.1byte	0x1
 4231 03b6 00 00 00 00 		.1byte	0x61
 4232 03b8 00 00 09 14 		.4byte	0x3b
 4233 03ba 21          		.4byte	.LLST62
 4234 03ba 00 00 00 00 		.1byte	0x21
 4235 03bc 01          		.4byte	.LASF62
 4236 03bd 5F          		.1byte	0x1
 4237 03bd 00 00 01 0F 		.1byte	0x62
 4238 03bf 00 00 00 00 		.4byte	0x69
 4239 03c1 21          		.4byte	.LLST63
 4240 03c2 00 00 00 00 		.1byte	0x21
 4241 03c4 01          		.4byte	.LASF63
 4242 03c4 60          		.1byte	0x1
 4243 03c5 00 00 09 14 		.1byte	0x63
 4244 03c7 00 00 00 00 		.4byte	0x96
 4245 03c9 21          		.4byte	.LLST64
 4246 03c9 00 00 00 00 		.1byte	0x22
 4247 03cb 01          		.4byte	.LASF41
 4248 03cc 61          		.1byte	0x1
 4249 03cc 00 00 00 3B 		.1byte	0x67
 4250 03ce 00 00 00 00 		.4byte	0x3fb
 4251 03d0 21          		.4byte	.LLST65
 4252 03d1 00 00 00 00 		.1byte	0x23
 4253 03d3 01          		.4byte	.LASF64
 4254 03d3 62          		.1byte	0x1
 4255 03d4 00 00 00 69 		.1byte	0x6a
 4256 03d6 00 00 00 00 		.4byte	0x3fb
 4257 03d8 21          		.1byte	0x2
 4258 03d8 00 00 00 00 		.1byte	0x76
 4259 03da 01          		.1byte	0x11
 4260 03db 63          		.1byte	0x22
 4261 03db 00 00 00 96 		.4byte	.LASF65
 4262 03dd 00 00 00 00 		.1byte	0x1
 4263 03df 22          		.1byte	0x6d
 4264 03e0 00 00 00 00 		.4byte	0x3b
 4265 03e2 01          		.4byte	.LLST66
 4266 03e2 67          		.1byte	0x24
 4267 03e3 00 00 03 FB 		.4byte	.LBB26
 4268 03e5 00 00 00 00 		.4byte	.LBE26
 4269 03e7 23          		.4byte	0x866
 4270 03e7 00 00 00 00 		.1byte	0x25
 4271 03e9 01          		.ascii "in\000"
 4272 03ea 6A          		.1byte	0x1
 4273 03ea 00 00 03 FB 		.1byte	0x77
 4274 03ec 02          		.4byte	0x628
 4275 03ed 76          		.4byte	.LLST67
 4276 03ed 11          		.1byte	0x25
 4277 03ee 22          		.ascii "out\000"
 4278 03ee 00 00 00 00 		.1byte	0x1
 4279 03f0 01          		.1byte	0x79
 4280 03f1 6D          		.4byte	0x62e
 4281 03f1 00 00 00 3B 		.4byte	.LLST68
 4282 03f3 00 00 00 00 		.1byte	0x22
 4283 03f5 24          		.4byte	.LASF57
 4284 03f6 00 00 00 00 		.1byte	0x1
 4285 03f8 00 00 00 00 		.1byte	0x7b
 4286 03fa 00 00 08 66 		.4byte	0x69
 4287 03fc 25          		.4byte	.LLST69
 4288 03fc 69 6E 00    		.1byte	0x22
 4289 03fe 01          		.4byte	.LASF59
 4290 03fe 77          		.1byte	0x1
 4291 03ff 00 00 06 28 		.1byte	0x7d
 4292 0401 00 00 00 00 		.4byte	0x69
 4293 0403 25          		.4byte	.LLST70
 4294 0403 6F 75 74 00 		.1byte	0x1e
 4295 0405 01          		.4byte	.Ldebug_ranges0+0x90
 4296 0406 79          		.4byte	0x84c
 4297 0406 00 00 06 2E 		.1byte	0x22
 4298 0408 00 00 00 00 		.4byte	.LASF60
 4299 040a 22          		.1byte	0x1
 4300 040b 00 00 00 00 		.1byte	0x85
 4301 040d 01          		.4byte	0x3b
 4302 040d 7B          		.4byte	.LLST71
 4303 040e 00 00 00 69 		.1byte	0x0
 4304 0410 00 00 00 00 		.1byte	0x12
 4305 0412 22          		.4byte	.LBB29
 4306 0412 00 00 00 00 		.4byte	.LBE29
 4307 0414 01          		.1byte	0x22
 4308 0415 7D          		.4byte	.LASF42
 4309 0415 00 00 00 69 		.1byte	0x1
 4310 0417 00 00 00 00 		.1byte	0xb7
 4311 0419 1E          		.4byte	0x3b
 4312 041a 00 00 00 00 		.4byte	.LLST72
 4313 041c 00 00 08 4C 		.1byte	0x0
 4314 041e 22          		.1byte	0x0
 4315 041e 00 00 00 00 		.1byte	0x24
 4316 0420 01          		.4byte	.LBB30
 4317 0421 85          		.4byte	.LBE30
 4318 0421 00 00 00 3B 		.4byte	0x8a0
 4319 0423 00 00 00 00 		.1byte	0x25
 4320 0425 00          		.ascii "in\000"
 4321 0426 12          		.1byte	0x1
 4322 0426 00 00 00 00 		.1byte	0xf6
 4323 0428 00 00 00 00 		.4byte	0x639
 4324 042a 22          		.4byte	.LLST73
 4325 042b 00 00 00 00 		.1byte	0x25
 4326 042d 01          		.ascii "out\000"
 4327 042d B7          		.1byte	0x1
 4328 042e 00 00 00 3B 		.1byte	0xf8
 4329 0430 00 00 00 00 		.4byte	0x644
 4330 0432 00          		.4byte	.LLST74
 4331 0432 00          		.1byte	0x22
 4332 0433 24          		.4byte	.LASF42
 4333 0433 00 00 00 00 		.1byte	0x1
 4334 0435 00 00 00 00 		.1byte	0xfa
 4335 0437 00 00 08 A0 		.4byte	0x3fb
 4336 0439 25          		.4byte	.LLST75
 4337 043a 69 6E 00    		.1byte	0x0
 4338 043b 01          		.1byte	0x24
 4339 043c F6          		.4byte	.LBB31
 4340 043c 00 00 06 39 		.4byte	.LBE31
 4341 043e 00 00 00 00 		.4byte	0x8dd
 4342 0440 25          		.1byte	0x26
 4343 0441 6F 75 74 00 		.ascii "in\000"
 4344 0443 01          		.1byte	0x1
 4345 0443 F8          		.2byte	0x119
 4346 0444 00 00 06 44 		.4byte	0x639
 4347 0446 00 00 00 00 		.4byte	.LLST76
 4348 0448 22          		.1byte	0x26
 4349 0448 00 00 00 00 		.ascii "out\000"
 4350 044a 01          		.1byte	0x1
 4351 044b FA          		.2byte	0x11b
 4352 044b 00 00 03 FB 		.4byte	0x62e
 4353 044d 00 00 00 00 		.4byte	.LLST77
 4354 044f 00          		.1byte	0x10
 4355 0450 24          		.4byte	.LASF42
 4356 0450 00 00 00 00 		.1byte	0x1
 4357 0452 00 00 00 00 		.2byte	0x11d
 4358 0454 00 00 08 DD 		.4byte	0x3b
 4359 0456 26          		.4byte	.LLST78
 4360 0457 69 6E 00    		.1byte	0x0
 4361 0458 01          		.1byte	0x12
 4362 0459 01 19       		.4byte	.LBB32
 4363 045a 00 00 06 39 		.4byte	.LBE32
 4364 045c 00 00 00 00 		.1byte	0x27
 4365 045e 26          		.ascii "in\000"
 4366 045e 6F 75 74 00 		.1byte	0x1
 4367 0460 01          		.2byte	0x153
 4368 0461 01 1B       		.4byte	0x628
 4369 0462 00 00 06 2E 		.1byte	0x2
 4370 0464 00 00 00 00 		.1byte	0x76
 4371 0466 10          		.1byte	0x6
 4372 0466 00 00 00 00 		.1byte	0x27
 4373 0468 01          		.ascii "out\000"
 4374 0469 01 1D       		.1byte	0x1
 4375 046a 00 00 00 3B 		.2byte	0x155
 4376 046c 00 00 00 00 		.4byte	0x644
 4377 046e 00          		.1byte	0x2
 4378 046e 12          		.1byte	0x76
 4379 046f 00 00 00 00 		.1byte	0x5
 4380 0471 00 00 00 00 		.1byte	0x13
 4381 0473 27          		.4byte	.LASF42
 4382 0473 69 6E 00    		.1byte	0x1
 4383 0475 01          		.2byte	0x157
 4384 0475 01 53       		.4byte	0x3b
 4385 0476 00 00 06 28 		.1byte	0x2
 4386 0478 02          		.1byte	0x76
 4387 0479 76          		.1byte	0x4
 4388 0479 06          		.1byte	0x0
 4389 047a 27          		.1byte	0x0
 4390 047a 6F 75 74 00 		.1byte	0x9
 4391 047c 01          		.1byte	0x2
 4392 047d 01 55       		.4byte	0x91a
 4393 047e 00 00 06 44 		.1byte	0x28
 4394 0480 02          		.1byte	0xa
 4395 0480 76          		.1byte	0x1
 4396 0481 05          		.4byte	.LASF66
 4397 0481 13          		.1byte	0x1
 4398 0482 00 00 00 00 		.2byte	0x314
 4399 0484 01          		.1byte	0x1
 4400 0484 01 57       		.4byte	0x3b
 4401 0485 00 00 00 3B 		.4byte	.LFB9
 4402 0487 02          		.4byte	.LFE9
 4403 0488 76          		.4byte	.LLST79
 4404 0488 04          		.4byte	0x9d2
 4405 0489 00          		.1byte	0xb
 4406 0489 00          		.4byte	.LASF67
 4407 048a 09          		.1byte	0x1
 4408 048a 02          		.2byte	0x313
 4409 048b 00 00 09 1A 		.4byte	0x10f
 4410 048d 28          		.4byte	.LLST80
 4411 048d 0A          		.1byte	0x29
 4412 048e 01          		.ascii "to\000"
 4413 048e 00 00 00 00 		.1byte	0x1
 4414 0490 01          		.2byte	0x313
 4415 0491 03 14       		.4byte	0x10f
 4416 0492 01          		.4byte	.LLST81
 4417 0492 00 00 00 3B 		.1byte	0xb
 4418 0494 00 00 00 00 		.4byte	.LASF31
 4419 0496 00 00 00 00 		.1byte	0x1
 4420 0498 00 00 00 00 		.2byte	0x313
 4421 049a 00 00 09 D2 		.4byte	0x3b
 4422 049c 0B          		.4byte	.LLST82
 4423 049d 00 00 00 00 		.1byte	0x13
 4424 049f 01          		.4byte	.LASF68
 4425 049f 03 13       		.1byte	0x1
 4426 04a0 00 00 01 0F 		.2byte	0x317
 4427 04a2 00 00 00 00 		.4byte	0x3fb
 4428 04a4 29          		.1byte	0x2
 4429 04a5 74 6F 00    		.1byte	0x76
 4430 04a6 01          		.1byte	0x5
 4431 04a7 03 13       		.1byte	0xd
 4432 04a8 00 00 01 0F 		.4byte	.LASF44
 4433 04aa 00 00 00 00 		.1byte	0x1
 4434 04ac 0B          		.2byte	0x31b
 4435 04ac 00 00 00 00 		.4byte	0x3fb
 4436 04ae 01          		.1byte	0x13
 4437 04af 03 13       		.4byte	.LASF69
 4438 04b0 00 00 00 3B 		.1byte	0x1
 4439 04b2 00 00 00 00 		.2byte	0x31e
 4440 04b4 13          		.4byte	0x3fb
 4441 04b4 00 00 00 00 		.1byte	0x2
 4442 04b6 01          		.1byte	0x76
 4443 04b7 03 17       		.1byte	0x4
 4444 04b8 00 00 03 FB 		.1byte	0x10
 4445 04ba 02          		.4byte	.LASF70
 4446 04ba 76          		.1byte	0x1
 4447 04bb 05          		.2byte	0x321
 4448 04bb 0D          		.4byte	0x3b
 4449 04bc 00 00 00 00 		.4byte	.LLST83
 4450 04be 01          		.1byte	0x13
 4451 04be 03 1B       		.4byte	.LASF42
 4452 04bf 00 00 03 FB 		.1byte	0x1
 4453 04c1 13          		.2byte	0x324
 4454 04c2 00 00 00 00 		.4byte	0x3fb
 4455 04c4 01          		.1byte	0x2
 4456 04c4 03 1E       		.1byte	0x76
 4457 04c5 00 00 03 FB 		.1byte	0x3
 4458 04c7 02          		.1byte	0x10
 4459 04c8 76          		.4byte	.LASF71
 4460 04c8 04          		.1byte	0x1
 4461 04c9 10          		.2byte	0x327
 4462 04c9 00 00 00 00 		.4byte	0x69
 4463 04cb 01          		.4byte	.LLST84
 4464 04cc 03 21       		.1byte	0x26
 4465 04cd 00 00 00 3B 		.ascii "src\000"
 4466 04cf 00 00 00 00 		.1byte	0x1
 4467 04d1 13          		.2byte	0x32a
 4468 04d1 00 00 00 00 		.4byte	0x914
 4469 04d3 01          		.4byte	.LLST85
 4470 04d4 03 24       		.1byte	0x0
 4471 04d5 00 00 03 FB 		.1byte	0x2a
 4472 04d7 02          		.1byte	0x1
 4473 04d7 76          		.4byte	.LASF72
 4474 04d8 03          		.1byte	0x1
 4475 04d8 10          		.2byte	0x2d7
 4476 04d9 00 00 00 00 		.1byte	0x1
 4477 04db 01          		.4byte	0x3b
 4478 04db 03 27       		.4byte	.LFB7
 4479 04dc 00 00 00 69 		.4byte	.LFE7
 4480 04de 00 00 00 00 		.4byte	.LLST86
 4481 04e0 26          		.1byte	0xb
 4482 04e1 73 72 63 00 		.4byte	.LASF24
 4483 04e3 01          		.1byte	0x1
 4484 04e3 03 2A       		.2byte	0x2d6
 4485 04e4 00 00 09 14 		.4byte	0x10f
 4486 04e6 00 00 00 00 		.4byte	.LLST87
 4487 04e8 00          		.1byte	0xb
 4488 04e9 2A          		.4byte	.LASF53
 4489 04e9 01          		.1byte	0x1
 4490 04ea 00 00 00 00 		.2byte	0x2d6
 4491 04ec 01          		.4byte	0x914
 4492 04ec 02 D7       		.4byte	.LLST88
 4493 04ed 01          		.1byte	0xc
 4494 04ee 00 00 00 3B 		.4byte	.LASF31
 4495 04f0 00 00 00 00 		.1byte	0x1
 4496 04f2 00 00 00 00 		.2byte	0x2d6
 4497 04f4 00 00 00 00 		.4byte	0x3b
 4498 04f6 0B          		.1byte	0x2
 4499 04f6 00 00 00 00 		.1byte	0x91
 4500 04f8 01          		.1byte	0x0
 4501 04f9 02 D6       		.1byte	0x0
 4502 04fa 00 00 01 0F 		.1byte	0x0
 4503 04fc 00 00 00 00 		.section	.debug_abbrev
 4504 04fe 0B          		.1byte	0x1
 4505 04fe 00 00 00 00 		.1byte	0x11
 4506 0500 01          		.1byte	0x1
 4507 0501 02 D6       		.1byte	0x25
 4508 0502 00 00 09 14 		.1byte	0xe
 4509 0504 00 00 00 00 		.1byte	0x13
 4510 0506 0C          		.1byte	0xb
 4511 0506 00 00 00 00 		.1byte	0x3
 4512 0508 01          		.1byte	0xe
 4513 0509 02 D6       		.1byte	0x1b
 4514 050a 00 00 00 3B 		.1byte	0xe
 4515 050c 02          		.1byte	0x11
 4516 050c 91          		.1byte	0x1
 4517 050d 00          		.1byte	0x52
 4518 050d 00          		.1byte	0x1
 4519 050e 00          		.1byte	0x55
 4520                 		.1byte	0x6
 4521 0000 01          		.1byte	0x10
 4522 0000 11          		.1byte	0x6
 4523 0001 01          		.1byte	0x0
 4524 0001 25          		.1byte	0x0
 4525 0002 0E          		.1byte	0x2
 4526 0002 13          		.1byte	0x16
 4527 0003 0B          		.1byte	0x0
 4528 0003 03          		.1byte	0x3
 4529 0004 0E          		.1byte	0xe
 4530 0004 1B          		.1byte	0x3a
 4531 0005 0E          		.1byte	0xb
 4532 0005 11          		.1byte	0x3b
 4533 0006 01          		.1byte	0xb
 4534 0006 52          		.1byte	0x49
 4535 0007 01          		.1byte	0x13
 4536 0007 55          		.1byte	0x0
 4537 0008 06          		.1byte	0x0
 4538 0008 10          		.1byte	0x3
 4539 0009 06          		.1byte	0x24
 4540 0009 00          		.1byte	0x0
 4541 000a 00          		.1byte	0xb
 4542 000a 02          		.1byte	0xb
 4543 000b 16          		.1byte	0x3e
 4544 000b 00          		.1byte	0xb
 4545 000c 03          		.1byte	0x3
 4546 000c 0E          		.1byte	0xe
 4547 000d 3A          		.1byte	0x0
 4548 000d 0B          		.1byte	0x0
 4549 000e 3B          		.1byte	0x4
 4550 000e 0B          		.1byte	0x4
 4551 000f 49          		.1byte	0x1
 4552 000f 13          		.1byte	0xb
 4553 0010 00          		.1byte	0xb
 4554 0010 00          		.1byte	0x3a
 4555 0011 03          		.1byte	0xb
 4556 0011 24          		.1byte	0x3b
 4557 0012 00          		.1byte	0xb
 4558 0012 0B          		.1byte	0x1
 4559 0013 0B          		.1byte	0x13
 4560 0013 3E          		.1byte	0x0
 4561 0014 0B          		.1byte	0x0
 4562 0014 03          		.1byte	0x5
 4563 0015 0E          		.1byte	0x28
 4564 0015 00          		.1byte	0x0
 4565 0016 00          		.1byte	0x3
 4566 0016 04          		.1byte	0xe
 4567 0017 04          		.1byte	0x1c
 4568 0017 01          		.1byte	0xd
 4569 0018 0B          		.1byte	0x0
 4570 0018 0B          		.1byte	0x0
 4571 0019 3A          		.1byte	0x6
 4572 0019 0B          		.1byte	0x13
 4573 001a 3B          		.1byte	0x1
 4574 001a 0B          		.1byte	0x3
 4575 001b 01          		.1byte	0xe
 4576 001b 13          		.1byte	0xb
 4577 001c 00          		.1byte	0xb
 4578 001c 00          		.1byte	0x3a
 4579 001d 05          		.1byte	0xb
 4580 001d 28          		.1byte	0x3b
 4581 001e 00          		.1byte	0xb
 4582 001e 03          		.1byte	0x1
 4583 001f 0E          		.1byte	0x13
 4584 001f 1C          		.1byte	0x0
 4585 0020 0D          		.1byte	0x0
 4586 0020 00          		.1byte	0x7
 4587 0021 00          		.1byte	0xd
 4588 0021 06          		.1byte	0x0
 4589 0022 13          		.1byte	0x3
 4590 0022 01          		.1byte	0xe
 4591 0023 03          		.1byte	0x3a
 4592 0023 0E          		.1byte	0xb
 4593 0024 0B          		.1byte	0x3b
 4594 0024 0B          		.1byte	0xb
 4595 0025 3A          		.1byte	0x49
 4596 0025 0B          		.1byte	0x13
 4597 0026 3B          		.1byte	0x38
 4598 0026 0B          		.1byte	0xa
 4599 0027 01          		.1byte	0x0
 4600 0027 13          		.1byte	0x0
 4601 0028 00          		.1byte	0x8
 4602 0028 00          		.1byte	0xf
 4603 0029 07          		.1byte	0x0
 4604 0029 0D          		.1byte	0xb
 4605 002a 00          		.1byte	0xb
 4606 002a 03          		.1byte	0x0
 4607 002b 0E          		.1byte	0x0
 4608 002b 3A          		.1byte	0x9
 4609 002c 0B          		.1byte	0xf
 4610 002c 3B          		.1byte	0x0
 4611 002d 0B          		.1byte	0xb
 4612 002d 49          		.1byte	0xb
 4613 002e 13          		.1byte	0x49
 4614 002e 38          		.1byte	0x13
 4615 002f 0A          		.1byte	0x0
 4616 002f 00          		.1byte	0x0
 4617 0030 00          		.1byte	0xa
 4618 0030 08          		.1byte	0x2e
 4619 0031 0F          		.1byte	0x1
 4620 0031 00          		.1byte	0x3f
 4621 0032 0B          		.1byte	0xc
 4622 0032 0B          		.1byte	0x3
 4623 0033 00          		.1byte	0xe
 4624 0033 00          		.1byte	0x3a
 4625 0034 09          		.1byte	0xb
 4626 0034 0F          		.1byte	0x3b
 4627 0035 00          		.1byte	0x5
 4628 0035 0B          		.1byte	0x27
 4629 0036 0B          		.1byte	0xc
 4630 0036 49          		.1byte	0x49
 4631 0037 13          		.1byte	0x13
 4632 0037 00          		.1byte	0x11
 4633 0038 00          		.1byte	0x1
 4634 0038 0A          		.1byte	0x12
 4635 0039 2E          		.1byte	0x1
 4636 0039 01          		.1byte	0x40
 4637 003a 3F          		.1byte	0x6
 4638 003a 0C          		.1byte	0x1
 4639 003b 03          		.1byte	0x13
 4640 003b 0E          		.1byte	0x0
 4641 003c 3A          		.1byte	0x0
 4642 003c 0B          		.1byte	0xb
 4643 003d 3B          		.1byte	0x5
 4644 003d 05          		.1byte	0x0
 4645 003e 27          		.1byte	0x3
 4646 003e 0C          		.1byte	0xe
 4647 003f 49          		.1byte	0x3a
 4648 003f 13          		.1byte	0xb
 4649 0040 11          		.1byte	0x3b
 4650 0040 01          		.1byte	0x5
 4651 0041 12          		.1byte	0x49
 4652 0041 01          		.1byte	0x13
 4653 0042 40          		.1byte	0x2
 4654 0042 06          		.1byte	0x6
 4655 0043 01          		.1byte	0x0
 4656 0043 13          		.1byte	0x0
 4657 0044 00          		.1byte	0xc
 4658 0044 00          		.1byte	0x5
 4659 0045 0B          		.1byte	0x0
 4660 0045 05          		.1byte	0x3
 4661 0046 00          		.1byte	0xe
 4662 0046 03          		.1byte	0x3a
 4663 0047 0E          		.1byte	0xb
 4664 0047 3A          		.1byte	0x3b
 4665 0048 0B          		.1byte	0x5
 4666 0048 3B          		.1byte	0x49
 4667 0049 05          		.1byte	0x13
 4668 0049 49          		.1byte	0x2
 4669 004a 13          		.1byte	0xa
 4670 004a 02          		.1byte	0x0
 4671 004b 06          		.1byte	0x0
 4672 004b 00          		.1byte	0xd
 4673 004c 00          		.1byte	0x34
 4674 004c 0C          		.1byte	0x0
 4675 004d 05          		.1byte	0x3
 4676 004d 00          		.1byte	0xe
 4677 004e 03          		.1byte	0x3a
 4678 004e 0E          		.1byte	0xb
 4679 004f 3A          		.1byte	0x3b
 4680 004f 0B          		.1byte	0x5
 4681 0050 3B          		.1byte	0x49
 4682 0050 05          		.1byte	0x13
 4683 0051 49          		.1byte	0x0
 4684 0051 13          		.1byte	0x0
 4685 0052 02          		.1byte	0xe
 4686 0052 0A          		.1byte	0x26
 4687 0053 00          		.1byte	0x0
 4688 0053 00          		.1byte	0x49
 4689 0054 0D          		.1byte	0x13
 4690 0054 34          		.1byte	0x0
 4691 0055 00          		.1byte	0x0
 4692 0055 03          		.1byte	0xf
 4693 0056 0E          		.1byte	0x2e
 4694 0056 3A          		.1byte	0x1
 4695 0057 0B          		.1byte	0x3f
 4696 0057 3B          		.1byte	0xc
 4697 0058 05          		.1byte	0x3
 4698 0058 49          		.1byte	0xe
 4699 0059 13          		.1byte	0x3a
 4700 0059 00          		.1byte	0xb
 4701 005a 00          		.1byte	0x3b
 4702 005a 0E          		.1byte	0x5
 4703 005b 26          		.1byte	0x27
 4704 005b 00          		.1byte	0xc
 4705 005c 49          		.1byte	0x11
 4706 005c 13          		.1byte	0x1
 4707 005d 00          		.1byte	0x12
 4708 005d 00          		.1byte	0x1
 4709 005e 0F          		.1byte	0x40
 4710 005e 2E          		.1byte	0x6
 4711 005f 01          		.1byte	0x1
 4712 005f 3F          		.1byte	0x13
 4713 0060 0C          		.1byte	0x0
 4714 0060 03          		.1byte	0x0
 4715 0061 0E          		.1byte	0x10
 4716 0061 3A          		.1byte	0x34
 4717 0062 0B          		.1byte	0x0
 4718 0062 3B          		.1byte	0x3
 4719 0063 05          		.1byte	0xe
 4720 0063 27          		.1byte	0x3a
 4721 0064 0C          		.1byte	0xb
 4722 0064 11          		.1byte	0x3b
 4723 0065 01          		.1byte	0x5
 4724 0065 12          		.1byte	0x49
 4725 0066 01          		.1byte	0x13
 4726 0066 40          		.1byte	0x2
 4727 0067 06          		.1byte	0x6
 4728 0067 01          		.1byte	0x0
 4729 0068 13          		.1byte	0x0
 4730 0068 00          		.1byte	0x11
 4731 0069 00          		.1byte	0x2e
 4732 0069 10          		.1byte	0x1
 4733 006a 34          		.1byte	0x3f
 4734 006a 00          		.1byte	0xc
 4735 006b 03          		.1byte	0x3
 4736 006b 0E          		.1byte	0xe
 4737 006c 3A          		.1byte	0x3a
 4738 006c 0B          		.1byte	0xb
 4739 006d 3B          		.1byte	0x3b
 4740 006d 05          		.1byte	0x5
 4741 006e 49          		.1byte	0x27
 4742 006e 13          		.1byte	0xc
 4743 006f 02          		.1byte	0x11
 4744 006f 06          		.1byte	0x1
 4745 0070 00          		.1byte	0x12
 4746 0070 00          		.1byte	0x1
 4747 0071 11          		.1byte	0x40
 4748 0071 2E          		.1byte	0xa
 4749 0072 01          		.1byte	0x1
 4750 0072 3F          		.1byte	0x13
 4751 0073 0C          		.1byte	0x0
 4752 0073 03          		.1byte	0x0
 4753 0074 0E          		.1byte	0x12
 4754 0074 3A          		.1byte	0xb
 4755 0075 0B          		.1byte	0x1
 4756 0075 3B          		.1byte	0x11
 4757 0076 05          		.1byte	0x1
 4758 0076 27          		.1byte	0x12
 4759 0077 0C          		.1byte	0x1
 4760 0077 11          		.1byte	0x0
 4761 0078 01          		.1byte	0x0
 4762 0078 12          		.1byte	0x13
 4763 0079 01          		.1byte	0x34
 4764 0079 40          		.1byte	0x0
 4765 007a 0A          		.1byte	0x3
 4766 007a 01          		.1byte	0xe
 4767 007b 13          		.1byte	0x3a
 4768 007b 00          		.1byte	0xb
 4769 007c 00          		.1byte	0x3b
 4770 007c 12          		.1byte	0x5
 4771 007d 0B          		.1byte	0x49
 4772 007d 01          		.1byte	0x13
 4773 007e 11          		.1byte	0x2
 4774 007e 01          		.1byte	0xa
 4775 007f 12          		.1byte	0x0
 4776 007f 01          		.1byte	0x0
 4777 0080 00          		.1byte	0x14
 4778 0080 00          		.1byte	0x2e
 4779 0081 13          		.1byte	0x1
 4780 0081 34          		.1byte	0x3
 4781 0082 00          		.1byte	0xe
 4782 0082 03          		.1byte	0x3a
 4783 0083 0E          		.1byte	0xb
 4784 0083 3A          		.1byte	0x3b
 4785 0084 0B          		.1byte	0x5
 4786 0084 3B          		.1byte	0x27
 4787 0085 05          		.1byte	0xc
 4788 0085 49          		.1byte	0x49
 4789 0086 13          		.1byte	0x13
 4790 0086 02          		.1byte	0x20
 4791 0087 0A          		.1byte	0xb
 4792 0087 00          		.1byte	0x1
 4793 0088 00          		.1byte	0x13
 4794 0088 14          		.1byte	0x0
 4795 0089 2E          		.1byte	0x0
 4796 0089 01          		.1byte	0x15
 4797 008a 03          		.1byte	0x5
 4798 008a 0E          		.1byte	0x0
 4799 008b 3A          		.1byte	0x3
 4800 008b 0B          		.1byte	0xe
 4801 008c 3B          		.1byte	0x3a
 4802 008c 05          		.1byte	0xb
 4803 008d 27          		.1byte	0x3b
 4804 008d 0C          		.1byte	0x5
 4805 008e 49          		.1byte	0x49
 4806 008e 13          		.1byte	0x13
 4807 008f 20          		.1byte	0x0
 4808 008f 0B          		.1byte	0x0
 4809 0090 01          		.1byte	0x16
 4810 0090 13          		.1byte	0xb
 4811 0091 00          		.1byte	0x1
 4812 0091 00          		.1byte	0x1
 4813 0092 15          		.1byte	0x13
 4814 0092 05          		.1byte	0x0
 4815 0093 00          		.1byte	0x0
 4816 0093 03          		.1byte	0x17
 4817 0094 0E          		.1byte	0x34
 4818 0094 3A          		.1byte	0x0
 4819 0095 0B          		.1byte	0x3
 4820 0095 3B          		.1byte	0x8
 4821 0096 05          		.1byte	0x3a
 4822 0096 49          		.1byte	0xb
 4823 0097 13          		.1byte	0x3b
 4824 0097 00          		.1byte	0x5
 4825 0098 00          		.1byte	0x49
 4826 0098 16          		.1byte	0x13
 4827 0099 0B          		.1byte	0x0
 4828 0099 01          		.1byte	0x0
 4829 009a 01          		.1byte	0x18
 4830 009a 13          		.1byte	0xb
 4831 009b 00          		.1byte	0x1
 4832 009b 00          		.1byte	0x0
 4833 009c 17          		.1byte	0x0
 4834 009c 34          		.1byte	0x19
 4835 009d 00          		.1byte	0x1d
 4836 009d 03          		.1byte	0x1
 4837 009e 08          		.1byte	0x31
 4838 009e 3A          		.1byte	0x13
 4839 009f 0B          		.1byte	0x11
 4840 009f 3B          		.1byte	0x1
 4841 00a0 05          		.1byte	0x12
 4842 00a0 49          		.1byte	0x1
 4843 00a1 13          		.1byte	0x58
 4844 00a1 00          		.1byte	0xb
 4845 00a2 00          		.1byte	0x59
 4846 00a2 18          		.1byte	0x5
 4847 00a3 0B          		.1byte	0x0
 4848 00a3 01          		.1byte	0x0
 4849 00a4 00          		.1byte	0x1a
 4850 00a4 00          		.1byte	0x5
 4851 00a5 19          		.1byte	0x0
 4852 00a5 1D          		.1byte	0x31
 4853 00a6 01          		.1byte	0x13
 4854 00a6 31          		.1byte	0x0
 4855 00a7 13          		.1byte	0x0
 4856 00a7 11          		.1byte	0x1b
 4857 00a8 01          		.1byte	0xb
 4858 00a8 12          		.1byte	0x1
 4859 00a9 01          		.1byte	0x55
 4860 00a9 58          		.1byte	0x6
 4861 00aa 0B          		.1byte	0x0
 4862 00aa 59          		.1byte	0x0
 4863 00ab 05          		.1byte	0x1c
 4864 00ab 00          		.1byte	0x34
 4865 00ac 00          		.1byte	0x0
 4866 00ac 1A          		.1byte	0x31
 4867 00ad 05          		.1byte	0x13
 4868 00ad 00          		.1byte	0x2
 4869 00ae 31          		.1byte	0x6
 4870 00ae 13          		.1byte	0x0
 4871 00af 00          		.1byte	0x0
 4872 00af 00          		.1byte	0x1d
 4873 00b0 1B          		.1byte	0x34
 4874 00b0 0B          		.1byte	0x0
 4875 00b1 01          		.1byte	0x31
 4876 00b1 55          		.1byte	0x13
 4877 00b2 06          		.1byte	0x0
 4878 00b2 00          		.1byte	0x0
 4879 00b3 00          		.1byte	0x1e
 4880 00b3 1C          		.1byte	0xb
 4881 00b4 34          		.1byte	0x1
 4882 00b4 00          		.1byte	0x55
 4883 00b5 31          		.1byte	0x6
 4884 00b5 13          		.1byte	0x1
 4885 00b6 02          		.1byte	0x13
 4886 00b6 06          		.1byte	0x0
 4887 00b7 00          		.1byte	0x0
 4888 00b7 00          		.1byte	0x1f
 4889 00b8 1D          		.1byte	0x34
 4890 00b8 34          		.1byte	0x0
 4891 00b9 00          		.1byte	0x31
 4892 00b9 31          		.1byte	0x13
 4893 00ba 13          		.1byte	0x2
 4894 00ba 00          		.1byte	0xa
 4895 00bb 00          		.1byte	0x0
 4896 00bb 1E          		.1byte	0x0
 4897 00bc 0B          		.1byte	0x20
 4898 00bc 01          		.1byte	0x2e
 4899 00bd 55          		.1byte	0x1
 4900 00bd 06          		.1byte	0x3
 4901 00be 01          		.1byte	0xe
 4902 00be 13          		.1byte	0x3a
 4903 00bf 00          		.1byte	0xb
 4904 00bf 00          		.1byte	0x3b
 4905 00c0 1F          		.1byte	0xb
 4906 00c0 34          		.1byte	0x27
 4907 00c1 00          		.1byte	0xc
 4908 00c1 31          		.1byte	0x49
 4909 00c2 13          		.1byte	0x13
 4910 00c2 02          		.1byte	0x11
 4911 00c3 0A          		.1byte	0x1
 4912 00c3 00          		.1byte	0x12
 4913 00c4 00          		.1byte	0x1
 4914 00c4 20          		.1byte	0x40
 4915 00c5 2E          		.1byte	0x6
 4916 00c5 01          		.1byte	0x1
 4917 00c6 03          		.1byte	0x13
 4918 00c6 0E          		.1byte	0x0
 4919 00c7 3A          		.1byte	0x0
 4920 00c7 0B          		.1byte	0x21
 4921 00c8 3B          		.1byte	0x5
 4922 00c8 0B          		.1byte	0x0
 4923 00c9 27          		.1byte	0x3
 4924 00c9 0C          		.1byte	0xe
 4925 00ca 49          		.1byte	0x3a
 4926 00ca 13          		.1byte	0xb
 4927 00cb 11          		.1byte	0x3b
 4928 00cb 01          		.1byte	0xb
 4929 00cc 12          		.1byte	0x49
 4930 00cc 01          		.1byte	0x13
 4931 00cd 40          		.1byte	0x2
 4932 00cd 06          		.1byte	0x6
 4933 00ce 01          		.1byte	0x0
 4934 00ce 13          		.1byte	0x0
 4935 00cf 00          		.1byte	0x22
 4936 00cf 00          		.1byte	0x34
 4937 00d0 21          		.1byte	0x0
 4938 00d0 05          		.1byte	0x3
 4939 00d1 00          		.1byte	0xe
 4940 00d1 03          		.1byte	0x3a
 4941 00d2 0E          		.1byte	0xb
 4942 00d2 3A          		.1byte	0x3b
 4943 00d3 0B          		.1byte	0xb
 4944 00d3 3B          		.1byte	0x49
 4945 00d4 0B          		.1byte	0x13
 4946 00d4 49          		.1byte	0x2
 4947 00d5 13          		.1byte	0x6
 4948 00d5 02          		.1byte	0x0
 4949 00d6 06          		.1byte	0x0
 4950 00d6 00          		.1byte	0x23
 4951 00d7 00          		.1byte	0x34
 4952 00d7 22          		.1byte	0x0
 4953 00d8 34          		.1byte	0x3
 4954 00d8 00          		.1byte	0xe
 4955 00d9 03          		.1byte	0x3a
 4956 00d9 0E          		.1byte	0xb
 4957 00da 3A          		.1byte	0x3b
 4958 00da 0B          		.1byte	0xb
 4959 00db 3B          		.1byte	0x49
 4960 00db 0B          		.1byte	0x13
 4961 00dc 49          		.1byte	0x2
 4962 00dc 13          		.1byte	0xa
 4963 00dd 02          		.1byte	0x0
 4964 00dd 06          		.1byte	0x0
 4965 00de 00          		.1byte	0x24
 4966 00de 00          		.1byte	0xb
 4967 00df 23          		.1byte	0x1
 4968 00df 34          		.1byte	0x11
 4969 00e0 00          		.1byte	0x1
 4970 00e0 03          		.1byte	0x12
 4971 00e1 0E          		.1byte	0x1
 4972 00e1 3A          		.1byte	0x1
 4973 00e2 0B          		.1byte	0x13
 4974 00e2 3B          		.1byte	0x0
 4975 00e3 0B          		.1byte	0x0
 4976 00e3 49          		.1byte	0x25
 4977 00e4 13          		.1byte	0x34
 4978 00e4 02          		.1byte	0x0
 4979 00e5 0A          		.1byte	0x3
 4980 00e5 00          		.1byte	0x8
 4981 00e6 00          		.1byte	0x3a
 4982 00e6 24          		.1byte	0xb
 4983 00e7 0B          		.1byte	0x3b
 4984 00e7 01          		.1byte	0xb
 4985 00e8 11          		.1byte	0x49
 4986 00e8 01          		.1byte	0x13
 4987 00e9 12          		.1byte	0x2
 4988 00e9 01          		.1byte	0x6
 4989 00ea 01          		.1byte	0x0
 4990 00ea 13          		.1byte	0x0
 4991 00eb 00          		.1byte	0x26
 4992 00eb 00          		.1byte	0x34
 4993 00ec 25          		.1byte	0x0
 4994 00ec 34          		.1byte	0x3
 4995 00ed 00          		.1byte	0x8
 4996 00ed 03          		.1byte	0x3a
 4997 00ee 08          		.1byte	0xb
 4998 00ee 3A          		.1byte	0x3b
 4999 00ef 0B          		.1byte	0x5
 5000 00ef 3B          		.1byte	0x49
 5001 00f0 0B          		.1byte	0x13
 5002 00f0 49          		.1byte	0x2
 5003 00f1 13          		.1byte	0x6
 5004 00f1 02          		.1byte	0x0
 5005 00f2 06          		.1byte	0x0
 5006 00f2 00          		.1byte	0x27
 5007 00f3 00          		.1byte	0x34
 5008 00f3 26          		.1byte	0x0
 5009 00f4 34          		.1byte	0x3
 5010 00f4 00          		.1byte	0x8
 5011 00f5 03          		.1byte	0x3a
 5012 00f5 08          		.1byte	0xb
 5013 00f6 3A          		.1byte	0x3b
 5014 00f6 0B          		.1byte	0x5
 5015 00f7 3B          		.1byte	0x49
 5016 00f7 05          		.1byte	0x13
 5017 00f8 49          		.1byte	0x2
 5018 00f8 13          		.1byte	0xa
 5019 00f9 02          		.1byte	0x0
 5020 00f9 06          		.1byte	0x0
 5021 00fa 00          		.1byte	0x28
 5022 00fa 00          		.1byte	0x26
 5023 00fb 27          		.1byte	0x0
 5024 00fb 34          		.1byte	0x0
 5025 00fc 00          		.1byte	0x0
 5026 00fc 03          		.1byte	0x29
 5027 00fd 08          		.1byte	0x5
 5028 00fd 3A          		.1byte	0x0
 5029 00fe 0B          		.1byte	0x3
 5030 00fe 3B          		.1byte	0x8
 5031 00ff 05          		.1byte	0x3a
 5032 00ff 49          		.1byte	0xb
 5033 0100 13          		.1byte	0x3b
 5034 0100 02          		.1byte	0x5
 5035 0101 0A          		.1byte	0x49
 5036 0101 00          		.1byte	0x13
 5037 0102 00          		.1byte	0x2
 5038 0102 28          		.1byte	0x6
 5039 0103 26          		.1byte	0x0
 5040 0103 00          		.1byte	0x0
 5041 0104 00          		.1byte	0x2a
 5042 0104 00          		.1byte	0x2e
 5043 0105 29          		.1byte	0x1
 5044 0105 05          		.1byte	0x3f
 5045 0106 00          		.1byte	0xc
 5046 0106 03          		.1byte	0x3
 5047 0107 08          		.1byte	0xe
 5048 0107 3A          		.1byte	0x3a
 5049 0108 0B          		.1byte	0xb
 5050 0108 3B          		.1byte	0x3b
 5051 0109 05          		.1byte	0x5
 5052 0109 49          		.1byte	0x27
 5053 010a 13          		.1byte	0xc
 5054 010a 02          		.1byte	0x49
 5055 010b 06          		.1byte	0x13
 5056 010b 00          		.1byte	0x11
 5057 010c 00          		.1byte	0x1
 5058 010c 2A          		.1byte	0x12
 5059 010d 2E          		.1byte	0x1
 5060 010d 01          		.1byte	0x40
 5061 010e 3F          		.1byte	0x6
 5062 010e 0C          		.1byte	0x0
 5063 010f 03          		.1byte	0x0
 5064 010f 0E          		.1byte	0x0
 5065 0110 3A          		.section	.debug_pubnames,"",@progbits
 5066 0110 0B          		.4byte	0x135
 5067 0111 3B          		.2byte	0x2
 5068 0111 05          		.4byte	.Ldebug_info0
 5069 0112 27          		.4byte	0xa1d
 5070 0112 0C          		.4byte	0x120
 5071 0113 49          		.ascii "OQCreate\000"
 5072 0113 13          		.4byte	0x18e
 5073 0114 11          		.ascii "OQDestroy\000"
 5074 0114 01          		.4byte	0x1b9
 5075 0115 12          		.ascii "OQIsValid\000"
 5076 0115 01          		.4byte	0x1ed
 5077 0116 40          		.ascii "OQIsEmpty\000"
 5078 0116 06          		.4byte	0x21c
 5079 0117 00          		.ascii "OQIsFull\000"
 5080 0117 00          		.4byte	0x24b
 5081 0118 00          		.ascii "OQCapacity\000"
 5082                 		.4byte	0x28a
 5083 0000 00 00 01 35 		.ascii "OQSize\000"
 5084 0002 00 02       		.4byte	0x2c9
 5085 0003 00 00 00 00 		.ascii "OQSpace\000"
 5086 0005 00 00 0A 1D 		.4byte	0x2f8
 5087 0007 00 00 01 20 		.ascii "OQClear\000"
 5088 0009 4F 51 43 72 		.4byte	0x323
 5088      65 61 74 65 
 5088      00 
 5089 000d 00 00 01 8E 		.ascii "OQSetFill\000"
 5090 000f 4F 51 44 65 		.4byte	0x367
 5090      73 74 72 6F 
 5090      79 00 
 5091 0014 00 00 01 B9 		.ascii "OQRollbackClear\000"
 5092 0016 4F 51 49 73 		.4byte	0x392
 5092      56 61 6C 69 
 5092      64 00 
 5093 001b 00 00 01 ED 		.ascii "OQIncrementSize\000"
 5094 001d 4F 51 49 73 		.4byte	0x400
 5094      45 6D 70 74 
 5094      79 00 
 5095 0022 00 00 02 1C 		.ascii "OQDecrementSize\000"
 5096 0024 4F 51 49 73 		.4byte	0x46e
 5096      46 75 6C 6C 
 5096      00 
 5097 0029 00 00 02 4B 		.ascii "OQSetSize\000"
 5098 002b 4F 51 43 61 		.4byte	0x4d7
 5098      70 61 63 69 
 5098      74 79 00 
 5099 0030 00 00 02 8A 		.ascii "OQGetStartOffset\000"
 5100 0032 4F 51 53 69 		.4byte	0x506
 5100      7A 65 00 
 5101 0036 00 00 02 C9 		.ascii "OQGetEndOffset\000"
 5102 0038 4F 51 53 70 		.4byte	0x64a
 5102      61 63 65 00 
 5103 003c 00 00 02 F8 		.ascii "OQPopData\000"
 5104 003e 4F 51 43 6C 		.4byte	0x91b
 5104      65 61 72 00 
 5105 0042 00 00 03 23 		.ascii "OQTransferData\000"
 5106 0044 4F 51 53 65 		.4byte	0x9d2
 5106      74 46 69 6C 
 5106      6C 00 
 5107 0049 00 00 03 67 		.ascii "OQQueueData\000"
 5108 004b 4F 51 52 6F 		.4byte	0x0
 5108      6C 6C 62 61 
 5108      63 6B 43 6C 
 5108      65 61 72 00 
 5109 0053 00 00 03 92 		.section	.debug_aranges,"",@progbits
 5110 0055 4F 51 49 6E 		.4byte	0xb4
 5110      63 72 65 6D 
 5110      65 6E 74 53 
 5110      69 7A 65 00 
 5111 005d 00 00 04 00 		.2byte	0x2
 5112 005f 4F 51 44 65 		.4byte	.Ldebug_info0
 5112      63 72 65 6D 
 5112      65 6E 74 53 
 5112      69 7A 65 00 
 5113 0067 00 00 04 6E 		.1byte	0x4
 5114 0069 4F 51 53 65 		.1byte	0x0
 5114      74 53 69 7A 
 5114      65 00 
 5115 006e 00 00 04 D7 		.2byte	0x0
 5116 0070 4F 51 47 65 		.2byte	0x0
 5116      74 53 74 61 
 5116      72 74 4F 66 
 5116      66 73 65 74 
 5116      00 
 5117 0078 00 00 05 06 		.4byte	.LFB4
 5118 007a 4F 51 47 65 		.4byte	.LFE4-.LFB4
 5118      74 45 6E 64 
 5118      4F 66 66 73 
 5118      65 74 00 
 5119 0082 00 00 06 4A 		.4byte	.LFB5
 5120 0084 4F 51 50 6F 		.4byte	.LFE5-.LFB5
 5120      70 44 61 74 
 5120      61 00 
 5121 0089 00 00 09 1B 		.4byte	.LFB6
 5122 008b 4F 51 54 72 		.4byte	.LFE6-.LFB6
 5122      61 6E 73 66 
 5122      65 72 44 61 
 5122      74 61 00 
 5123 0092 00 00 09 D2 		.4byte	.LFB11
 5124 0094 4F 51 51 75 		.4byte	.LFE11-.LFB11
 5124      65 75 65 44 
 5124      61 74 61 00 
 5125 009a 00 00 00 00 		.4byte	.LFB12
 5126                 		.4byte	.LFE12-.LFB12
 5127 0000 00 00 00 B4 		.4byte	.LFB13
 5128 0002 00 02       		.4byte	.LFE13-.LFB13
 5129 0003 00 00 00 00 		.4byte	.LFB10
 5130 0005 04          		.4byte	.LFE10-.LFB10
 5131 0005 00          		.4byte	.LFB14
 5132 0006 00 00       		.4byte	.LFE14-.LFB14
 5133 0007 00 00       		.4byte	.LFB15
 5134 0008 00 00 00 00 		.4byte	.LFE15-.LFB15
 5135 000a 00 00 00 00 		.4byte	.LFB16
 5136 000c 00 00 00 00 		.4byte	.LFE16-.LFB16
 5137 000e 00 00 00 00 		.4byte	.LFB17
 5138 0010 00 00 00 00 		.4byte	.LFE17-.LFB17
 5139 0012 00 00 00 00 		.4byte	.LFB19
 5140 0014 00 00 00 00 		.4byte	.LFE19-.LFB19
 5141 0016 00 00 00 00 		.4byte	.LFB20
 5142 0018 00 00 00 00 		.4byte	.LFE20-.LFB20
 5143 001a 00 00 00 00 		.4byte	.LFB18
 5144 001c 00 00 00 00 		.4byte	.LFE18-.LFB18
 5145 001e 00 00 00 00 		.4byte	.LFB21
 5146 0020 00 00 00 00 		.4byte	.LFE21-.LFB21
 5147 0022 00 00 00 00 		.4byte	.LFB22
 5148 0024 00 00 00 00 		.4byte	.LFE22-.LFB22
 5149 0026 00 00 00 00 		.4byte	.LFB8
 5150 0028 00 00 00 00 		.4byte	.LFE8-.LFB8
 5151 002a 00 00 00 00 		.4byte	.LFB2
 5152 002c 00 00 00 00 		.4byte	.LFE2-.LFB2
 5153 002e 00 00 00 01 		.4byte	.LFB9
 5154 0030 00 00 00 00 		.4byte	.LFE9-.LFB9
 5155 0032 00 00 00 00 		.4byte	.LFB7
 5156 0034 00 00 00 00 		.4byte	.LFE7-.LFB7
 5157 0036 00 00 00 00 		.4byte	0x0
 5158 0038 00 00 00 00 		.4byte	0x0
 5159 003a 00 00 00 00 		.section	.debug_ranges,"",@progbits
 5160 003c 00 00 00 00 	.Ldebug_ranges0:
 5161 003e 00 00 00 00 		.4byte	.LBB12
 5162 0040 00 00 00 00 		.4byte	.LBE12
 5163 0042 00 00 00 00 		.4byte	.LBB25
 5164 0044 00 00 00 00 		.4byte	.LBE25
 5165 0046 00 00 00 00 		.4byte	.LBB24
 5166 0048 00 00 00 00 		.4byte	.LBE24
 5167 004a 00 00 00 00 		.4byte	.LBB23
 5168 004c 00 00 00 00 		.4byte	.LBE23
 5169 004e 00 00 00 00 		.4byte	0x0
 5170 0050 00 00 00 00 		.4byte	0x0
 5171 0052 00 00 00 00 		.4byte	.LBB13
 5172 0054 00 00 00 00 		.4byte	.LBE13
 5173 0056 00 00 00 00 		.4byte	.LBB22
 5174 0058 00 00 00 00 		.4byte	.LBE22
 5175 005a 00 00 00 00 		.4byte	0x0
 5176                 		.4byte	0x0
 5177                 		.4byte	.LBB15
 5178 0000 00 00 00 00 		.4byte	.LBE15
 5179 0002 00 00 00 00 		.4byte	.LBB14
 5180 0004 00 00 00 00 		.4byte	.LBE14
 5181 0006 00 00 00 00 		.4byte	.LBB21
 5182 0008 00 00 00 00 		.4byte	.LBE21
 5183 000a 00 00 00 00 		.4byte	0x0
 5184 000c 00 00 00 00 		.4byte	0x0
 5185 000e 00 00 00 00 		.4byte	.LBB16
 5186 0010 00 00 00 00 		.4byte	.LBE16
 5187 0012 00 00 00 00 		.4byte	.LBB20
 5188 0014 00 00 00 00 		.4byte	.LBE20
 5189 0016 00 00 00 00 		.4byte	0x0
 5190 0018 00 00 00 00 		.4byte	0x0
 5191 001a 00 00 00 00 		.4byte	.LBB18
 5192 001c 00 00 00 00 		.4byte	.LBE18
 5193 001e 00 00 00 00 		.4byte	.LBB19
 5194 0020 00 00 00 00 		.4byte	.LBE19
 5195 0022 00 00 00 00 		.4byte	0x0
 5196 0024 00 00 00 00 		.4byte	0x0
 5197 0026 00 00 00 00 		.4byte	.LBB27
 5198 0028 00 00 00 00 		.4byte	.LBE27
 5199 002a 00 00 00 00 		.4byte	.LBB28
 5200 002c 00 00 00 00 		.4byte	.LBE28
 5201 002e 00 00 00 00 		.4byte	0x0
 5202 0030 00 00 00 00 		.4byte	0x0
 5203 0032 00 00 00 00 		.4byte	.Ltext0
 5204 0034 00 00 00 00 		.4byte	.Letext0
 5205 0036 00 00 00 00 		.4byte	.LFB4
 5206 0038 00 00 00 00 		.4byte	.LFE4
 5207 003a 00 00 00 00 		.4byte	.LFB5
 5208 003c 00 00 00 00 		.4byte	.LFE5
 5209 003e 00 00 00 00 		.4byte	.LFB6
 5210 0040 00 00 00 00 		.4byte	.LFE6
 5211 0042 00 00 00 00 		.4byte	.LFB11
 5212 0044 00 00 00 00 		.4byte	.LFE11
 5213 0046 00 00 00 00 		.4byte	.LFB12
 5214 0048 00 00 00 00 		.4byte	.LFE12
 5215 004a 00 00 00 00 		.4byte	.LFB13
 5216 004c 00 00 00 00 		.4byte	.LFE13
 5217 004e 00 00 00 00 		.4byte	.LFB10
 5218 0050 00 00 00 00 		.4byte	.LFE10
 5219 0052 00 00 00 00 		.4byte	.LFB14
 5220 0054 00 00 00 00 		.4byte	.LFE14
 5221 0056 00 00 00 00 		.4byte	.LFB15
 5222 0058 00 00 00 00 		.4byte	.LFE15
 5223 005a 00 00 00 00 		.4byte	.LFB16
 5224 005c 00 00 00 00 		.4byte	.LFE16
 5225 005e 00 00 00 00 		.4byte	.LFB17
 5226 0060 00 00 00 00 		.4byte	.LFE17
 5227 0062 00 00 00 00 		.4byte	.LFB19
 5228 0064 00 00 00 00 		.4byte	.LFE19
 5229 0066 00 00 00 00 		.4byte	.LFB20
 5230 0068 00 00 00 00 		.4byte	.LFE20
 5231 006a 00 00 00 00 		.4byte	.LFB18
 5232 006c 00 00 00 00 		.4byte	.LFE18
 5233 006e 00 00 00 00 		.4byte	.LFB21
 5234 0070 00 00 00 00 		.4byte	.LFE21
 5235 0072 00 00 00 00 		.4byte	.LFB22
 5236 0074 00 00 00 00 		.4byte	.LFE22
 5237 0076 00 00 00 00 		.4byte	.LFB8
 5238 0078 00 00 00 00 		.4byte	.LFE8
 5239 007a 00 00 00 00 		.4byte	.LFB2
 5240 007c 00 00 00 00 		.4byte	.LFE2
 5241 007e 00 00 00 00 		.4byte	.LFB9
 5242 0080 00 00 00 00 		.4byte	.LFE9
 5243 0082 00 00 00 00 		.4byte	.LFB7
 5244 0084 00 00 00 00 		.4byte	.LFE7
 5245 0086 00 00 00 00 		.4byte	0x0
 5246 0088 00 00 00 00 		.4byte	0x0
 5247 008a 00 00 00 00 		.section	.debug_str,"MS",@progbits,1
 5248 008c 00 00 00 00 	.LASF34:
 5249 008e 00 00 00 00 		.ascii "OQDestroy\000"
 5250 0090 00 00 00 00 	.LASF30:
 5251 0092 00 00 00 00 		.ascii "OQSize\000"
 5252 0094 00 00 00 00 	.LASF75:
 5253 0096 00 00 00 00 		.ascii "D:\\SVN\\Prj01051MigrosEtiketRepo\\trunk\\05_DetailedDesignProcess\\01_DetailedDesignDocum
 5254 0098 00 00 00 00 	.LASF36:
 5255 009a 00 00 00 00 		.ascii "OQSetFill\000"
 5256 009c 00 00 00 00 	.LASF73:
 5257 009e 00 00 00 00 		.ascii "GNU C 4.3.4 CSR version 22 for xap [1468380]\000"
 5258 00a0 00 00 00 00 	.LASF6:
 5259 00a2 00 00 00 00 		.ascii "short int\000"
 5260 00a4 00 00 00 00 	.LASF10:
 5261 00a6 00 00 00 00 		.ascii "OQDataMode_unpacked\000"
 5262 00a8 00 00 00 00 	.LASF66:
 5263 00aa 00 00 00 00 		.ascii "OQTransferData\000"
 5264                 	.LASF14:
 5265                 		.ascii "p_buffer\000"
 5266 0000 4F 51 44 65 	.LASF68:
 5266      73 74 72 6F 
 5266      79 00 
 5267                 		.ascii "avlbl_space\000"
 5268 0005 4F 51 53 69 	.LASF48:
 5268      7A 65 00 
 5269                 		.ascii "ret_val\000"
 5270 0008 44 3A 5C 53 	.LASF12:
 5270      56 4E 5C 50 
 5270      72 6A 30 31 
 5270      30 35 31 4D 
 5270      69 67 72 6F 
 5271                 		.ascii "OQDataMode_INVALID\000"
 5272 0058 4F 51 53 65 	.LASF58:
 5272      74 46 69 6C 
 5272      6C 00 
 5273                 		.ascii "buffer_end\000"
 5274 005d 47 4E 55 20 	.LASF78:
 5274      43 20 34 2E 
 5274      33 2E 34 20 
 5274      43 53 52 20 
 5274      76 65 72 73 
 5275                 		.ascii "queueData\000"
 5276 0073 73 68 6F 72 	.LASF18:
 5276      74 20 69 6E 
 5276      74 00 
 5277                 		.ascii "empty\000"
 5278 0078 4F 51 44 61 	.LASF71:
 5278      74 61 4D 6F 
 5278      64 65 5F 75 
 5278      6E 70 61 63 
 5278      6B 65 64 00 
 5279                 		.ascii "first_msb\000"
 5280 0082 4F 51 54 72 	.LASF52:
 5280      61 6E 73 66 
 5280      65 72 44 61 
 5280      74 61 00 
 5281                 		.ascii "end_offset\000"
 5282 008a 70 5F 62 75 	.LASF1:
 5282      66 66 65 72 
 5282      00 
 5283                 		.ascii "uint16\000"
 5284 008e 61 76 6C 62 	.LASF65:
 5284      6C 5F 73 70 
 5284      61 63 65 00 
 5285                 		.ascii "data_to_be_queued\000"
 5286 0094 72 65 74 5F 	.LASF55:
 5286      76 61 6C 00 
 5287                 		.ascii "octets_fetched\000"
 5288 0098 4F 51 44 61 	.LASF37:
 5288      74 61 4D 6F 
 5288      64 65 5F 49 
 5288      4E 56 41 4C 
 5288      49 44 00 
 5289                 		.ascii "enable\000"
 5290 00a2 62 75 66 66 	.LASF11:
 5290      65 72 5F 65 
 5290      6E 64 00 
 5291                 		.ascii "OQDataMode_packed\000"
 5292 00a7 71 75 65 75 	.LASF0:
 5292      65 44 61 74 
 5292      61 00 
 5293                 		.ascii "uint8\000"
 5294 00ac 65 6D 70 74 	.LASF45:
 5294      79 00 
 5295                 		.ascii "octets_removed\000"
 5296 00af 66 69 72 73 	.LASF77:
 5296      74 5F 6D 73 
 5296      62 00 
 5297                 		.ascii "popData\000"
 5298 00b4 65 6E 64 5F 	.LASF8:
 5298      6F 66 66 73 
 5298      65 74 00 
 5299                 		.ascii "bool\000"
 5300 00ba 75 69 6E 74 	.LASF49:
 5300      31 36 00 
 5301                 		.ascii "current_size\000"
 5302 00bd 64 61 74 61 	.LASF44:
 5302      5F 74 6F 5F 
 5302      62 65 5F 71 
 5302      75 65 75 65 
 5302      64 00 
 5303                 		.ascii "avlbl_data\000"
 5304 00c6 6F 63 74 65 	.LASF72:
 5304      74 73 5F 66 
 5304      65 74 63 68 
 5304      65 64 00 
 5305                 		.ascii "OQQueueData\000"
 5306 00ce 65 6E 61 62 	.LASF7:
 5306      6C 65 00 
 5307                 		.ascii "long int\000"
 5308 00d1 4F 51 44 61 	.LASF70:
 5308      74 61 4D 6F 
 5308      64 65 5F 70 
 5308      61 63 6B 65 
 5308      64 00 
 5309                 		.ascii "data_to_be_moved\000"
 5310 00da 75 69 6E 74 	.LASF56:
 5310      38 00 
 5311                 		.ascii "data_to_be_fetched\000"
 5312 00dd 6F 63 74 65 	.LASF32:
 5312      74 73 5F 72 
 5312      65 6D 6F 76 
 5312      65 64 00 
 5313                 		.ascii "data_size\000"
 5314 00e5 70 6F 70 44 	.LASF28:
 5314      61 74 61 00 
 5315                 		.ascii "OQIsFull\000"
 5316 00e9 62 6F 6F 6C 	.LASF43:
 5316      00 
 5317                 		.ascii "OQDecrementSize\000"
 5318 00eb 63 75 72 72 	.LASF2:
 5318      65 6E 74 5F 
 5318      73 69 7A 65 
 5318      00 
 5319                 		.ascii "unsigned char\000"
 5320 00f2 61 76 6C 62 	.LASF62:
 5320      6C 5F 64 61 
 5320      74 61 00 
 5321                 		.ascii "src_starts_at_odd_octet\000"
 5322 00f7 4F 51 51 75 	.LASF41:
 5322      65 75 65 44 
 5322      61 74 61 00 
 5323                 		.ascii "space\000"
 5324 00fd 6C 6F 6E 67 	.LASF5:
 5324      20 69 6E 74 
 5324      00 
 5325                 		.ascii "signed char\000"
 5326 0102 64 61 74 61 	.LASF15:
 5326      5F 74 6F 5F 
 5326      62 65 5F 6D 
 5326      6F 76 65 64 
 5326      00 
 5327                 		.ascii "capacity\000"
 5328 010a 64 61 74 61 	.LASF69:
 5328      5F 74 6F 5F 
 5328      62 65 5F 66 
 5328      65 74 63 68 
 5328      65 64 00 
 5329                 		.ascii "octets_moved\000"
 5330 0114 64 61 74 61 	.LASF74:
 5330      5F 73 69 7A 
 5330      65 00 
 5331                 		.ascii "octet_queue.c\000"
 5332 0119 4F 51 49 73 	.LASF33:
 5332      46 75 6C 6C 
 5332      00 
 5333                 		.ascii "OQSpace\000"
 5334 011d 4F 51 44 65 	.LASF60:
 5334      63 72 65 6D 
 5334      65 6E 74 53 
 5334      69 7A 65 00 
 5335                 		.ascii "src_octet\000"
 5336 0125 75 6E 73 69 	.LASF76:
 5336      67 6E 65 64 
 5336      20 63 68 61 
 5336      72 00 
 5337                 		.ascii "_OQ_HANDLE_T\000"
 5338 012c 73 72 63 5F 	.LASF16:
 5338      73 74 61 72 
 5338      74 73 5F 61 
 5338      74 5F 6F 64 
 5338      64 5F 6F 63 
 5339                 		.ascii "start\000"
 5340 0138 73 70 61 63 	.LASF3:
 5340      65 00 
 5341                 		.ascii "short unsigned int\000"
 5342 013b 73 69 67 6E 	.LASF29:
 5342      65 64 20 63 
 5342      68 61 72 00 
 5343                 		.ascii "OQCapacity\000"
 5344 0141 63 61 70 61 	.LASF47:
 5344      63 69 74 79 
 5344      00 
 5345                 		.ascii "OQSetSize\000"
 5346 0146 6F 63 74 65 	.LASF27:
 5346      74 73 5F 6D 
 5346      6F 76 65 64 
 5346      00 
 5347                 		.ascii "OQIsEmpty\000"
 5348 014c 6F 63 74 65 	.LASF19:
 5348      74 5F 71 75 
 5348      65 75 65 2E 
 5348      63 00 
 5349                 		.ascii "mode\000"
 5350 0153 4F 51 53 70 	.LASF20:
 5350      61 63 65 00 
 5351                 		.ascii "OQ_HANDLE_T\000"
 5352 0157 73 72 63 5F 	.LASF59:
 5352      6F 63 74 65 
 5352      74 00 
 5353                 		.ascii "out_msb\000"
 5354 015c 5F 4F 51 5F 	.LASF39:
 5354      48 41 4E 44 
 5354      4C 45 5F 54 
 5354      00 
 5355                 		.ascii "OQRollbackClear\000"
 5356 0163 73 74 61 72 	.LASF23:
 5356      74 00 
 5357                 		.ascii "buffer_mode\000"
 5358 0166 73 68 6F 72 	.LASF22:
 5358      74 20 75 6E 
 5358      73 69 67 6E 
 5358      65 64 20 69 
 5358      6E 74 00 
 5359                 		.ascii "buffer_capacity\000"
 5360 016f 4F 51 43 61 	.LASF40:
 5360      70 61 63 69 
 5360      74 79 00 
 5361                 		.ascii "OQIncrementSize\000"
 5362 0175 4F 51 53 65 	.LASF4:
 5362      74 53 69 7A 
 5362      65 00 
 5363                 		.ascii "long unsigned int\000"
 5364 017a 4F 51 49 73 	.LASF31:
 5364      45 6D 70 74 
 5364      79 00 
 5365                 		.ascii "octet_count\000"
 5366 017f 6D 6F 64 65 	.LASF57:
 5366      00 
 5367                 		.ascii "in_msb\000"
 5368 0181 4F 51 5F 48 	.LASF24:
 5368      41 4E 44 4C 
 5368      45 5F 54 00 
 5369                 		.ascii "handle\000"
 5370 0187 6F 75 74 5F 	.LASF51:
 5370      6D 73 62 00 
 5371                 		.ascii "OQGetEndOffset\000"
 5372 018b 4F 51 52 6F 	.LASF13:
 5372      6C 6C 62 61 
 5372      63 6B 43 6C 
 5372      65 61 72 00 
 5373                 		.ascii "OQDataMode\000"
 5374 0193 62 75 66 66 	.LASF63:
 5374      65 72 5F 6D 
 5374      6F 64 65 00 
 5375                 		.ascii "src_data_mode\000"
 5376 0199 62 75 66 66 	.LASF54:
 5376      65 72 5F 63 
 5376      61 70 61 63 
 5376      69 74 79 00 
 5377                 		.ascii "data_size_in_octets\000"
 5378 01a1 4F 51 49 6E 	.LASF26:
 5378      63 72 65 6D 
 5378      65 6E 74 53 
 5378      69 7A 65 00 
 5379                 		.ascii "OQIsValid\000"
 5380 01a9 6C 6F 6E 67 	.LASF42:
 5380      20 75 6E 73 
 5380      69 67 6E 65 
 5380      64 20 69 6E 
 5380      74 00 
 5381                 		.ascii "remaining\000"
 5382 01b2 6F 63 74 65 	.LASF46:
 5382      74 5F 63 6F 
 5382      75 6E 74 00 
 5383                 		.ascii "wrap_size\000"
 5384 01b8 69 6E 5F 6D 	.LASF38:
 5384      73 62 00 
 5385                 		.ascii "fill_octet\000"
 5386 01bc 68 61 6E 64 	.LASF50:
 5386      6C 65 00 
 5387                 		.ascii "OQGetStartOffset\000"
 5388 01bf 4F 51 47 65 	.LASF53:
 5388      74 45 6E 64 
 5388      4F 66 66 73 
 5388      65 74 00 
 5389                 		.ascii "p_data\000"
 5390 01c7 4F 51 44 61 	.LASF21:
 5390      74 61 4D 6F 
 5390      64 65 00 
 5391                 		.ascii "OQ_HANDLE\000"
 5392 01cc 73 72 63 5F 	.LASF25:
 5392      64 61 74 61 
 5392      5F 6D 6F 64 
 5392      65 00 
 5393                 		.ascii "OQCreate\000"
 5394 01d3 64 61 74 61 	.LASF9:
 5394      5F 73 69 7A 
 5394      65 5F 69 6E 
 5394      5F 6F 63 74 
 5394      65 74 73 00 
 5395                 		.ascii "unsigned int\000"
 5396 01dd 4F 51 49 73 	.LASF17:
 5396      56 61 6C 69 
 5396      64 00 
 5397                 		.ascii "boundary\000"
 5398 01e2 72 65 6D 61 	.LASF35:
 5398      69 6E 69 6E 
 5398      67 00 
 5399                 		.ascii "OQClear\000"
 5400 01e7 77 72 61 70 	.LASF61:
 5400      5F 73 69 7A 
 5400      65 00 
 5401                 		.ascii "OQPopData\000"
 5402 01ec 66 69 6C 6C 	.LASF67:
 5402      5F 6F 63 74 
 5402      65 74 00 
 5403                 		.ascii "from\000"
 5404 01f2 4F 51 47 65 	.LASF64:
 5404      74 53 74 61 
 5404      72 74 4F 66 
 5404      66 73 65 74 
 5404      00 
 5405                 		.ascii "octets_queued\000"
 5406 01fa 70 5F 64 61 		.ident	"GCC: (GNU) 4.3.4 CSR version 22 for xap [1468380]"
 5406      74 61 00 
 5407                 	...
